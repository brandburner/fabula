// File: fabula_dev/myth04.baml
// Jinja-like template syntax for baml python library
// Defines classes, enums and functions to guide LLM output to strict schema alignment

// Reusable template string for the narrative analyst persona
template_string Narrative_analyst_persona #"
  {{ _.role('system') }}
  You are a world-class script editor, dramaturg and expert in narrative analysis, skilled at dissecting drama scripts according to a structured ontology.
  Your extensive knowledge of story structure, character development, and thematic elements enables you to provide insightful and accurate analyses.
  You have a detailed, authoritative and encyclopedic knowledge, combined with a passion fandom of the television show you are tasked with analysing today.
  You are meticulous and ensure that all extracted entities and relationships strictly conform to the specified ontology and UUID formatting rules.
  You excel at recognizing subtle nuances in language and context, allowing you to resolve ambiguous references and infer implicit information without overstepping the provided context.
  In complex or underspecified scenarios, you make reasonable and justified assumptions based on your deep understanding of narrative conventions.
  Your responses are always well-structured, clear, and consistent with the provided guidelines. You diligently identify and flag any inconsistencies or potential errors in the narrative data.
  You are committed to delivering high-quality, reliable, and precise analyses, ensuring comprehensive extraction of both explicit and implicit narrative elements.

"#

class Episode {
    title string @description("The official title of the episode, reflecting its central theme or key events. Example: 'Episode One - Fault Lines'.")
    synopsis string @description("A brief summary outlining the main plot points and developments of the episode.")
    episode_number int @description("The numerical order of the episode within the season or series. Example: 1 for the first episode.")
    part_of_serial string @description("The name of the larger series or serial to which this episode belongs. Example: 'The West Wing'.")
    @@dynamic
}

class Scene {
    title string @description("The official title of the scene, capturing its primary focus or significant events. Example: 'Emergency at the Kosovo-Serbia Border'.")
    description string @description("A detailed narrative summarizing the scene's setting, involved characters, and main actions. It should encapsulate the atmosphere and key occurrences.")
    scene_number int? @description("The numerical sequence of the scene within its respective episode. Example: 1 for the first scene in an episode.")
    location string @description("The UUID of the primary location where the scene takes place. Follows the format 'location-<normalized_name>'. If the location is not identifiable, use 'location-unknown'.")
    next_scene string? @description("The UUID of the subsequent scene in the narrative flow, following the format 'scene-XXX'. If there is no next scene, set to null.")
    uuid string @description("Unique identifier derived from the scene number with 'scene-' prefix and leading zeroes, e.g. 'scene-001'")
    @@dynamic
}

class Event {
    title string @description("The official title of the event, summarizing its essence. Example: 'Josh Lyman Enters Situation Room'.")
    uuid string @description("Unique identifier for the event.")
    description string @description("A comprehensive description detailing what happens during the event, including key actions and outcomes.")
    sequence_within_scene int @description("The order of the event within its scene, starting from 1.")
    key_dialogue string[] @description("An array of significant dialogue lines that are central to the event's occurrence or impact.")
    agent_participations string[] @description("An array of agent UUIDs participating in the event, referencing the 'agents' registry. Example: ['agent-josh_lyman'].")
    object_involvements string[] @description("An array of object UUIDs involved in the event, referencing the 'objects' registry. Example: ['object-tie'].")
    next_event string? @description("The UUID of the next event in chronological order within the scene. If there is no subsequent event, set to null.")
    @@dynamic
}

class Agent {
    uuid string @description("Unique identifier for the agent in snake_case, derived from their name excluding title, honorific or rank, in the format 'agent-{agent_id}', for example 'agent-josiah_bartlet', 'agent-jean_luc_picard', 'agent-she_ra' Special exceptions for cases where the character's name *is* a title, such as 'agent-darth_vader'")
    agent_id string @description("Unique identifier derived from the agent's name in snake_case")
    name string @description("Full canonical name (including surname) of the dramatic agent (character) if you know it.")
    title string? @description("Official or informal role, title, or designation held by the agent within the narrative (e.g., 'Doctor', 'UNIT Commander', 'President of the United States', 'Lieutenant Commander').")
    aliases string[]? @description("Alternative names or titles used to refer to the agent.")
    description string @description("Comprehensive general (not scene-specific) character profile based on all known information in the story so far. This is an evergreen description but you'll keep adding to and revising it as the story progresses.")
    traits string[] @description("List of defining qualities and characteristics that describe the agent's personality, behavior, or abilities (e.g., 'Brave', 'Time Lord', 'Resourceful').")
    affiliated_org string @description("The organization the agent appears to be officially associated with. Expressed as a unique identifier in snake_case, in the format 'org-{org_id}' of  (e.g., 'org-department_of_justice', 'org-time_lords', 'org-galactic_empire', 'org-library_of_congress'. Organization is broad and might include corporations, orchestras, universities, sports teams, alien empires, races, institutions or any other permanent or temporary collective bodies or gatherings.") @alias("affiliated_org_uuid")
    sphere_of_influence string? @description("Primary domain, area, or field where the agent exerts their power or influence (e.g., 'Time Travel', 'Military Strategy').")
    @@dynamic
}

class Organization {
    uuid string @description("Unique identifier for the organization in snake_case, in the format 'org-{name}', for example 'org-time_lords', 'org-galactic_empire', 'org-united_federation_of_planets'")
    name string @description("Name of the organization.")
    description string @description("Description of the organization's purpose and role.")
    sphere_of_influence string @description("Area where the organization has influence.")
    members string[]? @description("List of UUIDs of agents who are members of this organization.")
    @@dynamic
}

class Object {
    uuid string @description("Unique identifier for the object, following the format 'object-<normalized_name>'. Example: 'object-lcd_screens'.")
    name string @description("The official name of the object. Example: 'LCD Screens'.")
    description string @description("A detailed description of the object's nature, physical attributes, and role within the narrative.")
    purpose string @description("The intended use or function of the object within the context of the narrative. Example: 'To visualize satellite imagery for briefings'.")
    significance string @description("The narrative importance or symbolic meaning of the object. Example: 'Provides visual context for the Kosovo-Serbia situation'.")
    original_owner string? @description("The UUID of the agent who originally owns the object, following the format 'agent-<agent_id>'. Example: 'agent-josh_lyman'. If no owner, set to null.")
    @@dynamic
}

class Location {
    uuid string @description("Unique identifier for the location in snake_case, in the format 'location-{name}', for example 'location-mos_eisley' or 'location-hogwarts_castle'")
    name string @description("Name of the location.")
    description string @description("Detailed description of the location's characteristics.")
    type string @description("Type of location (e.g., City, Building, Planet, Office, Apartment).")
    @@dynamic
}

class AgentParticipation {
    uuid string @description("Unique identifier for this agent's participation in an event in the format 'participation-{agent_uuid}-{event_uuid}', for example 'participation-agent-sally_sparrow-event-1-4'.")
    agent string @description("UUID of the agent participating in the event.")
    event string @description("UUID of the event.")
    current_status string @description("What the agent is doing during the event.")
    emotional_state string @description("Brief description of the agent's emotional disposition during the event.")
    active_plans string[] @description("Brief description of the agent's objectives or strategies within the context of the event.")
    beliefs string[] @description("The agent's beliefs or convictions that influence their actions during the event.")
    goals string[] @description("The agent's short-term and long-term goals related to the event.")
    @@dynamic
}

class ObjectInvolvement {
    uuid string @description("Unique identifier for this object's involvement in an event in the format 'involvement-{object_uuid}-{event_uuid}', for example 'involvement-object-writing_on_wall-event-1-4'")
    object string @description("UUID of the involved object.")
    event string @description("UUID of the event where the object is involved.")
    description_of_involvement string @description("Clear description of how the object is used or affected in the event, detailing its functional and narrative role.")
    object_status_before_event string @description("Brief description of the object's state prior to the event.")
    object_status_after_event string @description("Brief description of the object's state following the event.")
    @@dynamic
}

class SceneMetadata {
    uuid string @description("Unique identifier derived from the scene number with 'scene-' prefix and leading zeroes, e.g. 'scene-001'.")
    title string @description("Title of the scene.")
    description string @description("Detailed description of the scene's setting and action.")
    scene_number int? @description("Order of the scene within the episode.")
    location string @description("UUID of the primary location where this scene takes place.")
    next_scene string? @description("UUID of the next scene in the narrative order (syuzhet).")
}


function ExtractSceneMetadata(scene_text: string, story_context: string?, scene_number: int) -> SceneMetadata {
    client CustomGPT4oMini
    prompt #"
        {{ Narrative_analyst_persona ()}}

        **Objective**:
        Extract comprehensive metadata for the current scene based on the provided `scene_text` and, when necessary, infer information from the provided `story_context`. The metadata should include:

        1. **Title**:
            *   Generate a concise and descriptive title that encapsulates the central theme, major event, or key emotional tone of the scene.
            *   Ensure the title is unique and reflective of the scene's content.

        2. **Description**:
            *   Provide a detailed summary of the scene, including:
                *   **Setting**: Describe the physical location, time of day, and atmosphere.
                *   **Characters Present**: List key characters involved in the scene.
                *   **Major Actions**: Outline the primary actions, conflicts, or events that occur.
                *   **Emotional Tone**: Capture the prevailing emotions or tensions within the scene.

        3. **Scene Number**:
            *   If the scene number is explicitly mentioned in the `scene_text`, extract and assign it.
            *   If not apparent, leave the `scene_number` field null or assign externally during post-processing.

        4. **Location**:
            *   Identify the primary location where the scene takes place.
            *   Use normalized UUID formatting (e.g., `location-white_house-situation_room`).
            *   **If the location is not explicitly stated in the `scene_text`, use the `story_context` to infer the most likely location. For example, if the scene involves characters known to work in the White House and mentions office activities, you might infer `location-white_house` or a more specific location within the White House if context provides it.**
            *   If the location is not clearly identifiable and cannot be reasonably inferred, assign a placeholder such as `location-unknown`.

        5. **Next Scene**:
            *   Detect any explicit references or cues that indicate what the next scene will be.
            *   Assign the corresponding `scene_uuid` if available.
            *   If no explicit reference exists, leave the `next_scene` field null.

        **Important Considerations:**
        *   While `scene_text` is your primary source, make reasonable inferences about the location based on `story_context` if the location is not directly mentioned.
        *   Ensure consistency in location identification across scenes. If a location has been identified in a previous scene, use the same UUID for subsequent scenes occurring in the same location.

        **Story context materials:**
        {{ story_context }}

        {{ _.role('user') }}
        **Scene to analyze:**
        Scene number {{ scene_number }}
        {{ scene_text }}
        <end of scene>

        {{ ctx.output_format }}
    "#
}

function ExtractEvents(scene_text: string, story_context: string?, scene_number: int) -> Event[] {
    client CustomGPT4oMini
    prompt #"
        {{ Narrative_analyst_persona ()}}

        **Instructions**:
        Extract and detail each distinct event or occurrence within the current scene in chronological order. For each event, provide comprehensive information as outlined below:

        1. **Event Identification**:
        - **Chronological Order**: Ensure events are ordered based on their sequence of occurrence within the scene.
        - **Distinctness**: Each event should represent a unique action, decision, or occurrence that advances the narrative.

        2. **Event Details**:
        - **Title**:
            - Create a clear and descriptive title that encapsulates the essence of the event.
        - **UUID**:
            - Will be assigned in post-processing
        - **Description**:
            - Provide a detailed summary of the event, including key actions, decisions, and outcomes.
        - **Sequence Within Scene**:
            - Assign a numerical order to each event starting from 1.
        - **Key Dialogue**:
            - Extract significant lines of dialogue that are central to the event's occurrence or impact.
            - Ensure each line is accurately attributed to the correct speaker and event.
        - **Agent Participations**:
            - List the UUIDs of agents participating in the event (e.g., `agent-josh_lyman`).
        - **Object Involvements**:
            - List the UUIDs of objects involved in the event (e.g., `object-tie`).
        - **Next Event**:
            - Assign the UUID of the subsequent event in chronological order (e.g., `event-1-2`).
            - If there is no subsequent event, set this field to null.

        3. **UUID Integrity**:
        - Ensure that all UUIDs for agents and objects correspond to valid entries in the provided `known_agents` and `known_objects` lists.
        - Do not introduce new UUIDs for known entities; reuse existing ones for consistency.

        4. **Comprehensive Extraction**:
        - Identify and include all relevant events to provide a complete understanding of the scene's progression.
        - Avoid overlooking minor yet contextually significant occurrences.

        **Story background context**:
        {{ story_context }}

        {{ _.role('user') }}
        **Scene to analyze**:
        Scene number {{ scene_number }}
        {{ scene_text }}
        <end of scene>

        {{ ctx.output_format }}
    "#
}

function ExtractAgents(scene_text: string, story_context: string?, agent_name_to_uuid_mapping: map<string, string>, scene_number: int) -> Agent[] {
    client CustomGPT4oMini
    prompt #"
        {{ Narrative_analyst_persona ()}}

        **Objective**:
        This is part of a task to process the provided story scene-by-scene.
        Your focus is on the provided scene. Find ALL the dramatic agents (characters) appearing in this scene. Previously-seen characters have an existing UUID (provided) but still need full details. Fresh characters you'll define from scratch.
        Extract comprehensive information about the characters in the current scene (the provided `scene_text`) according to the schema provided.

        **Instructions**:
        1. Identify each unique agent (character) who:
           - Speaks dialogue, or
           - Takes action, or
           - Is directly referenced
           Don't treat group entities (e.g 'hostages', 'angry mob', 'aides' etc.) as Agents unless they have dialogue. Even then 'Protester 1' would likely be the agent and'Civil Rights Protestors' be an Organization.
        2. For each agent:
           - Always provide their full name (including surname) if you think you know it.
           - **Do not use honorifics and titles for agent names, even if referred to as such in the scene (e.g. 'James T. Kirk', not 'Captain Kirk'). Make exceptions for special cases where the honorific *is* the name, like 'The Doctor' or 'The Master'.**
           - Use a unique identifier derived from the agent's name in snake_case (e.g., josiah_bartlet, eleventh_doctor).
           - Provide a clear description of their role and characteristics in this scene.
           - Note the organization or plot-significant group the character is affiliated with. Organization is broad and might include corporations, orchestras, universities, sports teams, alien empires, races, institutions or any other permanent or temporary collective bodies or gatherings that agents in our story are affiliated with, work for, represent, belong to etc.
           - If a character appears with different forms of address (Dr. X vs Full Name), treat them as the same entity and use the most complete form as canonical.
           - **Extract all agents mentioned in the scene text, even if they don't have dialogue lines or are only mentioned by their role (e.g., "junior archivists"). Pay close attention to stage directions as well.**
           - **If an agent in the scene cannot be reasonably mapped to an agent in the provided `agent_name_to_uuid_mapping`, create a new agent with a unique `agent_id`.**
           - **Extract any aliases or alternative names used to refer to the agent within the scene.**
        3. **Use the provided `agent_name_to_uuid_mapping` to resolve agents to existing UUIDs when possible. If an agent's name or alias matches a key in the mapping, use the corresponding UUID as the `agent_id`.**

        **Story background context**:
        {{ story_context }}

        {{ _.role('user') }}
        **Existing Agents: Name to UUID Mapping (use this to resolve name variations of known agents)**:
        {% for name in agent_name_to_uuid_mapping %}{{ name }}: {{ agent_name_to_uuid_mapping[name] }}
        {% endfor %}

        **Scene to analyze**:
        Scene number {{ scene_number }}
        {{ scene_text }}
        <end of scene>

        {{ ctx.output_format }}
    "#
}

function ExtractObjects(
    scene_text: string,
    story_context: string?,
    scene_number: int
) -> Object[] {
    client CustomGPT4oMini
    prompt #"
        {{ Narrative_analyst_persona ()}}

        **Objective**:
        Extract comprehensive details of noteworthy objects appearing in the current scene (the provided `scene_text`).

        **Instructions**:
        - **Extract all objects that are relevant to the story or mentioned explicitly in the scene text.**
        - **NEVER categorise people as objects**
        - Do not treat groups of people (e.g. 'prisoners', 'militia', 'lobbyists') as objects - they are 'organizations' and will be captured separately
        - Do not treat character attributes as objects unless specifically relevant to the plot
        - Provide a concise 'description' of each object's nature or function.
        - **When describing the original owner of the object, use the agent's UUID.**

        **Story background context**:
        {{ story_context }}

        {{ _.role('user') }}
        **Scene to analyze**:
        Scene number {{ scene_number }}
        {{ scene_text }}
        <end of scene>

        {{ ctx.output_format }}
    "#
}

function ExtractAgentParticipations(
    scene_text: string,
    story_context: string?, // Now contains registry context!
    event: Event,
    agents_json: string // JSON string of all registered agents
) -> AgentParticipation[] {
  client CustomGPT4oMini
  prompt #"
    {{ Narrative_analyst_persona ()}}

        **Objective**:
        Identify and extract agent participations in the given event within the scene.

        **Instructions**:
        1. Analyze the `scene_text` and `event` description to determine which agents are participating in the event.
        2. For each participation, create an `AgentParticipation` object with the following:
        - `agent`:  **Crucially, select the UUID of the participating agent from the provided list of known agents (in `agents_json`). Do NOT invent new agent UUIDs. If an agent in the scene text refers to an agent already in `agents_json`, use the existing UUID. If you cannot confidently link to an existing agent, you may leave this field empty, but prefer to link to existing agents whenever possible.**
        - Ensure that each `AgentParticipation` object accurately reflects the agent's involvement in the specified event.
        - Pay close attention to the context and details within the `scene_text` to accurately determine participation and infer emotional states, plans, beliefs, and goals.
        - **Provide specific justifications for your inferences, referencing specific lines of dialogue or stage directions from the `scene_text` where possible.**

        **(Example of a good AgentParticipation):**
        ```
        - agent: agent-the_doctor
          event: event-5-6
          current_status: "Reflecting on the nature of knowledge and responsibility after the crisis."
          emotional_state: "Thoughtful and contemplative, as indicated by his statement about unexplored shadows and the reason the Time War ended."
          active_plans: ["No immediate plans mentioned in this event, but implied to continue ensuring the safety of time and space."]
          beliefs: ["Certain knowledge or events are too dangerous to explore or revisit, as implied by his comment on the Time War."]
          goals: ["Long-term: To prevent the misuse of powerful knowledge and technology that could endanger the fabric of reality."]
        ```

        **Story context (including known entities):**
        {{ story_context }}  // Registry context included here

        **Known Agents (JSON format):**
        {{ agents_json }}

        **Event Description:**
        {{ event.description }}

        {{ _.role('user') }}
        **Scene to analyze**:
        {{ scene_text }}
        <end of scene>

        {{ ctx.output_format }}
    "#
}

function ExtractObjectInvolvements(scene_text: string, story_context: string?, event: Event, objects_json: string) -> ObjectInvolvement[] {
  client CustomGPT4oMini
  prompt #"
    {{ Narrative_analyst_persona ()}}

    **Objective**:
    Use your dramatic analysis to provide a comprehensive picture of objects' literal or subtextual involvement in an event, including who used it.

    **Instructions**:
    For the provided `event`, review the `scene_text` and `story_context` to determine which objects were involved in the event.
    - Consider both direct and indirect involvement of objects.
    - For each object involved, create an `ObjectInvolvement` object with the following information:
        - `object`: The UUID of the involved object.
        - `event`: The UUID of the event where the object is involved.
        - `description_of_involvement`: A clear description of how the object is used or affected in the event, detailing its functional and narrative role.
        - `object_status_before_event`: A brief description of the object's state prior to the event.
        - `object_status_after_event`: A brief description of the object's state following the event.
    - Use the provided `objects_json` array to ensure you are using valid object UUIDs.
    - Ensure that each `ObjectInvolvement` object accurately reflects the object's role in the specified event.
    - Pay close attention to the context and details within the `scene_text` to accurately determine object involvement.

    **Story background context**:
    {{ story_context }}

    {{ _.role('user') }}
    **Event to Analyze**:
    {{ event }}

    **Existing Objects**:
    <objects>
    {{ objects_json }}
    </objects>

    **Scene to analyze**:
    {{ scene_text }}
    <end of scene>

    {{ ctx.output_format }}
  "#
}

function ExtractLocations(scene_text: string, story_context: string?, scene_number: int) -> Location[] {
   client CustomGPT4oMini
   prompt #"
       {{ Narrative_analyst_persona ()}}

       **Objective**:
        Provide comprehensive details of the principal location this scene takes place in, along with other significant places referred to.

       **Instructions**:
        - Look for references to places (rooms, cities, planets, bases, etc.) in both dialogue and stage directions.
        - **Prioritize specificity:** If a place is described as a specific room within a larger building (e.g., "Situation Room" within the "White House"), create a UUID that reflects this hierarchy (e.g., `location-white_house-situation_room`).
        - **Distinguish between locations and objects:** If an entity could be both a location and an object (e.g., "Situation Room"), treat it as a location if it's a defined space where actions occur. If it's primarily used as an object within a scene, treat it as such. Use your judgment based on the context.
        - Provide a brief 'description' of each location if present in the text.
        - If not sure, omit or note as 'unknown'.

       **Story background context**:
       {{ story_context }}

       {{ _.role('user') }}
       **Scene to analyze**:
       Scene number {{ scene_number }}
       {{ scene_text }}
        <end of scene>

       {{ ctx.output_format }}
   "#
}

function ExtractOrganizationsORIG(
    scene_text: string,
    story_context: string?,
    scene_number: int
) -> Organization[] {
    client CustomGPT4oMini
    prompt #"
        {{ Narrative_analyst_persona ()}}

        **Objective**:
        Extract comprehensive details of organizations appearing in the current scene (the provided `scene_text`) or the provided list of Known Agents (specifically their affiliated_org) and Known Organizations.
        In the knowledge graph we are constructing, it is vital that each agent's 'affiliated_org' is modeled as complete Organization object, with a recriprocal connection via the Organization's member list.
        For example if an agent has an affiliated_org like this:

            "agent-nancy_mcnally": {
                "uuid": "agent-nancy_mcnally",
                "agent_id": "nancy_mcnally",
                "name": "Nancy McNally",
                "title": "National Security Advisor",
                "description": "Nancy McNally is the National Security Advisor, responsible for the country's security policies and strategies. She is depicted as a strong and authoritative figure, capable of handling high-pressure situations with a steady hand. Her expertise in national security matters is complemented by her ability to maintain a commanding presence.",
                "traits": [
                    "Strategic",
                    "Authoritative",
                    "Concerned",
                    "Experienced"
                ],
                "affiliated_org": "org-national_security_council",
                "sphere_of_influence": "National Security"
            },

            then this should also exist as an extracted organization, even if it isn't explicitly mentioned in the scene:

            "org-national_security_council": {
                "uuid": "org-national_security_council",
                "name": "National Security Council",
                "description": "Advises the President on national security and foreign policy matters.",
                "sphere_of_influence": "United States government and its foreign relations.",
                "members": [
                    "agent-nancy_mcnally"
                ]
            },

        It's also fine for organizations that are referenced in passing to have no agent members, for example:

            "org-serbian_paramilitary_group": {
                "uuid": "org-serbian_paramilitary_group",
                "name": "Serbian Paramilitary Group",
                "description": "A paramilitary organization claiming responsibility for the attack on USAID workers.",
                "sphere_of_influence": "Serbia and areas affected by its armed groups.",
                "members": []
            },

        Organizations is a broad term and might include corporations, orchestras, universities, sports teams, alien empires, races, institutions or any other permanent or temporary collective bodies or gatherings that agents in our story are affiliated with, work for, represent, belong to etc., or otherwise appear significantly in the story.

        **Instructions**:
        - An organization is typically a group or institution (e.g., a military unit, government body, or secret society).
        - An organization may also be a temporary grouping of people (e.g. hostages, an angry crowd, or tour group)
        - Provide a brief 'description' of the organization's role or purpose if stated or implied.
        - **Identify members of each organization. Use the scene text to determine which agents belong to each organization. List the members using their UUIDs (e.g., `agent-sarah_chen`).**
        - If the provided information does not mention any type of organization, return an empty list.

        **Story background context**:
        {{ story_context }}

        {{ _.role('user') }}
       **Scene to analyze**:
        Scene number {{ scene_number }}
        {{ scene_text }}
        <end of scene>

        {{ ctx.output_format }}
    "#
}

function ExtractOrganizations(
    scene_number: int,
    scene_text: string,
    story_context: string?,
    agents: Agent[],
    organizations: Organization[]
) -> Organization[] {
    client CustomGPT4oMini
    prompt #"
        {{ Narrative_analyst_persona ()}}

        **Objective**:
        Extract comprehensive details of organizations appearing in the current scene (the provided `scene_text`), or referenced by the provided `agents` list.

        **Instructions**:
        - An organization is typically a group or institution (e.g., a military unit, government body, or secret society).
        - Organizations can also be less formal groupings (e.g. "protesters", "hostages").
        - Provide a brief 'description' of the organization's role or purpose if stated or implied.
        - **Crucially, ensure that any `members` you list for an organization are valid UUIDs of agents from the provided `agents` list. Do NOT create new agent UUIDs here.**
        - **If an agent's `affiliated_org` field refers to an organization that is NOT explicitly mentioned in the scene text, but IS a known organization (present in the `organizations` list), do NOT create a new organization. Instead, ensure that the agent's UUID is present in the existing organization's `members` list.**
        - **If an agent's `affiliated_org` field refers to an organization that is NOT explicitly mentioned in the scene text, and is NOT a known organization, create a new `Organization` object for it. The new organization's `name` should be derived from the `affiliated_org` field (e.g., `org-example_corp` becomes `Example Corp`). Add the agent's UUID to the new organization's `members` list.**

        **Story background context**:
        {{ story_context }}

        **Known Agents**:
        {% for agent in agents %}
        - {{ agent.name }} ({{ agent.uuid }}): affiliated_org = {{ agent.affiliated_org or 'None' }}
        {% endfor %}

        **Known Organizations**:
        {% for org in organizations %}
        - {{ org.name }} ({{ org.uuid }})
        {% endfor %}

        {{ _.role('user') }}
        **Scene to analyze**:
        Scene number {{ scene_number }}
        {{ scene_text }}
        <end of scene>

        {{ ctx.output_format }}
    "#
}