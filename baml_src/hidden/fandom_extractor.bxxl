// ======================================
// Data Structures: Core Types
// ======================================
class Person {
    name string @description("Name of the person.")
    role string? @description("Role of the person (e.g., actor, director).")
    @@dynamic
}

enum MediaType {
    VHS @description("Video Home System format")
    DVD @description("Digital Versatile Disc format")
    BLU_RAY @description("High-definition optical disc format")
}

class Release {
    media_type MediaType @description("The type of media (e.g., VHS, DVD, Blu-ray)")
    date string @description("Release date of the media.")
    details string? @description("Additional details about the release.")
    special_features string[] @description("List of special features included in the release.")
}

class Rating {
  part string @description("Part or episode the rating is for.")
  viewers float @description("Number of viewers in millions.")
}

// ======================================
// Data Structures: Story & Crew
// ======================================
class StoryMetadata {
    title string @description("Title of the story, excluding any 'TV Story' suffix")
    series string @description("Name of the series (e.g., Doctor Who).")
    season string @description("Season number.")
    episode_number int? @description("Episode number in the season.")
    release_date string @description("Initial release date of the story (may be a range).")
    release_end_date string? @description("End date if release was a range.")
    writer string @description("Writer of the story.")
    director string @description("Director of the story.")
    producer string? @description("Producer of the story.")
    main_actors string[] @description("List of main actors in the story.")
    time_reference string @description("Reference point within the story's timeline indicating when this scene occurs (e.g., 'Year 3000', 'During the Cybermen Invasion').")
    @@description("Core metadata for the story.")
}

class CastCrew {
  cast Person @description("The main cast member")
  uncredited_cast Person? @description("An uncredited cast member.")
  crew Person @description("The crew member")
  @@description("Actors and crew involved in the production.")
}

class HomeRelease {
    releases Release? @description("Information on home media releases.")
    @@description("Information on home media releases.")
}

class StoryNotes {
    notes string[] @description("Collection of story notes and commentary.")
    @@description("Collection of story notes and commentary.")
}

class Worldbuilding {
    in_universe_mythology string[] @description("References to in-universe mythology or lore.")
    real_world_cultural_references string[] @description("References to real-world culture, history, or mythology.")
    individuals string[] @description("List of notable individuals within the story's setting")
    items string[] @description("List of notable items within the story's setting")
    locations string[] @description("List of notable locations within the story's setting")
    @@description("Various elements related to the worldbuilding of the story.")
}
class Ratings {
    ratings_millions Rating[] @description("Television Ratings in millions.")
    @@description("Television Ratings in millions.")
}
class Continuity {
  continuity_notes string[] @description("Notes on the continuity of the story in the series")
  @@description("Notes on the continuity of the story in the series")
}

class EpisodePlot {
  plot_summary string @description("the detailed plot of an individual episode")
  @@description("the detailed plot of an individual episode")
}

// ======================================
// Data Structures: Full Response
// ======================================
class WikiData {
    metadata StoryMetadata @description("Core metadata for the story.")
    cast_crew CastCrew[] @description("Actors and crew involved in the production.")
    home_media HomeRelease[] @description("Information on home media releases.")
    story_notes StoryNotes[] @description("Collection of story notes and commentary.")
    worldbuilding Worldbuilding @description("Various elements related to the worldbuilding of the story.")
    ratings Ratings? @description("Television Ratings in millions.")
    continuity Continuity? @description("Notes on the continuity of the story in the series")
    plot EpisodePlot[] @description("Detailed plot summaries for each episode.")
    @@description("The complete structured data extracted from the Wiki page.")
}

function ExtractAllWikiData(text: string) -> WikiData {
    client CustomGPT4oMini
    prompt #"
        You're an expert dramaturg and archivist, specialising in TV drama. Your role is to gather for posterity the production and story details of the show you've been assigned.
        Be dilignent and thoughtful. Carefully extract all data from this background material to our archival schema.

        Use the dedicated functions for metadata, cast/crew, media, notes, worldbuilding, ratings, continuity, and plot summaries for each episode
        Combine results into a WikiData object.
        
         Include details about:
          - The main cast and crew including roles.
          - Any details about home media releases like special features.
          - Any details about the timeline or era of the story.
          - Key locations, characters and items.
          - Summarize the plot of each episode.

       {{ ctx.output_format }}
        Text:
        {{text}}
    "#
}

function ExtractStoryMetadata(text: string) -> StoryMetadata {
  client CustomGPT4oMini
  prompt #"
    Extract story metadata from this text content.
     Ensure to capture the title, series, season, episode number, release date, writer, director, producer, main actors and time reference if present.
    {{ ctx.output_format }}

    Text:
    {{text}}
  "#
}


function ExtractCastCrew(text: string) -> CastCrew {
  client CustomGPT4oMini
  prompt #"
    Extract the cast and crew information from this text content.
     Ensure you provide the correct role if given.
    {{ ctx.output_format }}

     Text:
    {{text}}
  "#
}

function ExtractHomeMedia(text: string) -> HomeRelease {
  client CustomGPT4oMini
  prompt #"
    Extract home media release information (VHS/DVD/Blu-ray) from this text content.
      Ensure you separate different releases into distinct entries, capturing all available details, special features and dates for each release.

     {{ ctx.output_format }}

      Text:
    {{text}}
  "#
}

function ExtractStoryNotes(text: string) -> StoryNotes {
    client CustomGPT4oMini
    prompt #"
        Extract the story notes from this text content.

         {{ ctx.output_format }}

         Text:
         {{text}}
    "#
}

function ExtractWorldbuilding(text: string) -> Worldbuilding {
    client CustomGPT4oMini
    prompt #"
        Extract the worldbuilding elements from this text content.
          Include details about the in universe mythology, real world cultural references, notable individuals, items and locations.

         {{ ctx.output_format }}

          Text:
        {{text}}
    "#
}
function ExtractRatings(text: string) -> Ratings {
    client CustomGPT4oMini
    prompt #"
        Extract the television ratings from this text content.
        Include the part and the number of viewers in millions.

        {{ ctx.output_format }}

         Text:
         {{text}}
    "#
}

function ExtractContinuity(text: string) -> Continuity {
  client CustomGPT4oMini
  prompt #"
      Extract the continuity elements from this text content.

       {{ ctx.output_format }}

       Text:
      {{text}}
  "#
}

function ExtractEpisodePlot(text: string) -> EpisodePlot[] {
  client CustomGPT4oMini
  prompt #"
    Extract the episode plot summaries from the provided text.
     If more than one episode is mentioned, produce an array of EpisodePlot objects with summaries for each.

    {{ ctx.output_format }}

    Text:
    {{text}}
  "#
}