###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o-2024-11-20\"\n    api_key env.OPENAI_API_KEY\n    temperature 0.7\n    top_p 0.9\n    max_tokens 16384\n  }\n}\n\nclient<llm> LowTempGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o-2024-11-20\"\n    api_key env.OPENAI_API_KEY\n    temperature 0.4\n    max_tokens 16384\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n    temperature 0.5\n    max_tokens 16384\n  }\n}\n\nclient<llm> Customo3Mini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"o3-mini\"\n    api_key env.OPENAI_API_KEY\n    reasoning_effort \"low\"\n    max_completion_tokens 100000\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-latest\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  options {\n    api_key env.ANTHROPIC_API_KEY\n    model \"claude-3-haiku-20240307\"\n  }\n}\n\nclient<llm> CustomGemini {\n  provider google-ai\n  retry_policy Exponential\n  options {\n    model \"gemini-2.0-flash-thinking-exp-01-21\"\n    api_key env.GOOGLE_API_KEY\n    generationConfig {\n      maxOutputTokens 635536\n      temperature 0.5\n      topP 0.9\n    }\n  }\n}\n\nclient<llm> CustomGemini25 {\n  provider google-ai\n  retry_policy Exponential\n  options {\n    model \"gemini-2.5-pro-exp-03-25\"\n    api_key env.GOOGLE_API_KEY\n    generationConfig {\n      maxOutputTokens 635536\n      temperature 0.5\n      topP 0.9\n    }\n  }\n}\n\nclient<llm> CustomGeminiFlash {\n  provider google-ai\n  retry_policy Exponential\n  options {\n    model \"gemini-2.0-flash-001\"\n    api_key env.GOOGLE_API_KEY\n    generationConfig {\n      maxOutputTokens 635536\n      temperature 0.8\n      topP 0.9\n    }\n  }\n}\n\nclient<llm> OpenRouter {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"meta-llama/llama-3.3-70b-instruct\"\n  }\n}\n\n\nclient<llm> GemkuA {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGeminiFlash, CustomHaiku]\n  }\n}\n\nclient<llm> GemkuB {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomHaiku, CustomGemini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGemini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [LowTempGPT4o, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../utils\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.83.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "graphrag.baml": "// File: baml_src/graphrag.baml\n// Jinja-like template syntax for baml python library - boundaryml.com\n// Defines classes, enums and functions to guide LLM output to strict schema alignment\n\n\nclass NodeLabel {\n  name \"Agent\" | \"Organization\" | \"Location\" | \"Object\" | \"Scene\" | \"Event\" | \"AgentParticipation\" | \"ObjectInvolvement\"\n}\n\nclass PropertyName {\n  agent \"uuid\" | \"name\" | \"description\" | \"traits\" | \"affiliated_org\"\n  organization \"uuid\" | \"name\" | \"description\" | \"sphere_of_influence\" | \"members\"\n  location \"uuid\" | \"name\" | \"description\" | \"type\"\n  object \"uuid\" | \"name\" | \"description\" | \"purpose\" | \"significance\" | \"original_owner\"\n  scene \"uuid\" | \"title\" | \"description\" | \"scene_number\" | \"location\" | \"next_scene\"\n  event \"uuid\" | \"title\" | \"description\" | \"sequence_within_scene\" | \"key_dialogue\" | \"next_event\"\n  agentParticipation \"uuid\" | \"agent\" | \"event\" | \"current_status\" | \"emotional_state\"\n  objectInvolvement \"uuid\" | \"object\" | \"event\" | \"description_of_involvement\"\n}\n\nclass RelationType {\n  name \"NEXT_SCENE\" | \"OCCURS_IN\" | \"NEXT_EVENT\" | \"PARTICIPATES_IN\" | \"IN_EVENT\" | \"INVOLVED_IN\" | \"OWNS\" | \"AFFILIATED_WITH\" | \"PART_OF\" | \"LOCATED_IN\"\n}\n\nclass CypherQuery {\n  query string @description(\"The generated Cypher query\")\n  purpose string @description(\"Brief explanation of what the query does\")\n}\n\nfunction ValidateCypherOld(question: string) -> CypherQuery {\n    client \"openai/gpt-4o-mini\"\n    prompt #\"\n        You are a **Neo4j Cypher query generator** specializing in **narrative graph structures**.  \n        Your goal is to generate **precise, schema-compliant** Cypher queries that conform to the database schema.\n\n        ---\n        ### **Database Schema (Ensure Queries Match This)**\n        The knowledge graph models **narrative elements** such as characters, locations, events, and their relationships.\n\n        **Valid Node Labels:**\n        - **Agent (`Agent`)** → Represents characters or individuals.\n        - **AgentParticipation (`AgentParticipation`)** → Captures an agent’s role within an event.\n        - **Episode (`Episode`)** → Represents a collection of scenes within a story.\n        - **Event (`Event`)** → A meaningful action occurring within a scene.\n        - **Location (`Location`)** → Physical or conceptual places where events occur.\n        - **Object (`Object`)** → Items of significance in a scene or event.\n        - **ObjectInvolvement (`ObjectInvolvement`)** → Captures an object’s role in an event.\n        - **Organization (`Organization`)** → Factions, groups, or institutions.\n        - **Scene (`Scene`)** → A structured narrative moment, containing events.\n\n        **Valid Relationship Types:**\n        - `(s1:Scene)-[:NEXT_SCENE]->(s2:Scene)` → Defines scene sequence.\n        - `(e:Event)-[:OCCURS_IN]->(s:Scene)` → Links events to scenes.\n        - `(e1:Event)-[:NEXT_EVENT]->(e2:Event)` → Defines event sequence.\n        - `(s:Scene)-[:LOCATED_IN]->(l:Location)` → Associates a scene with a place.\n        - `(a:Agent)-[:PARTICIPATES_IN]->(ap:AgentParticipation)-[:IN_EVENT]->(e:Event)` → Links agents to events.\n        - `(o:Object)-[:INVOLVED_IN]->(oi:ObjectInvolvement)-[:IN_EVENT]->(e:Event)` → Links objects to events.\n        - `(a:Agent)-[:AFFILIATED_WITH]->(o:Organization)` → Associates agents with organizations.\n        - `(a:Agent)-[:OWNS]->(o:Object)` → Defines object ownership.\n\n        ---\n        ### **Query Generation Rules**\n        1. **STRICTLY match the node labels, properties, and relationships above.**\n        2. **Ensure relationships exist before querying properties** (prevents errors like `UnknownRelationshipTypeWarning`).\n        3. **Use indexed lookups (`uuid`) instead of querying by `name`**, unless explicitly required.\n        4. **If querying an agent, always retrieve their participations via `PARTICIPATES_IN`.**\n        5. **For objects, always retrieve their involvement via `INVOLVED_IN`.**\n        6. **Return only relevant properties**—avoid using `RETURN *`.\n\n        ---\n        ### **Example Query Strategies**\n        \n        **User Request:** `\"Find all events a character named Maddox participated in.\"`\n        \n        **Primary Query (UUID-Based, Preferred)**\n        ```cypher\n        MATCH (a:Agent {name: 'Maddox'})-[:PARTICIPATES_IN]->(ap:AgentParticipation)-[:IN_EVENT]->(e:Event)\n        RETURN e.uuid, e.title, ap.current_status, ap.emotional_state\n        ```\n\n        **Backup Query (If Direct Agent Lookup Fails)**\n        ```cypher\n        MATCH (e:Event)-[:IN_EVENT]-(ap:AgentParticipation)-[:PARTICIPATES_IN]-(a:Agent)\n        WHERE a.name CONTAINS 'Maddox'\n        RETURN DISTINCT e.uuid, e.title\n        ```\n\n        **User Request:** `\"Find all objects involved in Event XYZ.\"`\n        ```cypher\n        MATCH (o:Object)-[:INVOLVED_IN]->(oi:ObjectInvolvement)-[:IN_EVENT]->(e:Event {uuid: $event_uuid})\n        RETURN o.uuid, o.name, oi.description_of_involvement\n        ```\n\n        ---\n        **Output Format**  \n        {{ ctx.output_format }}\n\n        {{ _.role(\"user\") }} {{ question }}\n    \"#\n}\n\n\ntest SimpleQuery {\n  functions [ValidateCypher]\n  args {\n    question \"Find all agents who own objects and their affiliated organizations\"\n  }\n}\n\ntest ComplexQuery {\n  functions [ValidateCypher]\n  args {\n    question \"Show me all events in scenes where Agent 'John' participated and was in an 'ANGRY' emotional state, including the locations of these scenes\"\n  }\n}\n\nfunction ValidateCypher(question: string, available_apoc_functions: string[]) -> CypherQuery {\n    client \"openai/o3-mini\"\n    prompt #\"\n        You are a **Neo4j Cypher query generator** specializing in **narrative graph structures**.\n        Your goal is to generate **precise, schema-compliant** Cypher queries that conform to the database schema.\n\n        ---\n        ### **Database Schema**\n        The knowledge graph models **narrative elements** such as characters, locations, events, and their relationships.\n\n        **Valid APOC Procedures (ONLY Use These)**:\n        {% if available_apoc_functions and available_apoc_functions|length > 0 %}\n        {% for apoc_function in available_apoc_functions %}\n        - {{ apoc_function }}\n        {% endfor %}\n        {% else %}\n        - NO APOC FUNCTIONS AVAILABLE (DO NOT USE APOC)\n        {% endif %}\n\n        ---\n        **Schema Definition Rules**\n        1. Only use APOC functions if explicitly specified above\n        2. Strictly adhere to the following node labels, properties, and relationships:\n\n        **Nodes and Their Purpose**\n\n        1. Agent (Represents characters or individuals)\n          - uuid* (Unique identifier)\n          - name (Character's name)\n          - title (Character's title or role)\n          - description (Character background and details)\n          - traits (Array of character's defining characteristics)\n          - sphere_of_influence (Character's area of power or influence)\n\n        2. AgentParticipation (Captures how an agent participates in an event)\n          - uuid* (Unique identifier)\n          - current_status (Agent's status during the event)\n          - emotional_state (Agent's emotional condition)\n          - emotional_tags (Array of discrete emotions)\n          - active_plans (Array of current objectives)\n          - beliefs (Array of current beliefs)\n          - goals (Array of intended outcomes)\n\n        3. Object (Significant items in the narrative)\n          - uuid* (Unique identifier)\n          - name (Item name)\n          - description (Physical and contextual details)\n          - purpose (Intended function)\n          - significance (Narrative importance)\n\n        4. Event (Meaningful actions or occurrences within scenes)\n          - uuid* (Unique identifier)\n          - title (Event name)\n          - description (What happens)\n          - sequence_within_scene (Order of occurrence)\n          - key_dialogue (Array of important speech)\n\n        5. Scene (Structured narrative moments)\n          - uuid* (Unique identifier)\n          - title (Scene name)\n          - description (Scene contents and context)\n          - scene_number (Sequential identifier)\n          - location (Where it takes place)\n\n        6. Organization (Groups, factions, or institutions)\n          - uuid* (Unique identifier)\n          - name (Organization name)\n          - description (Purpose and nature)\n          - sphere_of_influence (Area of power or control)\n\n        7. Location (Physical or conceptual places)\n          - uuid* (Unique identifier)\n          - name (Place name)\n          - description (Details about the location)\n          - type (Category of location)\n\n        8. Episode (Collection of related scenes)\n          - uuid* (Unique identifier)\n          - title (Episode name)\n          - description (Episode summary)\n          - airdate (Broadcast date)\n\n        9. ObjectInvolvement (How objects are used in events)\n          - uuid* (Unique identifier)\n          - description (How object is involved)\n          - status_before (Condition pre-event)\n          - status_after (Condition post-event)\n\n        **Relationships and Their Meaning**\n\n        1. Scene Flow\n          - (Scene)-[:NEXT_SCENE]->(Scene) : Defines sequence of scenes\n          - (Scene)-[:PART_OF]->(Episode) : Groups scenes into episodes\n          - (Scene)-[:LOCATED_IN]->(Location) : Places scene in physical context\n\n        2. Event Structure\n          - (Event)-[:OCCURS_IN]->(Scene) : Places events within scenes\n          - (Event)-[:NEXT_EVENT]->(Event) : Orders events chronologically\n\n        3. Agent Interactions\n          - (Agent)-[:PARTICIPATES_IN]->(AgentParticipation)-[:IN_EVENT]->(Event) : Links characters to their actions\n          - (Agent)-[:AFFILIATED_WITH]->(Organization) : Shows group membership\n          - (Agent)-[:OWNS]->(Object) : Indicates possession\n\n        4. Object Relations\n          - (Object)-[:INVOLVED_IN]->(ObjectInvolvement)-[:IN_EVENT]->(Event) : Tracks object usage in events\n\n        Note: Properties marked with * have unique constraints\n\n\n        ---\n        **Example Query Using Verified APOC**\n        ```cypher\n        MATCH (a:Agent {name: 'Maddox'}) \n        {% if \"apoc.path.subgraphNodes\" in available_apoc_functions %}\n        CALL apoc.path.subgraphNodes(a, {relationshipFilter: \"PARTICIPATES_IN>|IN_EVENT>\", maxLevel: 2})\n        YIELD node\n        WHERE node:Event\n        RETURN node.title, node.description, node.key_dialogue;\n        {% else %}\n        MATCH (a)-[:PARTICIPATES_IN]->(ap:AgentParticipation)-[:IN_EVENT]->(e:Event)\n        RETURN e.title, e.description, e.key_dialogue;\n        {% endif %}\n        ```\n\n        ---\n        **Output Format**\n        Return the generated Cypher query as:\n        {\n          \"query\": \"MATCH (...) RETURN ...\",\n          \"purpose\": \"Brief explanation of what the query does.\"\n        }\n\n        {{ _.role(\"user\") }} {{ question }}\n    \"#\n}\n",
    "myth06.baml": "// File: baml_src/myth06.baml\n// Jinja-like template syntax for baml python library\n// Defines classes, enums and functions to guide LLM output to strict schema alignment\n\ngenerator myth06_generator {\n output_type \"python/pydantic\"\n output_dir \"../\" // Adjust path as needed\n version \"0.83.0\" // Use your current BAML version\n default_client_mode \"sync\"\n}\n\n// Reusable template string for the narrative analyst persona\ntemplate_string Narrative_analyst_persona #\"\n  {{ _.role('system') }}\nYou are a world-class script editor, dramaturg, and narrative analyst, specializing in the structured dissection of drama scripts according to a well-defined ontology. You possess the instincts of a seasoned screenwriter, understanding the importance of pacing, rhythm, and impactful story beats.\n\nYour Expertise & Approach:\n✅ Narrative Mastery: You possess an encyclopedic knowledge of story structure, character development, thematic elements, and genre conventions, allowing you to conduct insightful, contextually accurate analyses. You are particularly attuned to identifying key turning points, moments of high tension, and scenes that significantly advance the plot.\n✅ Story Beat Identification: You have a keen ability to recognize and isolate the essential story beats within a scene; the pivotal moments that drive character arcs, reveal crucial information, or alter the course of events. You understand that effective storytelling relies on carefully selected and impactful beats, not every minor action.\n✅ Pacing and Rhythm Awareness: You are sensitive to the pacing and rhythm of a scene. You consider how events contribute to the overall flow and build towards a climax, avoiding unnecessary details that disrupt the narrative's momentum.\n✅ Ontology-Driven Extraction: You meticulously extract entities, relationships, and narrative structures while strictly adhering to specified ontology rules and UUID formatting.\n✅ Fandom-Level Detail & Context Awareness: Your understanding of television shows, serialized storytelling, and worldbuilding extends beyond surface-level knowledge, enabling you to detect continuity, subtext, and intertextual references with precision.\n✅ Nuanced Language Interpretation: You excel at recognizing subtle shifts in tone, implicit information, and ambiguous references, ensuring they are correctly inferred but never misinterpreted outside the provided context.\n✅ Error Detection & Consistency: You diligently identify, flag, and resolve inconsistencies in extracted data, ensuring alignment with both internal narrative logic and established metadata constraints.\n✅ Justified Reasoning in Underspecified Cases: When encountering ambiguous or underspecified content, you apply reasoned, evidence-based assumptions grounded in narrative conventions—always ensuring transparency in your decision-making process.\n✅ Clarity, Precision, & Structure: Your responses are well-structured, concise, and explicitly aligned with provided guidelines, ensuring high-quality, repeatable analysis across scripts.\n✅ Intuition: The information you're given may sometimes seem inconsistent or even incorrect. But you're such an expert fan of the characters and situations in the show you're analysing that you're able to correct mistakes and 'fill in the blanks' from your own knowledge.\n\nYour Commitment:\nYou are dedicated to delivering comprehensive, structured, and reliable narrative extractions, ensuring a rigorous yet adaptable approach to analyzing explicit and implicit storytelling elements with consistency and accuracy. You prioritize identifying the *most important* events that shape the narrative, capturing the essence of each scene with a focus on pacing and impact.\n\"#\n\n// --- Classes ---\n\nclass Episode {\n    title string @description(\"The official title of the episode, reflecting its central theme or key events. Example: 'Episode One - Fault Lines'.\")\n    synopsis string @description(\"A brief summary outlining the main plot points and developments of the episode.\")\n    episode_number int @description(\"The numerical order of the episode within the season or series. Example: 1 for the first episode.\")\n    part_of_serial string @description(\"The name of the larger series or serial to which this episode belongs. Example: 'The West Wing'.\")\n    //@@dynamic\n}\n\nclass Scene {\n    title string @description(\"The official title of the scene, capturing its primary focus or significant events. Example: 'Emergency at the Kosovo-Serbia Border'.\")\n    description string @description(\"A detailed narrative summarizing the scene's setting, involved characters, and main actions. It should encapsulate the atmosphere and key occurrences.\")\n    scene_number int @description(\"The numerical sequence of the scene within its respective episode. Example: 1 for the first scene in an episode.\")\n    events string[] @description(\"An array of UUIDs representing the events that occur within this scene, listed in chronological order.\")\n    location string|null @description(\"The UUID of the primary location where the scene takes place. Follows the format 'location_<normalized_name>'.\")\n    next_scene string|null @description(\"The UUID of the subsequent scene in the narrative flow, following the format 'scene_XXX'. If there is no next scene, set to null.\")\n    //@@dynamic\n}\n\nclass Event {\n    title string @description(\"The official title of the event, summarizing its essence. Example: 'Josh Lyman Enters Situation Room'.\")\n    uuid string @description(\"Unique identifier for the event, following the format 'event_<scene_number>_<sequence_within_scene>'. Example: 'event_1_1'.\")\n    description string @description(\"A comprehensive description detailing what happens during the event, including key actions and outcomes.\")\n    sequence_within_scene int @description(\"The order of the event within its scene, starting from 1.\")\n    key_dialogue string[] @description(\"An array of significant dialogue lines that are central to the event's occurrence or impact.\")\n    agent_participations string[] @skip\n    object_involvements string[] @skip\n    next_event string|null @description(\"The UUID of the next event in chronological order within the scene. If there is no subsequent event, set to null.\")\n    //@@dynamic\n}\n\nclass Agent {\n    uuid string @description(\"Unique identifier for the agent in snake_case, in the format 'agent_{agent_id}', for example 'agent_josiah_bartlet', 'agent_tenth_doctor', 'agent_she_ra'\")\n    agent_id string @description(\"Unique identifier derived from the agent's name in snake_case\")\n    name string @description(\"Full canonical name (including surname) of the dramatic agent (character) excluding title, rank or honorific\")\n    title string? @description(\"Official or informal role, title, or designation held by the agent within the narrative (e.g., 'Doctor', 'UNIT Commander', 'President of the United States').\")\n    aliases string[]|null @description(\"Alternative names or titles used to refer to the agent.\")\n    description string @description(\"Comprehensive general (not scene-specific) character profile based on all known information in the story so far. This is an evergreen description but you'll keep adding to and revising it as the story progresses.\")\n    traits string[] @description(\"List of defining qualities and characteristics that describe the agent's personality, behavior, or abilities (e.g., 'Brave', 'Time Lord', 'Resourceful').\")\n    affiliated_org string|null @description(\"The organization the agent appears to be officially associated with. Expressed as a unique identifier in snake_case, in the format 'org_{org_id}'\") @alias(\"affiliated_org_uuid\")\n    sphere_of_influence string? @description(\"Primary domain, area, or field where the agent exerts their power or influence (e.g., 'Time Travel', 'Military Strategy').\")\n    //@@dynamic\n}\n\nclass Organization {\n    uuid string @description(\"Unique identifier for the organization in snake_case, in the format 'org_{normalized_name}', for example 'org_time_lords' or 'org_galactic_empire'\")\n    name string @description(\"Name of the organization.\")\n    description string @description(\"Description of the organization's purpose and role.\")\n    sphere_of_influence string @description(\"Area where the organization has influence.\")\n    members string[] @skip\n    //@@dynamic\n}\n\nclass Location {\n    uuid string @description(\"Unique identifier for the location in snake_case, in the format 'location_{name}', for example 'location_mos_eisley' or 'location_hogwarts_castle'\")\n    name string @description(\"Name of the location.\")\n    description string @description(\"Detailed description of the location's characteristics.\")\n    type string @description(\"Type of location (e.g., City, Building, Planet, Office, Apartment).\")\n    //@@dynamic\n}\n\nclass Object {\n    uuid string @description(\"Unique identifier for the object, following the format 'object_<normalized_name>'. Example: 'object_lcd_screens'.\")\n    name string @description(\"The official name of the object. Example: 'LCD Screens'.\")\n    description string @description(\"A detailed description of the object's nature, physical attributes, and role within the narrative.\")\n    purpose string @description(\"The intended use or function of the object within the context of the narrative. Example: 'To visualize satellite imagery for briefings'.\")\n    significance string @description(\"The narrative importance or symbolic meaning of the object. Example: 'Provides visual context for the Kosovo-Serbia situation'.\")\n    original_owner string|null @description(\"The UUID of the agent or org who originally owns the object, following the format 'agent_<agent_id>' or 'org_<org id>' Example: 'agent_josh_lyman', 'org_starfleet'. If no owner, set to null.\")\n    //@@dynamic\n}\n\nclass AgentParticipation {\n    uuid string @description(\"Unique identifier for this agent's participation in an event in the format 'agentparticipation_{agent_uuid}_{event_uuid}' for example 'agentparticipation_agent_mark_corrigan_event_5_3'.\")\n    agent string @description(\"UUID of the agent participating in the event.\")\n    event string @description(\"UUID of the event.\")\n    current_status string @description(\"What the agent is doing during the event.\")\n    emotional_state string @description(\"Brief description of the agent's emotional disposition during the event.\")\n    active_plans string[] @description(\"Brief description of the agent's active objectives or strategies in the context of the event.\")\n    beliefs string[] @description(\"The agent's beliefs or convictions that influence their actions during the event.\")\n    goals string[] @description(\"The agent's short-term and long-term goals related to the event.\")\n    //@@dynamic\n}\n\nclass ObjectInvolvement {\n    uuid string @description(\"Unique identifier for this object's involvement in an event in the format 'objectinvolvement_{object_uuid}_{event_uuid}', for example 'objectinvolvement_object_melatrite_nebula-event_5_5'\")\n    object string @description(\"UUID of the involved object.\")\n    event string @description(\"UUID of the event where the object is involved.\")\n    description_of_involvement string @description(\"Clear description of how the object is used or affected in the event, detailing its functional and narrative role.\")\n    object_status_before_event string @description(\"Brief description of the object's state prior to the event.\")\n    object_status_after_event string @description(\"Brief description of the object's state following the event.\")\n    //@@dynamic\n}\n\nclass SceneMetadata {\n    uuid string|null @description(\"Unique identifier for the scene.\")\n    title string @description(\"Title of the scene.\")\n    description string @description(\"Detailed description of the scene's setting and action.\")\n    scene_number int @description(\"Order of the scene within the episode.\")\n    location string|null @description(\"UUID of the primary location where this scene takes place.\")\n    next_scene string|null @description(\"UUID of the next scene in the narrative order (syuzhet).\")\n}\n\n// --- Functions ---\n\nfunction ExtractSceneMetadata(scene_text: string, story_synopsis: string?, scene_number: int, locations: Location[]) -> SceneMetadata {\n    client GemkuA\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**: Extract metadata for the current scene.\n\n        **Instructions**:\n        1. **Title**: Generate a concise, descriptive title.\n        2. **Description**: Summarize the setting, characters, actions, and emotional tone.\n        3. **Scene Number**: Extract if explicitly mentioned; otherwise, leave null.\n        4. **Location**: Select the UUID of the primary location from the provided `locations` list. If not explicit, infer from `story_context`.\n        5. **Next Scene**:  Identify any references to the next scene and assign its `scene_uuid`. If none, leave null.\n        6. **UUID**: This will be assigned in post processing.\n\n        **Story Context (use for background context when processing provided scene)**:\n        {{ story_synopsis }}\n\n        {{ _.role('user') }}\n        **Known Locations**:\n        {% for loc in locations %}\n        - {{ loc.name }} ({{ loc.uuid }})\n        {% endfor %}\n\n        **Scene to Analyze**:\n        Scene number {{ scene_number }}\n        {{ scene_text }}\n        <end of scene>\n\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ExtractEvents(scene_text: string, registry_context: string?, story_synopsis: string?, scene_number: int) -> Event[] {\n    client GemkuA\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**: Extract distinct events within the scene in chronological order.\n\n        **Instructions**:\n        Extract and detail each distinct event or occurrence within the current scene in chronological order. For each event, provide comprehensive information as outlined below:\n\n        1. **Event Identification**:\n        - **Chronological Order**: Ensure events are ordered based on their sequence of occurrence within the scene.\n        - **Distinctness**: Each event should represent a unique action, decision, or occurrence that advances the narrative.\n\n        2. **Event Details**:\n        - **Title**:\n            - Create a clear and descriptive title that encapsulates the essence of the event.\n        - **UUID**:\n            - Will be assigned in post-processing\n        - **Description**:\n            - Provide a detailed summary of the event, including key actions, decisions, and outcomes.\n        - **Sequence Within Scene**:\n            - Assign a numerical order to each event starting from 1.\n        - **Key Dialogue**:\n            - Extract significant lines of dialogue that are central to the event's occurrence or impact.\n            - Ensure each line is accurately attributed to the correct speaker and event.\n        - **Agent Participations**:\n            - List the UUIDs of agents participating in the event (e.g., `agent_josh_lyman`).\n        - **Object Involvements**:\n            - List the UUIDs of objects involved in the event (e.g., `object_school_tie`).\n        - **Next Event**:\n            - Assign the UUID of the subsequent event in chronological order (e.g., `event_1_2`).\n            - If there is no subsequent event, set this field to null.\n\n        3. **UUID Integrity**:\n        - Ensure that all UUIDs for agents and objects correspond to valid entries in the provided `known_agents` and `known_objects` lists.\n        - Do not introduce new UUIDs for known entities; reuse existing ones for consistency.\n        - Avoid using non-ASCII characters in entity names (especially for affiliated_org). Normalize or transliterate names to a standard character set.\n\n        [EXAMPLE]\n        {\n        \"title\": \"Nancy McNally Briefs the Staff\",\n        \"uuid\": \"event_1_2\",\n        \"description\": \"National Security Advisor Nancy McNally addresses the senior staff, notifying them about the four USAID workers who went missing near the Kosovo-Serbia border while conducting post-conflict assessments.\",\n        \"sequence_within_scene\": 2,\n        \"key_dialogue\": [\n            \"Four USAID workers went dark three hours ago near the Kosovo-Serbia border. They were conducting post-conflict reconstruction assessments when we lost contact.\"\n        ],\n        \"agent_participations\": [\n            \"agent_nancy_mcnally\"\n        ],\n        \"object_involvements\": [\n            \"object_lcd_screens\"\n        ],\n        \"next_event\": \"event_1_3\"\n        },\n        [/EXAMPLE]\n\n        **Story Context (use for background context when processing provided scene)**:\n        {{ story_synopsis }}\n\n\n        {{ _.role('user') }}\n        **Entity Registry (use these UUIDs ONLY when populating events with agents and objects)**\n        {{ registry_context }}\n\n        **Scene to Analyze**:\n        Scene number {{ scene_number }}\n        {{ scene_text }}\n        <end of scene>\n\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ExtractAgents(scene_text: string, story_synopsis: string?, agent_name_to_uuid_mapping: map<string, string>, scene_number: int, organizations: Organization[]) -> Agent[] {\n    client GemkuB\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**: Extract information about characters (agents) in the scene.\n\n        **Instructions**:\n        1. **Identify Agents**: Find characters who speak, act, or are directly referenced. Do *not* treat collective groups (e.g., 'hostages', 'dalek patrol') as Agents.\n        2. **Full Name**: Provide hhe most complete and and descriptive name as canonical for the 'name' property.\n        3. **No Honorifics**: Do not use titles in names (e.g., 'James T. Kirk', not 'Captain Kirk'), except for cases like 'The Doctor'.\n        4. **Minor characters**: Minor speaking characters may be identified only by number in the script ('Dalek 1', 'Soldier 2' etc.) Be careful to treat them as distinct.\n        5. **Affiliated Organization**: Select the UUID from the available organizations, or leave it null if the agent is not affiliated with any known organization.  (The available organizations are reflected in the expected output schema.)\n        6. **Aliases**: Extract any alternative names used for the agent.\n        7. **UUID Mapping**: Use the `agent_name_to_uuid_mapping` to resolve agents to existing UUIDs if possible. If no match, create a new agent.\n        8. **Prefixed snake_case**: Agent uuids should be prefixed ('agent_') then use snake_case (never hyphens) to label the agent (example: 'agent_mary_jane_watson'). Avoid ampersands and apostophes in uuids. Ensure uuid is correct and appropriately chosen, based on correctly-spelled name (e.g. 'agent_leo_mcgarry')\n        9. **ASCII-only**: Avoid using non-ASCII characters in entity names (especially for affiliated_org). Normalize or transliterate names to a standard character set.\n\n        [EXAMPLE]\n        {\n        \"uuid\": \"agent_nigel_smith\",\n        \"agent_id\": \"nigel_smith\",\n        \"name\": \"Nigel Smith\",\n        \"title\": \"Creative Influencer\",\n        \"aliases\": [\n            \"Smitty\",\n            \"Digital Prophet\"\n        ],\n        \"description\": \"Nigel Smith is a failed musician turned creative entrepreneur who has embraced an unconventional approach to the corporate world. He is characterized by his exuberance and ability to charm others, often leveraging buzzwords and absurd concepts to elevate his status within the corporate environment.\",\n        \"traits\": [\n            \"Creative\",\n            \"Unconventional\",\n            \"Charismatic\",\n            \"Charming\"\n        ],\n        \"affiliated_org\": \"org_digital_prophets\",\n        \"sphere_of_influence\": \"Corporate Innovation\"\n        },\n        [/EXAMPLE]\n\n        **Story Context (use for background context when processing provided scene)**:\n        {{ story_synopsis }}\n\n        {{ _.role('user') }}\n        *Known organization UUIDs so far**:\n        {% for org in organizations %}\n        - {{ org.name }} ({{ org.uuid }})\n        {% endfor %}\n\n        **Existing Agents (Name to UUID Mapping)**:\n        {% for name in agent_name_to_uuid_mapping %}{{ name }}: {{ agent_name_to_uuid_mapping[name] }}\n        {% endfor %}\n\n        **Scene to Analyze**:\n        Scene number {{ scene_number }}\n        {{ scene_text }}\n        <end of scene>\n\n        {{ ctx.output_format }}\n        \"#\n    }\n\nfunction ExtractObjects(scene_text: string, story_synopsis: string?, scene_number: int, agents: Agent[]) -> Object[] {\n    client GemkuA\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**: Extract details of noteworthy objects in the scene.\n\n        **Instructions**:\n        1. **Relevance**: Extract objects relevant to the story or explicitly mentioned.\n        2. **Never People**: Do *not* categorize people as objects. Groups of people are 'organizations'.\n        3. **Never locations**: If a scene is set within here, it's always a location (not an object).\n        4. **Prevent duplicates**: For extremely common objects (books, laptops, guns etc.) where several appear in the story, AVOID very generic uuids (e.g. 'object_book', 'object_gun')\n        5. **Description**: Provide a concise description of each object.\n        6. **Original Owner**: Select the UUID of the original owner from the provided `agents` or `organizations` list. If the object has no original owner, leave the field null.\n        7. **ASCII-only**: Avoid using non-ASCII characters in entity names (especially for affiliated_org). Normalize or transliterate names to a standard character set.\n        8. **Prefixed snake_case**: Object uuids should be prefixed ('object_') then use snake_case (never hyphens) to label the object (example: 'object_quantum_state_analyser', 'object_cd_rom', 'object_merry_go_round', 'object_long-range_sensor_array'). Avoid ampersands and apostophes in uuids.\n\n        [EXAMPLE]\n        {\n        \"uuid\": \"object_sams_laptop\",\n        \"name\": \"Sam's Laptop\",\n        \"description\": \"A portable computer that Sam Seaborn uses to draft presidential addresses, featuring an illuminated screen displaying two documents.\",\n        \"purpose\": \"To draft presidential addresses regarding the current situation involving aid workers.\",\n        \"significance\": \"Symbolizes the pressure and urgency faced by staff in crisis situations, as well as the need for careful communication in political narratives.\",\n        \"original_owner\": \"agent_sam_seaborn\",\n        },\n        [/EXAMPLE]\n\n        **Story Context (use for background context when processing provided scene)**:\n        {{ story_synopsis }}\n\n        {{ _.role('user') }}\n        *Known Agents (use to populate 'Original Owner' where appropriate)**:\n        {% for agent in agents %}\n        - {{ agent.name }} ({{ agent.uuid }}): affiliated_org = {{ agent.affiliated_org or 'None' }}\n        {% endfor %}\n\n        **Scene to Analyze**:\n        Scene number {{ scene_number }}\n        {{ scene_text }}\n        <end of scene>\n\n        {{ ctx.output_format }}\n    \"#\n}\nfunction ExtractAgentParticipations(scene_text: string, registry_context: string?, story_synopsis: string?, event: Event, scene_number: int) -> AgentParticipation[] {\n  client GemkuB\n  prompt #\"\n    {{ Narrative_analyst_persona ()}}\n\n    **Objective**:\n    Use your dramatic analysis to provide a comprehensive picture of agents' participation in an event, including insight into their state of mind.\n\n    **Instructions**:\n    1. **Analyze Scene and Event**: Determine which agents participate in the event *within the current scene {{ scene_number }}*.\n    2. **AgentParticipation**: For each participation:\n       - `agent`: Select the UUID from the provided `agents` list. Do *NOT* invent new agent UUIDs. *NEVER* rename entity uuids or you will break the connection.\n       -  `event`: Use the existing UUID of the provided 'event'\n       -  Fill out all other relevant properties\n       - ONLY 'agent_' entities from the entity list provided can have a agent participation. Do *NOT* use 'org_' version or other other entity types.\n    3. **UUID**: This will be assigned in post-processing.\n\n    [EXAMPLE]\n    {\n    \"uuid\": \"participation_agent_jean_luc_picard-event_1_4\",\n    \"agent\": \"agent_jean_luc_picard\",\n    \"event\": \"event_1_4\",\n    \"current_status\": \"Commanding Ensign Taur to set course for investigation.\",\n    \"emotional_state\": \"Confident and resolute.\",\n    \"active_plans\": [\n        \"Initiate travel to Melatrite III\",\n        \"Explore the energy readings firsthand\"\n    ],\n    \"beliefs\": [\n        \"Proactive investigation will yield answers\",\n        \"The crew's safety and the mission's success are paramount\"\n    ],\n    \"goals\": [\n        \"Gather more data from Melatrite III\",\n        \"Ensure the crew is prepared for possible encounters\"\n    ]\n    },\n    [/EXAMPLE]\n\n\n    **Story Context (use for background context when processing provided scene)**:\n    {{ story_synopsis }}\n\n    **Entity Registry (base the participation only on the relevant object entity name/uuid from this list)**\n    {{ registry_context }}\n    \n    {{ _.role('user') }}\n    **Event Description**:\n    {{ event.description }}\n   \n    **Event UUID:**\n    {{event.uuid}}\n\n    **Scene to Analyze**:\n    Scene number {{ scene_number }}\n    {{ scene_text }}\n    <end of scene>\n\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction ExtractObjectInvolvements(scene_text: string, registry_context: string?, story_synopsis: string?, event: Event, scene_number: int) -> ObjectInvolvement[] {\n  client GemkuA\n  prompt #\"\n    {{ Narrative_analyst_persona ()}}\n\n    **Objective**:\n    Use your dramatic analysis to provide a comprehensive picture of objects' literal or subtextual involvement in an event, including who used it.\n\n    **Instructions**:\n    1. **Review Scene and Event**: Determine which objects are involved (directly or indirectly) *within the current scene {{ scene_number }}*.\n    2. **ObjectInvolvement**: For each object involved:\n        - `object`: Select the UUID from the provided `objects` list. Do *NOT* invent new object UUIDs. *NEVER* rename entity uuids or you will break the connection.\n        - `event`: Use the existing UUID of the provided 'event\n        - Fill out all other relevant properties.\n        - ONLY 'object_' entities can have an object involvement. Do not use other entity types.\n    3.  **UUID**: This will be assigned in post processing.\n\n    [EXAMPLE]\n    {\n    \"uuid\": \"involvement_object_varga_thorn-event_2_12\",\n    \"object\": \"object_varga_thorn\",\n    \"event\": \"event_2_12\",\n    \"description_of_involvement\": \"Marc Cory examines Garvey's body and discovers a Varga thorn embedded in Garvey's flesh, identifying the cause of his transformation.\",\n    \"object_status_before_event\": \"The Varga thorn was embedded in Jeff Garvey's flesh, unnoticed.\",\n    \"object_status_after_event\": \"The Varga thorn is removed from Garvey's body during the examination.\"\n     },\n     [/EXAMPLE]\n\n    **Story Context (use for background context when processing provided scene)**:\n    {{ story_synopsis }}\n\n    **Entity Registry (base the involvement only on the relevant object entity name/uuid from this list)**\n    {{ registry_context }}\n    \n    \n    {{ _.role('user') }}\n    **Event Description**:\n    {{ event.description }}\n    **Event UUID:**\n    {{event.uuid}}\n\n    **Scene to Analyze**:\n    Scene number {{ scene_number }}\n    {{ scene_text }}\n    <end of scene>\n\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction ExtractLocations(scene_text: string, story_synopsis: string?, scene_number: int) -> Location[] {\n   client GemkuB\n   prompt #\"\n       {{ Narrative_analyst_persona ()}}\n\n       **Objective**: Detail the principal location and other significant places.\n\n       **Instructions**:\n        1. **References**: Look for places (rooms, cities, planets, etc.) in dialogue and stage directions. If a scene is set here, it's always a location (not an object).\n        2. **Specificity**: Prioritize specific rooms within larger buildings (e.g., \"Situation Room\" within the \"White House\").\n        3. **Location vs. Object**: If an entity could be both, treat it as a location if it's a defined space where actions occur.\n        4. **Description**: Provide a brief description if present.\n        5. **ASCII-only**: Avoid using non-ASCII characters in entity names (especially for affiliated_org). Normalize or transliterate names to a standard character set.\n        6. **Prefixed snake_case**: Location uuids should be prefixed ('location_') then use snake_case (never hyphens) to label the location (example: 'location_kosovo_serbia_border_region'). Avoid ampersands and apostophes in uuids.\n\n\n        [EXAMPLE]\n        {\n        \"name\": \"Steam Pipe Trunk Distribution Venue\",\n        \"type\": \"Office\",\n        \"description\": \"A windowless office space occupied by staff members amidst an atmosphere of tension and urgency. It contains remnants of intense work, such as crumpled papers and empty coffee cups, reflecting the pressure of the situation. The space serves as a backdrop for significant discussions and emotional exchanges related to the ongoing crises.\",\n        \"uuid\": \"location_steam_pipe_trunk_distribution_venue\"\n        },\n        [/EXAMPLE]\n\n        **Story Context (use for background context when processing provided scene)**:\n        {{ story_synopsis }}\n\n       {{ _.role('user') }}\n       **Scene to Analyze**:\n       Scene number {{ scene_number }}\n       {{ scene_text }}\n        <end of scene>\n\n       {{ ctx.output_format }}\n   \"#\n}\n\nfunction ExtractOrganizations(\n    scene_number: int,\n    scene_text: string,\n    story_synopsis: string?,\n    agents: Agent[],\n    organizations: Organization[]\n) -> Organization[] {\n    client GemkuA\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**: Extract and fill out comprehensive details of real or fictional organizations represented in the scene, referenced by characters, or named as an agent's 'affiliated_org'\n\n        **Instructions**:\n        1. **Definition**: An organization is a group or institution (e.g., military unit, government body) or a less formal grouping (e.g., \"protesters\").\n        2. **Description**: Provide a brief description of the organization's role.\n        3. **Members**: List organization 'members' using *valid UUIDs ONLY from the provided `agents` list*. Do *NOT* create new agent UUIDs.\n        4. **Existing Organizations**: If an agent's `affiliated_org` refers to a known organization (in `organizations`), ensure the agent's UUID is in the organization's `members` list.\n        5. **ASCII-only**: Avoid using non-ASCII characters in entity names (especially for affiliated_org). Normalize or transliterate names to a standard character set.\n        6. **Prefixed snake_case**: Organization uuids should be prefixed ('org_') then use snake_case (never hyphens) to label the organization (example: 'org_umbrella_academy', 'org_daimler_benz'). Avoid ampersands and apostophes in uuids.\n\n        [EXAMPLE]\n\n            \"org_national_security_council\": {\n                \"uuid\": \"org_national_security_council\",\n                \"name\": \"National Security Council\",\n                \"description\": \"Advises the President on national security and foreign policy matters.\",\n                \"sphere_of_influence\": \"United States government and its foreign relations.\",\n                \"members\": [\n                    \"agent_nancy_mcnally\"\n                ]\n            },\n        [/EXAMPLE]\n\n        It's also fine for organizations that are referenced in passing to have no agent members, for example:\n\n            \"org_serbian_paramilitary_group\": {\n                \"uuid\": \"org_serbian_paramilitary_group\",\n                \"name\": \"Serbian Paramilitary Group\",\n                \"description\": \"A paramilitary organization claiming responsibility for the attack on USAID workers.\",\n                \"sphere_of_influence\": \"Serbia and areas affected by its armed groups.\",\n                \"members\": []\n            },\n\n        **Story Context (use for background context when processing provided scene)**:\n        {{ story_synopsis }}\n       \n        {{ _.role('user') }}\n        **Known Agents (if any)**:\n        {% for agent in agents %}\n        - {{ agent.name }} ({{ agent.uuid }}): affiliated_org = {{ agent.affiliated_org or 'None' }}\n        {% endfor %}\n\n        **Known Organizations (if any)**:\n        {% for org in organizations %}\n        - {{ org.name }} ({{ org.uuid }})\n        {% endfor %}\n\n        **Scene to Analyze**:\n        Scene number {{ scene_number }}\n        {{ scene_text }}\n        <end of scene>\n\n        {{ ctx.output_format }}\n    \"#\n}\n\n// Entity Resolution Stage\n\nclass ResolvedAgent {\n    uuid string @description(\"Unique identifier for the agent in snake_case, derived from their name excluding title, honorific or rank, in the format 'agent_{agent_id}', for example 'agent_josiah_bartlet', 'agent_jean_luc_picard', 'agent_she_ra' Special exceptions for cases where the character's name *is* a title, such as 'agent_darth_vader'\")\n    agent_id string @description(\"Unique identifier derived from the agent's name in snake_case\")\n    name string @description(\"Full canonical name (including surname) of the dramatic agent (character) if you know it.\")\n    title string? @description(\"Official or informal role, title, or designation held by the agent within the narrative (e.g., 'Doctor', 'UNIT Commander', 'President of the United States', 'Lieutenant Commander').\")\n    aliases string[]? @description(\"Alternative names or titles used to refer to the agent.\")\n    description string @description(\"Comprehensive general (not scene-specific) character profile based on all known information in the story so far. This is an evergreen description but you'll keep adding to and revising it as the story progresses.\")\n    traits string[] @description(\"List of defining qualities and characteristics that describe the agent's personality, behavior, or abilities (e.g., 'Brave', 'Time Lord', 'Resourceful').\")\n    affiliated_org string|null @description(\"The organization the agent appears to be officially associated with. Expressed as a unique identifier in snake_case, in the format 'org_{org_id}' - e.g., 'org_department_of_justice', 'org_time_lords', 'org_galactic_empire', 'org_library_of_congress'.\") @alias(\"affiliated_org_uuid\")\n    sphere_of_influence string? @description(\"Primary domain, area, or field where the agent exerts their power or influence (e.g., 'Time Travel', 'Military Strategy').\")\n    source_uuids string[]? @description(\"List of UUIDs of the original entities that were merged into this resolved entity.\")\n}\n\nclass ResolvedOrganization {\n    uuid string @description(\"Unique identifier for the organization in snake_case, in the format 'org_<normalised_name>', for example 'org_time_lords', 'org_galactic_empire', 'org_united_federation_of_planets'\")\n    name string @description(\"Name of the organization.\")\n    description string @description(\"Description of the organization's purpose and role.\")\n    sphere_of_influence string @description(\"Area where the organization has influence.\")\n    members string[]|null @description(\"List of UUIDs of agents who are members of this organization.\")\n    source_uuids string[]? @description(\"List of UUIDs of the original entities that were merged into this resolved entity.\")\n}\n\nclass ResolvedObject {\n    uuid string @description(\"Unique identifier for the object, following the format 'object_<normalized_name>'. Example: 'object_lcd_screens'.\")\n    name string @description(\"The official name of the object. Example: 'LCD Screens'.\")\n    description string @description(\"A detailed description of the object's nature, physical attributes, and role within the narrative.\")\n    purpose string @description(\"The intended use or function of the object within the context of the narrative. Example: 'To visualize satellite imagery for briefings'.\")\n    significance string @description(\"The narrative importance or symbolic meaning of the object. Example: 'Provides visual context for the Kosovo-Serbia situation'.\")\n    original_owner string|null @description(\"The UUID of the agent who originally owns the object, following the format 'agent_<agent_id>'. Example: 'agent_josh_lyman'. If no owner, set to null.\")\n    source_uuids string[]? @description(\"List of UUIDs of the original entities that were merged into this resolved entity.\")\n}\n\nclass ResolvedLocation {\n    uuid string @description(\"Unique identifier for the location in snake_case, in the format 'location_{name}', for example 'location_mos_eisley' or 'location_hogwarts_castle'\")\n    name string @description(\"Name of the location.\")\n    description string @description(\"Detailed description of the location's characteristics.\")\n    type string @description(\"Type of location (e.g., City, Building, Planet, Office, Apartment).\")\n    source_uuids string[]? @description(\"List of UUIDs of the original entities that were merged into this resolved entity.\")\n}\n\nfunction ResolveAgentCluster(entities: Agent[]) -> ResolvedAgent[] {\n    client CustomGemini25\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**:\n        Disambiguate and resolve a list of Agent entities, identifying all unique agents present. Return the unique agents that account for all provided mentions.\n\n        **Instructions**:\n        1. **Consider Disambiguation First**: Prioritize *correctly distinguishing* unique agents before attempting to merge. Base your reasoning on all available data in the source entities, particularly name, description, and traits.\n        2. **Unique Agent Identification**: Carefully assess each agent entity, taking into account their name, description, traits, and aliases. Only merge entities if there is *overwhelming evidence* they refer to the *exact same* individual. Avoid merging entities if there's even a slight chance they could be distinct characters.  Minor speaking characters may be identified only by number in the script ('Dalek 1', 'Soldier 2' etc.) Be careful to treat them as distinct.\n        3. **Fact Preservation**: Ensure that for each unique agent, you do *not* make the names too similar, remove their title, or otherwise make errors that remove their identifying qualities.\n        4. **Name Canonization**: Choose the most complete name as canonical, preferring names with surnames where available and ensuring consistency across the entire entity record. Be careful to avoid normalising to common terms\n        5. **Contextual Awareness**: Use the description and traits to disambiguate entities. If two entities have significantly different descriptions or traits, they are likely different individuals, even if they share a similar name or alias.\n        6. **Alias Handling**: Recognize that aliases may be shared between different characters, especially informal nicknames, which on their own are not enough evidence for merging. Treat all aliases as indicators or potential links, *not* as definitive proof.\n        7. **Description & Trait Preservation**:\n            - Merge descriptions into a single, cohesive, non-redundant description.\n            -  Ensure that traits of each source entity is carried over to the consolidated description.\n            - Correct spelling or factual errors that may have crept in to source entities\n            - Combine traits without duplication.\n            -  Do not overwrite existing data, ensure that data is carried through where accurate to do so.\n        8. **Affiliation and Influence:** If an affiliated_org is mentioned, choose the most relevant one. If multiple sphere_of_influence values appear, pick the most representative one.\n        9. **Source UUID Tracking**: Track UUIDs of original entities that were merged into this resolved entity. List them inside the `source_uuids` field.\n        10. **Negative Constraint**: If two entities have distinct and mutually exclusive biographies or traits, they must not be merged, even if they share a name or role.\n        11. **Default to Splitting:** If in doubt, default to preserving two entities as distinct. Only merge entities if you are absolutely certain they are the same.\n        \n        {{ _.role('user') }}\n        Agents to consider for resolution:\n        {{ entities }}\n\n        *You MUST return ALL requested items in a single response.*\n\n        ______\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ResolveOrganizationCluster(entities: Organization[]) -> ResolvedOrganization[] {\n    client CustomGemini25\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**:\n        Disambiguate and resolve a list of Organization entities, identifying all unique organizations present. Return the unique organizations that account for all provided mentions.\n\n        **Instructions**:\n        1. **Consider Disambiguation First**: Prioritize *correctly distinguishing* unique organizations before attempting to merge. Base your reasoning on all available data in the source entities, particularly name, description, and sphere of influence.\n        2. **Unique Organization Identification**: Carefully assess each organization entity, taking into account their name, description, sphere of influence, and members. Only merge entities if there is *overwhelming evidence* they refer to the *exact same* group or institution. Avoid merging entities if there's even a slight chance they could be distinct organizations.\n        3. **Fact Preservation**: Ensure that for each unique organization, you do *not* make the names too similar, remove their title, or otherwise make errors that remove their identifying qualities.\n        4. **Name Canonization**: Choose the most complete and descriptive name as canonical, ensuring consistency across the entire entity record. Be careful to avoid normalising to common terms\n        5. **Contextual Awareness**: Use the description and sphere of influence to disambiguate entities. If two entities have significantly different descriptions or spheres of influence, they are likely different organizations, even if they share a similar name or alias.\n        6. **Member List Handling**: Recognize that the member list are important to determine if the organization should be kept as unique, base your descision on whether it is mentioned as a member of this group. Treat all members as indicators or potential links, *not* as definitive proof.\n        7. **Description & Sphere of Influence Preservation**:\n            - Merge descriptions into a single, cohesive, non-redundant description.\n            - Ensure that traits of each source entity is carried over to the consolidated description.\n            - Correct spelling or factual errors that may have crept in to source entities\n        8. **Membership Prioritization**: Use membership lists to differentiate organizations. Do not merge organizations with significantly different membership rosters.\n        9. **Default to Splitting:** If in doubt, default to preserving two entities as distinct. Only merge entities if you are absolutely certain they are the same.\n        10. **Source UUID Tracking**: Track UUIDs of original entities that were merged into this resolved entity. List them inside the `source_uuids` field.\n       \n        {{ _.role('user') }}\n        Organizations to consider for resolution:\n        {{ entities }}\n\n        *You MUST return ALL requested items in a single response.*\n\n        ______\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ResolveLocationCluster(entities: Location[]) -> ResolvedLocation[] {\n    client CustomGemini25\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**:\n        Disambiguate and resolve a list of Location entities, identifying all unique locations present. Return the unique locations that account for all provided mentions.\n\n        **Instructions**:\n        1. **Consider Disambiguation First**: Prioritize *correctly distinguishing* unique locations before attempting to merge. Base your reasoning on all available data in the source entities, particularly name, description, and type.\n        2. **Unique Location Identification**: Carefully assess each location entity, taking into account their name, description, and type. Only merge entities if there is *overwhelming evidence* they refer to the *exact same* place. Avoid merging entities if there's even a slight chance they could be distinct locations.\n        3. **Be Specific**: Only merge locations with highly general names if the descriptions also align. For example, do not merge \"a forest\" and \"the forest outside town\", nor individual rooms within a bigger space if they are distinct in the scene structure.\n        4. **Fact Preservation**: Ensure that for each unique location, you do *not* make the names too similar, remove their title, or otherwise make errors that remove their identifying qualities.\n        4. **Name Canonization**: Choose the most specific and descriptive name as canonical (e.g., \"White House Situation Room\" is preferred over \"White House\"), ensuring consistency across the entire entity record. Be careful to avoid normalising to common terms.\n        5. **Contextual Awareness**: Use the description and type to disambiguate entities. If two entities have significantly different descriptions or types, they are likely different locations.\n        6. **Type Preservation**: Ensure that merged locations maintain the most specific and accurate location type. Prefer more specific types (e.g., \"Office\") over more general types (e.g., \"Building\").\n        7. **Description Preservation**:\n            - Merge descriptions into a single, cohesive, non-redundant description.\n            - Correct spelling or factual errors that may have crept in to source entities\n        8. **Default to Splitting:** If in doubt, default to preserving two entities as distinct. Only merge entities if you are absolutely certain they are the same.\n        9. **Source UUID Tracking**: Track UUIDs of original entities that were merged into this resolved entity. List them inside the `source_uuids` field.\n        \n        {{ _.role('user') }}\n        Locations to consider for resolution:\n        {{ entities }}\n\n        *You MUST return ALL requested items in a single response.*\n\n        ______\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ResolveCrossEpisodeAgentCluster(entities: Agent[]) -> ResolvedAgent[] {\n    client CustomGemini25\n    prompt #\"\n        {{ Narrative_analyst_persona() }}\n\n        **Objective**:\n        Disambiguate and resolve a list of primary entities\n        extracted from multiple episodes of I, Claudius. Your task is to identify unique entities \n        and merge repeated captures into a single, consolidated representation.\n\n        **Instructions**:\n        1. **Disambiguation First**: Analyze each entity’s properties—especially name, description, aliases, and any other contextual metadata—to determine if they refer to the same underlying entity.\n        2. **Merging with Caution**: Only merge entities if there is overwhelming evidence they represent the exact same character, location, or object. If any doubt exists, preserve them as distinct.\n        3. **Canonical Naming**: Select the most complete and contextually accurate name as the canonical value. Normalize names and UUIDs to a standard format (e.g. snake_case with proper prefixes such as 'agent_', 'location_', etc.).\n        4. **Description Synthesis**: Merge descriptions into a cohesive narrative that preserves key details from all captures while eliminating redundancy.\n        5. **Source Tracking**: Include a field `source_uuids` that lists all original UUIDs that were merged into this resolved entity.\n        6. **Contextual Awareness**: Use knowledge of the Claudius narrative (including character evolution, historical aliases, and scene-specific details) to guide your resolution.\n        7. **Output Format**: Return a JSON array of resolved entities. Each resolved entity should include at least:\n            - a new consolidated `uuid`\n            - a canonical `name`\n            - a merged `description`\n            - a `source_uuids` field listing the original UUIDs\n\n        {{ _.role('user') }}\n        Primary entities provided for resolution:\n        {{ entities }}\n\n        *Return all resolved entities as a single JSON array.*\n\n\n        ______\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ResolveCrossEpisodeObjectCluster(entities: Object[]) -> ResolvedObject[] {\n    client CustomGemini25\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**:\n        Disambiguate and resolve a list of primary entities\n        extracted from multiple episodes of I, Claudius. Your task is to identify unique entities \n        and merge repeated captures into a single, consolidated representation.\n\n        **Instructions**:\n        1. **Disambiguation First**: Analyze each entity’s properties—especially name, description, aliases, and any other contextual metadata—to determine if they refer to the same underlying entity.\n        2. **Merging with Caution**: Only merge entities if there is overwhelming evidence they represent the exact same character, location, or object. If any doubt exists, preserve them as distinct.\n        3. **Canonical Naming**: Select the most complete and contextually accurate name as the canonical value. Normalize names and UUIDs to a standard format (e.g. snake_case with proper prefixes such as 'agent_', 'location_', etc.).\n        4. **Description Synthesis**: Merge descriptions into a cohesive narrative that preserves key details from all captures while eliminating redundancy.\n        5. **Source Tracking**: Include a field `source_uuids` that lists all original UUIDs that were merged into this resolved entity.\n        6. **Contextual Awareness**: Use knowledge of the Claudius narrative (including character evolution, historical aliases, and scene-specific details) to guide your resolution.\n        7. **Output Format**: Return a JSON array of resolved entities. Each resolved entity should include at least:\n            - a new consolidated `uuid`\n            - a canonical `name`\n            - a merged `description`\n            - a `source_uuids` field listing the original UUIDs\n\n        {{ _.role('user') }}\n        Primary entities provided for resolution:\n        {{ entities }}\n\n        ______\n        {{ ctx.output_format }}\n    \"#\n}\n\n\nfunction ResolveCrossEpisodeOrganizationCluster(entities: Organization[]) -> ResolvedOrganization[] {\n    client CustomGemini25\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**:\n        Disambiguate and resolve a list of primary entities\n        extracted from multiple episodes of I, Claudius. Your task is to identify unique entities \n        and merge repeated captures into a single, consolidated representation.\n\n        **Instructions**:\n        1. **Disambiguation First**: Analyze each entity’s properties—especially name, description, aliases, and any other contextual metadata—to determine if they refer to the same underlying entity.\n        2. **Merging with Caution**: Only merge entities if there is overwhelming evidence they represent the exact same character, location, or object. If any doubt exists, preserve them as distinct.\n        3. **Canonical Naming**: Select the most complete and contextually accurate name as the canonical value. Normalize names and UUIDs to a standard format (e.g. snake_case with proper prefixes such as 'agent_', 'location_', etc.).\n        4. **Description Synthesis**: Merge descriptions into a cohesive narrative that preserves key details from all captures while eliminating redundancy.\n        5. **Source Tracking**: Include a field `source_uuids` that lists all original UUIDs that were merged into this resolved entity.\n        6. **Contextual Awareness**: Use knowledge of the Claudius narrative (including character evolution, historical aliases, and scene-specific details) to guide your resolution.\n        7. **Output Format**: Return a JSON array of resolved entities. Each resolved entity should include at least:\n            - a new consolidated `uuid`\n            - a canonical `name`\n            - a merged `description`\n            - a `source_uuids` field listing the original UUIDs\n\n        {{ _.role('user') }}\n        Primary entities provided for resolution:\n        {{ entities }}\n\n        ______\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ResolveCrossEpisodeLocationCluster(entities: Location[]) -> ResolvedLocation[] {\n    client CustomGemini25\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**:\n        Disambiguate and resolve a list of primary entities\n        extracted from multiple episodes of I, Claudius. Your task is to identify unique entities \n        and merge repeated captures into a single, consolidated representation.\n\n        **Instructions**:\n        1. **Disambiguation First**: Analyze each entity’s properties—especially name, description, aliases, and any other contextual metadata—to determine if they refer to the same underlying entity.\n        2. **Merging with Caution**: Only merge entities if there is overwhelming evidence they represent the exact same character, location, or object. If any doubt exists, preserve them as distinct.\n        3. **Canonical Naming**: Select the most complete and contextually accurate name as the canonical value. Normalize names and UUIDs to a standard format (e.g. snake_case with proper prefixes such as 'agent_', 'location_', etc.).\n        4. **Description Synthesis**: Merge descriptions into a cohesive narrative that preserves key details from all captures while eliminating redundancy.\n        5. **Source Tracking**: Include a field `source_uuids` that lists all original UUIDs that were merged into this resolved entity.\n        6. **Contextual Awareness**: Use knowledge of the Claudius narrative (including character evolution, historical aliases, and scene-specific details) to guide your resolution.\n        7. **Output Format**: Return a JSON array of resolved entities. Each resolved entity should include at least:\n            - a new consolidated `uuid`\n            - a canonical `name`\n            - a merged `description`\n            - a `source_uuids` field listing the original UUIDs\n\n        {{ _.role('user') }}\n        Primary entities provided for resolution:\n        {{ entities }}\n\n        ______\n        {{ ctx.output_format }}\n    \"#\n}",
    "myth_combo.baml": "generator mythcombo_generator {\n output_type \"python/pydantic\"\n output_dir \"../\" // Adjust path as needed\n version \"0.83.0\" // Use your current BAML version\n default_client_mode \"sync\"\n}\n\n// Enhanced narrative analyst template with chain-of-thought prompting\ntemplate_string Narrative_analyst_cot #\"\n  {{ _.role('system') }}\nYou are a world-class script editor, dramaturg, and narrative analyst, specializing in the structured dissection of drama scripts according to a well-defined ontology. You possess the instincts of a seasoned screenwriter, understanding the importance of pacing, rhythm, and impactful story beats.\n\nYour Expertise & Approach:\n✅ Narrative Mastery: You possess an encyclopedic knowledge of story structure, character development, thematic elements, and genre conventions, allowing you to conduct insightful, contextually accurate analyses. You are particularly attuned to identifying key turning points, moments of high tension, and scenes that significantly advance the plot.\n✅ Story Beat Identification: You have a keen ability to recognize and isolate the essential story beats within a scene; the pivotal moments that drive character arcs, reveal crucial information, or alter the course of events. You understand that effective storytelling relies on carefully selected and impactful beats, not every minor action.\n✅ Pacing and Rhythm Awareness: You are sensitive to the pacing and rhythm of a scene. You consider how events contribute to the overall flow and build towards a climax, avoiding unnecessary details that disrupt the narrative's momentum.\n✅ Ontology-Driven Extraction: You meticulously extract entities, relationships, and narrative structures while strictly adhering to specified ontology rules and UUID formatting.\n✅ Fandom-Level Detail & Context Awareness: Your understanding of television shows, serialized storytelling, and worldbuilding extends beyond surface-level knowledge, enabling you to detect continuity, subtext, and intertextual references with precision.\n✅ Nuanced Language Interpretation: You excel at recognizing subtle shifts in tone, implicit information, and ambiguous references, ensuring they are correctly inferred but never misinterpreted outside the provided context.\n✅ Error Detection & Consistency: You diligently identify, flag, and resolve inconsistencies in extracted data, ensuring alignment with both internal narrative logic and established metadata constraints.\n✅ Justified Reasoning in Underspecified Cases: When encountering ambiguous or underspecified content, you apply reasoned, evidence-based assumptions grounded in narrative conventions—always ensuring transparency in your decision-making process.\n✅ Clarity, Precision, & Structure: Your responses are well-structured, concise, and explicitly aligned with provided guidelines, ensuring high-quality, repeatable analysis across scripts.\n✅ Intuition: The information you're given may sometimes seem inconsistent or even incorrect. But you're such an expert fan of the characters and situations in the show you're analysing that you're able to correct mistakes and 'fill in the blanks' from your own knowledge.\n\nYour Commitment:\nYou are dedicated to delivering comprehensive, structured, and reliable narrative extractions, ensuring a rigorous yet adaptable approach to analyzing explicit and implicit storytelling elements with consistency and accuracy. You prioritize identifying the *most important* events that shape the narrative, capturing the essence of each scene with a focus on pacing and impact.\nYou describe story elements in your responses with a storyteller's flair. Don't mention your sources nor describe your analysis in your final draft descriptions; just write as a writer describing what's happening.\n\nALWAYS FOLLOW THIS ANALYSIS PATTERN:\n1. First, thoughtfully analyze what you're extracting, considering multiple perspectives\n2. Outline your analysis in detail, noting your reasoning\n3. Only after careful analysis, provide structured output\n\"#\n\n// Primary Entities Container Class\nclass PrimaryEntities {\n    agents Agent[]\n    organizations Organization[]\n    locations Location[]\n    objects Object[]\n}\n\n// Combined Extraction Function with enhanced signature\nfunction ExtractPrimaryEntities(\n    scene_text: string, \n    story_synopsis: string?, \n    scene_number: int,\n    agent_name_to_uuid_mapping: map<string, string>,\n    existing_organizations: Organization[],\n    existing_agents: Agent[],\n    registry_context: string?\n) -> PrimaryEntities {\n    client GemkuA\n    prompt #\"\n        {{ Narrative_analyst_cot() }}\n\n        **Objective**: Extract all primary entity types from the scene in a single comprehensive analysis.\n\n        **Instructions**:\n        You will extract four types of primary entities from the scene through a two-phase process:\n        1. First, analyze the scene to identify candidates for each entity type\n        2. Then, perform detailed extraction for each identified entity\n\n        **For LOCATIONS**:\n        * Identify all distinct spaces where action occurs - from specific rooms to general areas\n        * Provide rich descriptions (minimum 50 words) capturing the atmosphere and physical details\n        * For each location, consider:\n          - Its physical characteristics and boundaries\n          - Its relation to other spaces mentioned\n          - Its narrative significance in the scene\n          - Any thematic importance it might have\n        * Location UUIDs should be prefixed ('location_') then use snake_case (never hyphens)\n\n        **Additional location guidance**:\n        1. **References**: Look for places (rooms, cities, planets, etc.) in dialogue and stage directions. If a scene is set here, it's always a location (not an object).\n        2. **Specificity**: Prioritize specific rooms within larger buildings (e.g., \"Situation Room\" within the \"White House\").\n        3. **Location vs. Object**: If an entity could be both, treat it as a location if it's a defined space where actions occur.\n        4. **Description**: Provide a brief description if present.\n        5. **ASCII-only**: Avoid using non-ASCII characters in entity names (especially for affiliated_org). Normalize or transliterate names to a standard character set.\n        6. **Prefixed snake_case**: Location uuids should be prefixed ('location_') then use snake_case (never hyphens) to label the location (example: 'location_kosovo_serbia_border_region'). Avoid ampersands and apostophes in uuids.\n\n        **For ORGANIZATIONS**:\n        * Identify any formal or informal groups mentioned directly or indirectly\n        * For each organization, analyze:\n          - Its structure and purpose\n          - Its sphere of influence (what areas it controls or affects)\n          - Its relationship to other entities (especially agents)\n          - Its history and significance in the narrative context\n        * List organization members using valid agent UUIDs only\n        * Organization UUIDs should be prefixed ('org_') then use snake_case\n\n        **Additional organization guidance**:\n        1. **Definition**: An organization is a group or institution (e.g., military unit, government body) or a less formal grouping (e.g., \"protesters\").\n        2. **Description**: Provide a brief description of the organization's role.\n        3. **Members**: List organization 'members' using *valid UUIDs ONLY from the provided `agents` list*. Do *NOT* create new agent UUIDs.\n        4. **Existing Organizations**: If an agent's `affiliated_org` refers to a known organization (in `organizations`), ensure the agent's UUID is in the organization's `members` list.\n        5. **ASCII-only**: Avoid using non-ASCII characters in entity names (especially for affiliated_org). Normalize or transliterate names to a standard character set.\n        6. **Prefixed snake_case**: Organization uuids should be prefixed ('org_') then use snake_case (never hyphens) to label the organization (example: 'org_umbrella_academy', 'org_daimler_benz'). Avoid ampersands and apostophes in uuids.\n\n        **For AGENTS (Characters)**:\n        * Identify all characters who:\n          - Speak or are directly addressed\n          - Take meaningful action\n          - Are referenced in ways that impact the narrative\n        * For each agent, provide:\n          - A detailed character profile (minimum 75 words)\n          - At least 4 defining traits with clear evidence from the text\n          - Psychological insights about motivations and behaviors\n          - Analysis of relationships with other identified entities\n        * Use existing UUIDs when available, following the pattern agent_name_in_snake_case\n\n        **Additional agent guidance**:\n        1. **Identify Agents**: Find characters who speak, act, or are directly referenced. Do *not* treat collective groups (e.g., 'hostages', 'dalek patrol') as Agents.\n        2. **Full Name**: Provide hhe most complete and and descriptive name as canonical for the 'name' property.\n        3. **No Honorifics**: Do not use titles in names (e.g., 'James T. Kirk', not 'Captain Kirk'), except for cases like 'The Doctor'.\n        4. **Minor characters**: Minor speaking characters may be identified only by number in the script ('Dalek 1', 'Soldier 2' etc.) Be careful to treat them as distinct.\n        5. **Affiliated Organization**: Select the UUID from the available organizations, or leave it null if the agent is not affiliated with any known organization.  (The available organizations are reflected in the expected output schema.)\n        6. **Aliases**: Extract any alternative names used for the agent.\n        7. **UUID Mapping**: Use the `agent_name_to_uuid_mapping` to resolve agents to existing UUIDs if possible. If no match, create a new agent.\n        8. **Prefixed snake_case**: Agent uuids should be prefixed ('agent_') then use snake_case (never hyphens) to label the agent (example: 'agent_mary_jane_watson'). Avoid ampersands and apostophes in uuids. Ensure uuid is correct and appropriately chosen, based on correctly-spelled name (e.g. 'agent_leo_mcgarry')\n        9. **ASCII-only**: Avoid using non-ASCII characters in entity names (especially for affiliated_org). Normalize or transliterate names to a standard character set.\n\n        **For OBJECTS**:\n        * Identify items that:\n          - Are directly interacted with\n          - Have narrative significance\n          - Carry symbolic meaning\n          - Would be essential for visualizing the scene\n        * For each object, analyze:\n          - Its physical properties and appearance\n          - Its purpose both practical and narrative\n          - Its relationship to characters (especially ownership)\n          - Its significance to the plot or themes\n        * Object UUIDs should be prefixed ('object_') then use snake_case\n\n        **Additional object guidance**:\n        1. **Relevance**: Extract objects relevant to the story or explicitly mentioned.\n        2. **Never People**: Do *not* categorize people as objects. Groups of people are 'organizations'.\n        3. **Never locations**: If a scene is set within here, it's always a location (not an object).\n        4. **Prevent duplicates**: For extremely common objects (books, laptops, guns etc.) where several appear in the story, AVOID very generic uuids (e.g. 'object_book', 'object_gun')\n        5. **Description**: Provide a concise description of each object.\n        6. **Original Owner**: Select the UUID of the original owner from the provided `agents` or `organizations` list. If the object has no original owner, leave the field null.\n        7. **ASCII-only**: Avoid using non-ASCII characters in entity names (especially for affiliated_org). Normalize or transliterate names to a standard character set.\n        8. **Prefixed snake_case**: Object uuids should be prefixed ('object_') then use snake_case (never hyphens) to label the object (example: 'object_quantum_state_analyser', 'object_cd_rom', 'object_merry_go_round', 'object_long-range_sensor_array'). Avoid ampersands and apostophes in uuids.\n\n\n        **Critical Requirements for ALL Entities**:\n        * Provide significantly detailed descriptions (never just a few words)\n        * Ensure all UUIDs follow proper formatting conventions (snake_case, appropriate prefixes)\n        * Reference existing entities whenever possible\n        * When in doubt about an entity's presence, default to inclusivity with proper justification\n\n        Before providing your structured analysis, first outline your entity identification process:\n        - Identify key narrative elements in the scene\n        - Note any ambiguities and how you resolved them\n        - Explain your reasoning for entity categorization decisions\n        - Highlight connections between entities\n\n        **Story Context (use for background context when processing provided scene)**:\n        {{ story_synopsis }}\n\n        {{ _.role('user') }}\n        **Scene to Analyze**:\n        Scene number {{ scene_number }}\n        {{ scene_text }}\n        <end of scene>\n\n        **Existing Agents (for reference and reuse)**:\n        {% for agent in existing_agents %}\n        - {{ agent.name }} ({{ agent.uuid }}): affiliated_org = {{ agent.affiliated_org or 'None' }}\n        {% endfor %}\n\n        **Existing Organizations (for reference and reuse)**:\n        {% for org in existing_organizations %}\n        - {{ org.name }} ({{ org.uuid }})\n        {% endfor %}\n\n        **Agent Name to UUID Mapping**:\n        {% for name in agent_name_to_uuid_mapping %}{{ name }}: {{ agent_name_to_uuid_mapping[name] }}\n        {% endfor %}\n\n        **Complete Entity Registry (for context)**:\n        {{ registry_context }}\n\n        {{ ctx.output_format }}\n    \"#\n}\n\n// Combined Scene Data Container Class\nclass SceneData {\n    metadata SceneMetadata\n    events Event[]\n}\n\n// Combined Scene Metadata and Events Extraction Function\nfunction ExtractSceneData(\n    scene_text: string, \n    registry_context: string?,\n    story_synopsis: string?, \n    scene_number: int,\n    scene_uuid: string,\n    locations: Location[]\n) -> SceneData {\n    client GemkuB\n    prompt #\"\n        {{ Narrative_analyst_cot() }}\n\n        **Objective**: Conduct a deep narrative analysis to extract comprehensive scene metadata and all significant events.\n\n        **Instructions**:  \n        Your analysis will generate two structured outputs:\n        1. **Scene Metadata** A high-resolution breakdown of the scene's setting, mood, and function.  \n        2. **Events** A detailed segmentation of key narrative beats within the scene.  \n\n        ---  \n        ### **SCENE METADATA**  \n        Develop a **rich, immersive** representation of the scene by considering both explicit details and underlying narrative significance.\n\n        - **Title**: A succinct, evocative phrase that encapsulates the dramatic core and function of the scene.  \n        - **Detailed Description (minimum 100 words)**:  \n          - **Physical Setting**: Describe the scene's location with concrete sensory details—architecture, lighting, background elements, and key environmental factors.  \n          - **Emotional Atmosphere**: Convey the psychological and tonal undercurrents of the scene—does it evoke tension, intimacy, foreboding, or triumph?  \n          - **Time & Ambient Conditions**: Include references to the time of day, weather, or environmental factors if indicated.  \n          - **Narrative Significance**: Explain what role this scene plays within the larger story. Does it introduce conflict, resolve tension, establish key relationships, or reveal critical information?  \n          - **Thematic Elements**: Identify motifs, recurring symbols, or philosophical underpinnings present in this scene.  \n\n        - **Primary Location**: Select the most relevant location from the provided list.  \n        - **Scene UUID**: Maintain this identifier as pre-assigned.  \n\n        ---  \n        ### **EVENT EXTRACTION**  \n        Each event represents a **self-contained dramatic unit** that advances the story in a meaningful way.\n\n        For **each event** within the scene:  \n                - **Title**:\n            - Create a clear and descriptive title that encapsulates the essence of the event.\n        - **UUID**:\n            - Will be assigned in post-processing\n        - **Description**:\n            - Provide a detailed summary of the event, including key actions, decisions, and outcomes.\n        - **Sequence Within Scene**:\n            - Assign a numerical order to each event starting from 1.\n        - **Key Dialogue**:\n            - Extract significant lines of dialogue that are central to the event's occurrence or impact.\n            - Ensure each line is accurately attributed to the correct speaker and event.\n        - **Agent Participations**:\n            - List the UUIDs of agents participating in the event (e.g., `agent_josh_lyman`).\n        - **Object Involvements**:\n            - List the UUIDs of objects involved in the event (e.g., `object_school_tie`).\n        - **Next Event**:\n            - Assign the UUID of the subsequent event in chronological order (e.g., `event_1_2`).\n            - If there is no subsequent event, set this field to null.\n\n\n\n        - **Title**: Create a clear cand concise but impactful phrase that captures the dramatic essence of the moment.  \n        - **Detailed Description (minimum 75 words)**: \n          Consider: \n          - **What Happens?** Describe key actions, reactions, and developments in clear, specific terms.  \n          - **Why It Matters?** Explain the **narrative function**—how does this event drive the plot, develop themes, or alter character relationships?  \n          - **Character Impact**: How does this moment shift motivations, goals, or emotional states?  \n          - **Subtext & Symbolism**: Identify any underlying themes, visual metaphors, or dramatic irony.  \n          - **Emotional Progression**: Describe shifts in tension, mood, or intensity across the event.  \n\n        - **Sequence Order**: Define its chronological position within the scene, starting from 1\n        - **Agent Participations**: List the UUIDs of agents participating in the event (e.g., `agent_josh_lyman`).\n        - **Object Involvements**: List the UUIDs of objects involved in the event (e.g., `object_school_tie`).\n        - **Key Dialogue**: Extract and properly attribute crucial lines that define the event's meaning.  \n\n        ---  \n        ### **Pre-Processing Narrative Analysis Steps**  \n        Before structuring your output, ensure you fully analyze the scene by:  \n        1. **Identifying the scene's central dramatic tension or conflict**—what question or issue is being addressed?  \n        2. **Mapping the emotional and narrative arc**—where does intensity rise or fall?  \n        3. **Noting character objectives and obstacles**—what is each participant striving for, and what stands in their way?  \n        4. **Detecting pivotal moments**—decisions, revelations, or turning points that reshape the narrative.  \n        5. **Connecting to broader story threads**—how does this scene contribute to overarching themes or character arcs?  \n\n        ---  \n        ### **Critical Requirements**  \n        - **Precision & Specificity**: Avoid vague descriptions—each detail should add clarity and depth.  \n        - **Chronological Coherence**: Events must be structured logically in the order they occur.  \n        - **Rich Narrative Language**: Use immersive descriptions that allow someone unfamiliar with the material to visualize the scene.  \n        - **Structural Integrity**: Scene metadata should focus on setting and atmosphere, while events should focus on discrete narrative shifts.  \n        - **UUID Consistency**: Ensure all identifiers (scene, event, agent, object) exactly match those provided.  \n\n        ---  \n        ### **Contextual Inputs**  \n\n        **Story Background**:  \n        {{ story_synopsis }}\n\n        **Scene Details**:  \n        Scene Number: {{ scene_number }}  \n        Scene UUID: {{ scene_uuid }}  \n        {{ scene_text }}  \n        `<end of scene>`  \n\n        **Available Locations**:  \n        {% for loc in locations %}  \n        - {{ loc.name }} ({{ loc.uuid }})  \n        {% endfor %}  \n\n        **Entity Registry**:  \n        {{ registry_context }}  \n\n        ---  \n        **Output Format**  \n\n        {{ ctx.output_format }}  \n    \"#\n}\n\n\n// Combined Event Interactions Container Class\nclass EventInteractions {\n    agent_participations AgentParticipation[]\n    object_involvements ObjectInvolvement[]\n}\n\n// Combined Agent Participations and Object Involvements Extraction Function\nfunction ExtractEventInteractions(\n    scene_text: string, \n    registry_context: string?,\n    story_synopsis: string?, \n    event: Event,\n    scene_number: int\n) -> EventInteractions {\n    client GemkuA\n    prompt #\"\n        {{ Narrative_analyst_cot() }}\n\n        **Objective**: Conduct a deep analysis of agent and object interactions within a single event, ensuring psychological and narrative consistency.\n\n        **Instructions**:  \n        Your task is to analyze how the pre-identified **agents and objects** participate in this event, providing nuanced insights into their roles, intentions, and transformations.\n\n        ---  \n        ### **AGENT PARTICIPATIONS**  \n        For **each agent explicitly identified in this event**, provide a **rich, character-driven analysis** that captures their physical, psychological, and strategic engagement.\n\n        - **Current Status**:  \n          - A **detailed** (minimum 30 words) account of the agent's **physical presence, positioning, and actions** within the event.  \n          - Describe **posture, movements, and any significant gestures** contributing to the scene.  \n\n        - **Emotional State**:  \n          - A **layered psychological assessment** (minimum 40 words), covering:  \n            - **Surface emotions**: How does the agent outwardly express their feelings? Consider tone, facial expressions, or physical cues.  \n            - **Internal state**: What emotions are present beneath the surface? Any tension between internal feelings and external behavior?  \n            - **Unspoken conflicts or motivations**: If applicable, identify emotional contradictions or concealed intentions.  \n\n        - **Active Plans**:  \n          - List **at least 3 strategic objectives** the agent is pursuing during this event. These should range from **immediate actions** to **broader character-driven intentions**.  \n\n        - **Beliefs**:  \n          - Identify **at least 3 core convictions** that shape the agent's behavior and decision-making in this event.  \n\n        - **Goals**:  \n          - Define **at least 3 concrete desires**, breaking them down into **short-term**, **medium-term**, and **ultimate** objectives.  \n\n        > **Important**:  \n        > - **DO NOT infer participation for agents not explicitly listed.**  \n        > - **Ensure every agent's participation aligns perfectly with the event description.**  \n        > - **Retain precise UUIDs—no modifications.**  \n\n        ---  \n        ### **OBJECT INVOLVEMENTS**  \n        For **each object explicitly involved in this event**, provide a **functional, narrative-driven** breakdown of its role.\n\n        - **Involvement Description**:  \n          - Explain **exactly how the object is used, referenced, or influences the event** (minimum 50 words).  \n          - Describe its **interaction with agents, the environment, or the unfolding action.**  \n\n        - **Status Before**:  \n          - Clearly define the object's **state prior to the event**, including its condition, location, or ownership.  \n\n        - **Status After**:  \n          - Detail how the object's **condition, location, or relevance** has shifted as a result of the event.  \n\n        > **Important**:  \n        > - **DO NOT introduce new objects beyond those explicitly listed.**  \n        > - **Ensure precise UUID matching—NO modifications.**  \n        > - **Connect object involvement meaningfully to the event's narrative arc.**  \n\n        ---  \n        ### **CRITICAL REQUIREMENTS**  \n        - **Maintain Absolute Consistency**: All details must align with the provided event description and scene context.  \n        - **Prioritize Depth & Subtext**: Avoid superficial summaries—dig into implicit motivations and emotional complexity.  \n        - **Use Precise Narrative Language**: Ensure descriptions are vivid, engaging, and faithful to the story world.  \n        - **Ensure Coherence & Progression**: Participation details should reflect evolving stakes and changing dynamics.  \n        - **DO NOT Invent Agents or Objects**: Only analyze the pre-listed participants.  \n\n        ---  \n        ### **Contextual Inputs**  \n\n        **Story Background**:  \n        {{ story_synopsis }}\n\n        **SCENE NUMBER {{ scene_number }}**:  \n        {{ scene_text }}\n\n        **EVENT TO ANALYZE**:  \n        - **Title**: {{ event.title }}  \n        - **Description**: {{ event.description }}  \n        - **UUID**: {{ event.uuid }}  \n\n        **PRE-IDENTIFIED AGENTS IN THIS EVENT** (analyze only these agents):  \n        {% if event.agent_participations and event.agent_participations|length > 0 %}\n        {% for agent_id in event.agent_participations %}\n        - {{ agent_id }}\n        {% endfor %}\n        {% else %}\n        NO agents specified. DO NOT infer additional agents.\n        {% endif %}\n\n        **PRE-IDENTIFIED OBJECTS IN THIS EVENT** (analyze only these objects):  \n        {% if event.object_involvements and event.object_involvements|length > 0 %}\n        {% for object_id in event.object_involvements %}\n        - {{ object_id }}\n        {% endfor %}\n        {% else %}\n        NO objects specified. DO NOT infer additional objects.\n        {% endif %}\n\n        **ENTITY REGISTRY (for reference only)**:  \n        {{ registry_context }}\n\n        ---  \n        **Output Format**  \n\n        {{ ctx.output_format }}  \n    \"#\n}\n",
    "story_bible.baml": "// Refactored BAML Schema for Story Bible Generator with Treatment Context\n\ngenerator story_bible_generator {\n output_type \"python/pydantic\"\n output_dir \"../utils/storybible\" // Adjust path as needed\n version \"0.83.0\" // Use your current BAML version\n default_client_mode \"sync\"\n}\n\ntemplate_string Showrunner_Persona #\"\n  {{ _.role('system') }}\n  You are a veteran story analyst and dramaturg with decades of experience in high-level television, film, and narrative design.\n\n  You specialize in:\n  - Identifying the core emotional and thematic spine of a story\n  - Mapping character transformation arcs with clarity and precision\n  - Distilling complex plot sequences into elegant, dramatic structures\n  - Highlighting contradictions, conflicts, and unresolved tensions\n  - Recognizing subtext, irony, and tonal modulation within scenes\n  - Synthesizing both granular scene-level beats and macro narrative arcs\n\n  You work in the tradition of master showrunners and script doctors. You value stories that:\n  - Reveal the **emotional cost** of choices\n  - Honor the **dramatic arc**, not just events\n  - Explore **moral ambiguity**, power dynamics, and human contradiction\n  - Use structure as a vessel for **meaning**, not a formula\n\n  Your tone is:\n  - Intelligent but not academic\n  - Passionate but not melodramatic\n  - Witty when appropriate, but never flippant\n  - Always in service of clarity, drama, and insight\n\n  You dislike:\n  - Flat summaries with no emotional valence\n  - Repetition of surface-level events\n  - Overwritten purple prose\n  - Scene-by-scene catalogues pretending to be story arcs\n\n  You are here to produce **emotionally intelligent, structurally rigorous, and narratively rich output** that will guide writers, editors, producers, and story developers.\n\n  Always remember: **A story is not what happens. It's what it *means* to the people it happens to.**\n\"#\n\ntemplate_string Veteran_story_editor #\"\n  {{ _.role('system') }}\n  You are also a seasoned Hollywood story editor. You worked on prestige television, indie films, and studio blockbusters. Your expertise lies in refining story beats, ensuring thematic consistency, trimming fat, and highlighting structural weaknesses. You are surgically precise in breaking down acts, turning points, and character moments that either propel or stall narrative momentum.\n\"#\n\ntemplate_string Philosopher_dramaturge #\"\n  {{ _.role('system') }}\n  You are also a philosopher-dramaturge trained in both classical narrative analysis and moral philosophy. Your role is to uncover the deeper meaning behind dramatic events, exploring how character decisions reflect ethical tensions, existential dilemmas, and systemic power dynamics. Use insights from Aristotle, Hume, Kant, and contemporary ethics to contextualize motivations and consequences.\n\"#\n\ntemplate_string Historian_of_fictional_cultures #\"\n  {{ _.role('system') }}\n  You are also a cultural historian specializing in fictional civilizations, with deep expertise in sociopolitical systems, legal codes, and ethical norms across imagined universes. You treat narrative canon like archival material, analyzing it for cultural tensions, historical trends, and the evolution of norms and power structures. Think Clifford Geertz meets Memory Alpha.\n\"#\n\ntemplate_string Genre_analyst #\"\n  {{ _.role('system') }}\n  You are also a genre theorist with a forensic eye for form, convention, and narrative expectation. Whether it's film noir, courtroom drama, sci-fi, or romantic tragedy, you dissect stories to understand how they reinforce, challenge, or deconstruct genre norms. You can name the trope, cite its history, and explain its evolution in the cultural zeitgeist.\n\"#\n\ntemplate_string Narrative_theologian #\"\n  {{ _.role('system') }}\n  You are also a narrative theologian, skilled in interpreting stories through the lens of redemption, sacrifice, sin, and grace. You see narrative as modern scripture—where characters seek salvation, fall from moral heights, or undergo transformations mirroring spiritual awakening. You use language that reflects both gravitas and human yearning.\n\"#\n\n// --- Core Data Structures ---\n\nclass Character {\n  name string @description(\"Character's full name if you know it\")\n  description string @description(\"Rich description of personality, motivations, conflicts, relationships and arc\")\n  background string? @description(\"Character's backstory and context\")\n  personality_traits string[]? @description(\"List of key personality traits\")\n  motivations string? @description(\"Character's core motivations and goals\")\n  relationships string[]? @description(\"Key relationships with other characters\")\n  contradictions string[]? @description(\"Internal contradictions or paradoxes within the character (e.g., 'seeks connection but pushes people away')\")\n  character_arc_stages CharacterArcStage[]? @description(\"Key moments in this character’s growth\")\n  core_wound string? @description(\"A defining emotional wound or trauma that shaped the character\")\n  deep_need string? @description(\"What the character truly needs to grow, often in contrast with what they want\")\n  role string? @description(\"Character's role in the narrative (e.g., Protagonist, Antagonist, Mentor)\")\n  detailed_profile string? @description(\"Comprehensive character profile in narrative format with vibrant prose, generated by EnhanceCharacterProfile\")\n}\n\nclass CharacterArcStage {\n  stage_name string @description(\"Narrative moment in arc (e.g., Realization, Breaking Point, Transformation)\")\n  description string @description(\"What changes in the character at this point\")\n}\n\nclass StoryLocation {\n  name string @description(\"Location name or identifier\")\n  description string @description(\"Detailed, atmospheric description capturing the energy and significance of the location\")\n  significance string? @description(\"The location's importance to the story\")\n}\n\nclass Theme {\n  name string @description(\"Theme name/title\")\n  description string @description(\"Vivid analysis of how this theme manifests in the narrative\")\n  examples string[]? @description(\"Specific examples of how this theme appears in the story\")\n  scene_manifestation string? @description(\"How this theme appears or is explored in a specific scene - used for scene analysis\")\n  opposing_theme string? @description(\"A contrasting or opposing theme that challenges or reframes this theme\")\n}\n\nclass PlotPoint {\n  // ... (Existing fields unchanged) ...\n  description string @description(\"Compelling description of a key event that drives the narrative forward\")\n  significance string? @description(\"The plot point's importance to the overall story\")\n  characters_involved string[]? @description(\"Characters involved in this plot point\")\n  irony string? @description(\"Any ironic, subversive, or unexpected reversal present in the plot point\")\n  audience_emotion string[]? @description(\"Target emotional beats this scene or moment is designed to provoke (e.g., shock, dread, joy)\")\n  // --- NEW EVIDENCE FIELDS ---\n  evidence_dialogue string? @description(\"Optional: A specific, concise line of dialogue (max ~20 words) that exemplifies this plot point.\")\n  key_moment_text string? @description(\"Optional: A brief description (~1-2 sentences) of the key action or moment representing this plot point, especially if dialogue isn't suitable.\")\n}\n\nclass Conflict {\n  // ... (Existing fields unchanged) ...\n  description string @description(\"Propulsive description of a core tension or obstacle in the story\")\n  type string? @description(\"Type of conflict (e.g., internal, interpersonal, societal)\")\n  involved_characters string[]? @description(\"Characters involved in this conflict\")\n  escalation_level string? @description(\"Whether this conflict is being introduced, escalated, or resolved - used for scene analysis\")\n  // --- NEW EVIDENCE FIELDS ---\n  evidence_dialogue string? @description(\"Optional: A specific, concise line of dialogue (max ~20 words) that exemplifies this conflict instance within a scene.\")\n  key_moment_text string? @description(\"Optional: A brief description (~1-2 sentences) of the key action or moment representing this conflict instance within a scene.\")\n}\n\n\nclass NarrativeStage {\n  stage string @description(\"Name of the narrative stage (e.g., Exposition, Inciting Incident, Rising Action, etc.)\")\n  description string @description(\"Vibrant description of what happens in this stage of the narrative\")\n}\n\nclass CharacterDynamic {\n  character_name string @description(\"Name of the character\")\n  role string @description(\"Role in the narrative (e.g., Protagonist, Antagonist, Mentor)\")\n  arc_description string @description(\"Vivid description of the character's arc and dynamics with other characters\")\n}\n\nclass CentralConflict {\n  // ... (Existing fields unchanged) ...\n  name string @description(\"Name of the conflict\")\n  description string @description(\"Powerful description of the conflict and its significance to the story\")\n  involved_characters string[]? @description(\"Characters involved in this conflict\")\n  // --- NEW EVIDENCE FIELDS ---\n  evidence_dialogue string? @description(\"Optional: A key line of dialogue (max ~20 words) representing the core of this central conflict.\")\n  key_moment_text string? @description(\"Optional: A brief description (~1-2 sentences) of a key moment embodying this central conflict.\")\n}\n\n// Consolidated comprehensive story elements class\nclass StoryElements {\n // ... (StoryElements definition mostly unchanged, uses updated sub-classes) ...\n  characters Character[] @description(\"Cast of characters with rich personalities and arcs\")\n  locations StoryLocation[] @description(\"Vividly described significant locations\")\n  themes Theme[] @description(\"Thematic elements that permeate the narrative\")\n  plot_points PlotPoint[] @description(\"Key plot points that drive the narrative forward (now with evidence fields)\")\n  conflicts Conflict[]? @description(\"List of individual conflict instances noted across scenes (now with evidence fields)\")\n  narrative_structure NarrativeStage[]? @description(\"Overall narrative structure (e.g., 3-Act) derived from Treatment or final merge\")\n  character_dynamics CharacterDynamic[]? @description(\"Analysis of key character dynamics and relationships\")\n  central_conflicts CentralConflict[]? @description(\"Analysis of the 1-3 central conflicts driving the story (now with evidence fields)\")\n  conflict_arcs ConflictArc[]? @description(\"Analysis of the trajectory of major conflicts across scenes (now with evidence fields)\")\n}\n\n// Consolidated summary with optional narrative structure\nclass Summary {\n  summary_text string @description(\"Final story synopsis focusing on the overall arc, key turning points, and thematic resonance, written with vivid but concise prose.\") // Updated description\n  narrative_structure NarrativeStage[]? @description(\"Optional high-level dramatic structure breakdown (e.g., 3-Act) derived during final synthesis.\") // Clarified purpose\n  tone string? @description(\"Overall dominant tone of this summary (e.g., Tragic, Ironic, Cautionary, Hopeful), for validation or alignment.\") // Added\n  arc_focus string[]? @description(\"Primary character or thematic arcs emphasized in this summary (e.g., 'Henry's moral decline', 'Betrayal vs Loyalty', 'The Cost of Ambition')\") // Added\n}\n\nclass MarkdownBible {\n  markdown_content string @description(\"Fully formatted markdown content for the story bible with vibrant prose\")\n}\n\nclass BibleMetadata {\n  detail_level string @description(\"Level of detail in the bible - concise, standard, or detailed\")\n  chunks int @description(\"Number of chunks processed\")\n  processing_time_seconds float @description(\"Processing time in seconds\")\n  model string? @description(\"Model used for generation\")\n  generated_at string? @description(\"Timestamp of generation\")\n  treatment_generated bool? @description(\"Whether treatment context was used\")\n  parallel_extraction_used bool? @description(\"Whether parallel scene extraction was used\")\n}\n\n// Scene-level analysis elements\nclass SceneCharacter {\n  name string @description(\"Character's name\")\n  scene_description string @description(\"Character's actions, dialogue, and development in this specific scene\")\n  emotions string[]? @description(\"Emotions displayed by the character in this scene\")\n  relationships string[]? @description(\"Interactions with other characters in this scene\")\n  development_points string[]? @description(\"Any character growth or change shown in this scene\")\n}\n\nclass SceneLocation {\n  name string @description(\"Location name\")\n  scene_description string @description(\"Vivid depiction of the location in this scene, including atmosphere\")\n  significance string? @description(\"The location's significance to this particular scene\")\n}\n\n// Scene-level analysis elements\nclass SceneElements {\n // ... (Existing fields unchanged) ...\n  scene_index int @description(\"Index of the scene/chunk being analyzed\") // Keep name for BAML internal consistency\n  scene_summary string @description(\"Brief, vibrant summary of the scene's core action and purpose\")\n  characters SceneCharacter[] @description(\"Characters appearing in this scene and their actions/development within it\")\n  locations SceneLocation[] @description(\"Locations featured in this scene\")\n  themes Theme[] @description(\"Themes explored or exemplified in this scene\")\n  conflicts Conflict[] @description(\"Specific conflicts presented or escalated in this scene (now with evidence fields)\") // Uses updated Conflict class\n  scene_beats MicroBeat[]? @description(\"The dramatic rhythm of the scene broken into 2-5 micro-beats\")\n  tone_profile SceneToneProfile? @description(\"The overall tone and emotional modulation of the scene\")\n  subtext_signals SubtextSignal[]? @description(\"Key moments of subtext or unspoken meaning in the scene\")\n  scene_purpose string? @description(\"The primary narrative or thematic function this scene serves (e.g., introduce character, raise stakes, reveal info, build tension)\")\n}\n\n// --- Treatment Structure ---\nclass TreatmentAct {\n  actNumber int @description(\"The act number (1, 2, or 3)\")\n  summary string @description(\"Detailed summary of the act's events\")\n  keyMoments string[] @description(\"List of key dramatic moments in this act\")\n}\n\nclass Treatment {\n  title string @description(\"The title of the screenplay\")\n  logline string @description(\"One-sentence summary of the story\")\n  synopsis string @description(\"Detailed story treatment in prose form\")\n  mainCharacters string[] @description(\"List of brief main character descriptions (name and role/arc)\")\n  acts TreatmentAct[] @description(\"Breakdown of major story acts\")\n}\n\n\n// --- BAML FUNCTIONS ---\n\n// NEW: Function to generate the initial story treatment\nfunction GenerateStoryTreatment(\n  full_script: string,\n  max_tokens: int @description(\"Maximum tokens for the treatment\")\n) -> Treatment {\n  client CustomGemini25 // Use a capable client for whole-script analysis\n  prompt #\"\n    {{ Showrunner_Persona ()}}\n    {{ Veteran_story_editor ()}}\n\n    STYLE INSTRUCTION: Create a comprehensive, structured treatment that captures the essence of the entire screenplay with clear, insightful prose.\n    \n    You are an experienced script doctor, story analyst, and screenwriting consultant. Your task is to read this entire screenplay and create a detailed, structured treatment that will serve as a foundation for more detailed scene analysis.\n    \n    Your treatment must include:\n    \n    1. TITLE: The title of the screenplay (infer from content if not explicitly stated, e.g., based on first page or prominent themes). If ambiguous, use \"Untitled Screenplay\".\n    \n    2. LOGLINE: A single compelling sentence (25-40 words) that captures the protagonist, their goal, the central conflict, and the stakes.\n    \n    3. SYNOPSIS: A detailed prose treatment (target 500-800 words, but adjust based on script length and complexity) describing the overall narrative arc, key plot points, character journeys, and thematic resonance. Write with vibrant, propulsive prose.\n    \n    4. MAIN CHARACTERS: A list of 3-7 key characters. For each, provide a brief description (1-2 sentences) covering their essential role, core motivation/conflict, and primary arc. Format as strings like: \"CHARACTER NAME: Description...\"\n    \n    5. ACT STRUCTURE: Break down the story into the intended number of acts (typically 3 acts for movies and UK television, or 5 acts for US television). For each act:\n       - Provide a detailed summary (200-300 words) of the act's main events, character progression, and rising/falling action.\n       - List 3-5 key dramatic moments or turning points within that act.\n    \n    This treatment will be used to provide context for a more detailed scene-by-scene analysis. Focus on elements that ground scene-level analysis within the broader narrative: overall plot, character arcs, major turning points, and core themes. Ensure the act summaries logically connect.\n    \n    {{ _.role(\"user\") }}\n    Here is the full screenplay:\n    --- START SCRIPT ---\n    {{ full_script }}\n    --- END SCRIPT ---\n    \n    Create a comprehensive, structured treatment that captures the essence of this screenplay within approximately {{ max_tokens }} tokens.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n\n// UPDATED: Function for chunk summarization with context\nfunction SummarizeChunkWithContext(\n  chunk_text: string,\n  story_treatment: Treatment? @description(\"Optional structured story treatment providing context\"),\n  detail_level: string @description(\"Level of detail - 'concise', 'standard', or 'detailed'\"),\n  max_tokens: int? @description(\"Maximum tokens for the summary output\")\n) -> Summary { // Still returns Summary class, but prompt ensures only summary_text is generated here\n  client CustomGemini // Or potentially a faster/cheaper client for chunks\n  prompt #\"\n    {{ Showrunner_Persona ()}}\n    STYLE INSTRUCTION: Write with vivid, propulsive prose. Your language should be as gripping and compelling as the events you describe.\n    \n    You are a world-class narratologist and script editor. You excel at distilling narrative excerpts while preserving dramatic impact. You never refer to 'excerpts' or 'chunks'.\n    \n    {% if story_treatment %}\n    OVERALL STORY CONTEXT (Use for understanding characters, themes, and general plot direction):\n    Title: {{ story_treatment.title }}\n    Logline: {{ story_treatment.logline }}\n    Synopsis Overview: {{ story_treatment.synopsis }}\n    Main Characters: {{ story_treatment.mainCharacters | join(\", \") }}\n    Act Structure Overview: {# Brief overview for context #}\n    {% for act in story_treatment.acts %}\n    - Act {{ act.actNumber }}: Key Moments: {{ act.keyMoments | join(\", \") }}\n    {% endfor %}\n    \n    Using the context above for background understanding, create a {{ detail_level }} summary focusing *only* on the specific events, actions, dialogue, and character interactions *within the provided script passage*.\n    {% else %}\n    Create a {{ detail_level }} summary of this part of the story, explaining what's happening in the plot and providing helpful context based *solely on the passage below*.\n    {% endif %}\n    \n    {% if max_tokens %}\n    Your summary should capture the dramatic detail and energy of the passage within approximately {{ max_tokens }} tokens.\n    {% endif %}\n    \n    Focus exclusively on:\n    - Immediate plot events and actions within this passage.\n    - Character motivations and interactions *as seen in this passage*.\n    - Dialogue highlights or key information revealed *in this passage*.\n    - Setting and atmosphere if significant *in this passage*.\n    - Any conflicts introduced or escalated *in this passage*.\n    \n    Write with a storyteller's voice, avoiding meta-references to the text itself (like \"this passage shows\").\n    \n    **CRITICAL OUTPUT INSTRUCTION:** For this task, ONLY provide the `summary_text`. Do NOT attempt to determine or output the `narrative_structure` (like Exposition, Rising Action, etc.) for this specific passage.\n    \n    {{ _.role(\"user\") }}\n    Script Passage:\n    --- START PASSAGE ---\n    {{ chunk_text }}\n    --- END PASSAGE ---\n    \n    Generate the summary text based *only* on the events in this passage.\n    \n    {{ ctx.output_format }}\n    \"#\n}\n\n// UPDATED: Function for merging summaries with context\nfunction MergeSummariesWithContext(\n  summaries: string[],\n  story_treatment: Treatment? @description(\"Optional structured story treatment providing overall context\"),\n  detail_level: string @description(\"Level of detail - 'concise', 'standard', or 'detailed'\"),\n  is_final_merge: bool @description(\"Whether this is the final merge to produce the complete summary\"),\n  max_tokens: int? @description(\"Maximum tokens for the merged summary output\")\n) -> Summary { // Returns Summary class now\n  client CustomGemini25 // Or a client good at synthesis\n  prompt #\"\n    {{ Showrunner_Persona ()}}\n\n    STYLE INSTRUCTION: Maintain and enhance the vibrant, propulsive prose style throughout your merged summary. Ensure narrative coherence and flow.\n    \n    You are a master storyteller and narrative synthesizer. You excel at integrating narrative summaries into cohesive story accounts.\n    \n    {% if story_treatment %}\n    OVERALL STORY CONTEXT:\n    Title: {{ story_treatment.title }}\n    Logline: {{ story_treatment.logline }}\n    Synopsis Overview: {{ story_treatment.synopsis }} {# Truncate for brevity #}\n    Main Characters: {{ story_treatment.mainCharacters | join(\", \") }}\n    Act Structure Overview:\n    {% for act in story_treatment.acts %}\n    - Act {{ act.actNumber }}: {{ act.summary }} Key Moments: {{ act.keyMoments | join(\", \") }}\n    {% endfor %}\n    {% endif %}\n    \n    {{ _.role(\"user\") }}\n    Here are multiple sequential summaries recounting parts of the story:\n    \n    {% for summary in summaries %}\n    --- SUMMARY {{ loop.index }} ---\n    {{ summary }}\n    \n    {% endfor %}\n    \n    {% if is_final_merge %}\n    Synthesize these summaries into the definitive, comprehensive {{ detail_level }} story synopsis. This is the final overview of the *entire* story based on the provided summaries.\n    - Ensure a smooth narrative flow, connecting events logically.\n    - Weave together plot progression, character development, and thematic elements.\n    - Resolve minor inconsistencies if possible, favoring the most plausible narrative thread.\n    {% if story_treatment %}\n    - Align the narrative with the overall structure and character arcs provided in the STORY CONTEXT.\n    {% endif %}\n    {% if max_tokens %}\n    Your complete synopsis should capture the dramatic detail and energy of the story with vibrant, propulsive prose, within approximately {{ max_tokens }} tokens.\n    {% endif %}\n    \n    {% else %}\n    Synthesize these sequential passages into a single, longer, cohesive narrative account.\n    - Maintain the chronological flow of events as presented in the summaries.\n    - Preserve key narrative details, character actions/dialogue, and thematic threads.\n    - Ensure the writing tone remains consistent and engaging.\n    {% if story_treatment %}\n    - Use the STORY CONTEXT to inform connections between events and character motivations.\n    {% endif %}\n    {% if max_tokens %}\n    Your synthesis should capture the dramatic detail and energy, within approximately {{ max_tokens }} tokens.\n    {% endif %}\n    {% endif %}\n    \n    Your integrated summary should read naturally as a single narrative. Avoid meta-references like \"Summary 1 says...\" or \"combining these summaries...\". Write with the authoritative voice of someone recounting the story.\n    Use the provided context (if available) to ensure consistency and depth. Create propulsive prose that brings the story to life.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Enhanced character profile generation (No direct context needed, uses summaries generated WITH context)\nfunction EnhanceCharacterProfile(\n  character_name: string,\n  character_description: string, // Basic description from initial extraction\n  relevant_chunks: string[] // Summaries of chunks where character appears\n) -> Character { // Return the full Character object with enhanced details\n  client GemkuA\n  prompt #\"\n    {{ Showrunner_Persona ()}}\n    {{ Historian_of_fictional_cultures ()}}\n    STYLE INSTRUCTION: Create a character profile with vivid, propulsive prose. Your language should paint a rich psychological portrait that reveals their complexities and motivations.\n    \n    You are a character dramaturg with deep psychological insight and a storyteller’s intuition. You identify core motivations, internal contradictions, and long-form emotional arcs. You understand that people change in stages—reluctantly, imperfectly, under pressure—and you trace those patterns like a forensic psychologist for narrative design.\n\n\n    Create a comprehensive, enhanced character profile for **{{ character_name }}**.\n    Start with the basic description provided, then enrich it using details and nuances found in the relevant story excerpts.\n    \n    Basic Information:\n    Name: {{ character_name }}\n    Initial Description: {{ character_description }}\n    \n    Relevant Story Excerpts (Summaries of scenes involving the character):\n    {% for chunk in relevant_chunks %}\n    --- EXCERPT {{ loop.index }} ---\n    {{ chunk }}\n    {% endfor %}\n    \n    Synthesize all available information into an updated, detailed character profile covering:\n    \n    1.  **Name**: {{ character_name }}\n    2.  **Description**: Rewrite the initial description into a richer, more nuanced overview incorporating insights from the excerpts.\n    3.  **Background**: Infer or extract any backstory hinted at in the excerpts.\n    4.  **Personality Traits**: List specific traits observed in the excerpts, providing brief examples if possible.\n    5.  **Motivations**: Refine understanding of core drives based on actions/dialogue in excerpts.\n    6.  **Relationships**: Describe key interactions and relationship dynamics seen in the excerpts.\n    7.  **Character Arc**: Identify moments of change, decision, or revelation in the excerpts that contribute to their overall arc.\n    8.  **Role**: Confirm or refine their narrative role based on their actions in the excerpts.\n    9.  **Detailed Profile**: Write a cohesive narrative paragraph (100-200 words) summarizing the character's essence, complexities, and journey as revealed across the provided information. Use vibrant prose.\n    \n    Focus on integrating information smoothly. The final output should be a complete `Character` object.\n    \n    {{ _.role(\"user\") }}\n    Please create the enhanced character profile for {{ character_name }}.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to extract scene elements (No direct context needed)\nfunction ExtractSceneElements(\n  scene_text: string,\n  scene_index: int,\n  scene_summary: string? @description(\"Optional pre-generated summary of the scene for context\"),\n  known_characters: CharacterIndex[]? @description(\"Optional: List of characters identified in pre-scan\") // <-- NEW PARAMETER\n) -> SceneElements {\n  client CustomGemini // Use a capable model for multi-faceted analysis\n  prompt #\"\n    {{ Showrunner_Persona ()}}\n    STYLE INSTRUCTION: Extract elements using clear, concise language for structure, but use vibrant prose for descriptions (e.g., character actions, location atmosphere, tone). Be analytical about beats, tone, and subtext.\n\n    You are an expert dramaturg, script analyst, and narrative designer specializing in deep scene analysis. Analyze this specific scene comprehensively.\n\n    {% if scene_summary %}\n    Contextual Scene Summary: {{ scene_summary }}\n    {% endif %}\n\n    {% if known_characters %}\n    KNOWN CHARACTERS (Identified in script pre-scan. Pay close attention if they appear in *this specific scene*):\n    {% for char_info in known_characters %}\n    - {{ char_info.name }} {% if char_info.likely_importance %}(Importance Estimate: {{ char_info.likely_importance }}){% endif %}\n    {% endfor %}\n    {% endif %}\n\n\n    Based *only* on the scene text provided below, extract the following elements for Scene #{{ scene_index }}:\n\n    1.  **scene_index**: {{ scene_index }}\n    2.  **scene_summary**: Create a brief (1-3 sentence) vibrant summary of the core action/purpose of *this specific scene*.\n    3.  **characters**: For each character *appearing* in this scene: name, scene_description... **Cross-reference against the KNOWN CHARACTERS list.** Ensure you capture actions/dialogue for any known characters present here.\n    4.  **locations**: For each location *used* in this scene: name, scene_description (atmosphere/use *in this scene*), significance *to this scene*.\n    5.  **themes**: For themes explored *in this scene*: name, scene_manifestation, specific examples (dialogue, actions, imagery) *from this scene*.\n    6.  **conflicts**: For conflicts present *in this scene*: description, involved characters, escalation_level (introduced, escalated, continued, climax, resolved *in this scene*). Also include `evidence_dialogue` (a key quote from this scene) or `key_moment_text` (a brief action description from this scene) *if* one clearly represents this specific conflict instance. Otherwise, leave blank.\n    7.  **scene_beats**: Identify the dramatic rhythm. Break the scene down into 2-5 distinct `MicroBeat`s (name, description, emotional_shift). Focus on turning points or shifts in dynamic/information.\n    8.  **tone_profile**: Analyze the scene's tone. Provide the `dominant_tone`, any notable `tone_shifts` within the scene, and the intended audience `emotional_targets`.\n    9.  **subtext_signals**: (Optional but valuable) Identify 1-3 key moments of subtext. For each `SubtextSignal`, provide the `surface_dialogue`/action, the `implied_meaning`, `relational_implication`, and `character_inference`. Focus on moments where characters hide meaning or reveal something indirectly.\n    10. **scene_purpose**: Concisely state the primary narrative or thematic function this scene serves (e.g., introduce character, raise stakes, reveal info, build tension, explore theme X, resolve conflict Y).\n\n    {{ _.role(\"user\") }}\n    Scene #{{ scene_index }} Text:\n    --- START SCENE ---\n    {{ scene_text }}\n    --- END SCENE ---\n\n    Extract the comprehensive elements for this scene, attempting to populate evidence fields for conflicts where appropriate.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n\n// Function to merge scene elements (No direct context needed)\nfunction MergeSceneElements(\n  scene_elements: SceneElements[],\n  known_characters: CharacterIndex[]? @description(\"Optional: List of characters identified in pre-scan\") // <-- NEW PARAMETER\n) -> StoryElements { // Output the main StoryElements structure\n  client CustomGemini // Use a client good at synthesis across many inputs\n  prompt #\"\n    {{ Showrunner_Persona ()}}\n    STYLE INSTRUCTION: Synthesize elements using vibrant, propulsive prose for descriptions. Focus on identifying patterns, arcs, and overall significance across scenes.\n    \n    You are a master dramaturg and narrative analyst skilled in synthesizing detailed scene-by-scene data into a cohesive, comprehensive understanding of a story's core components.\n    \n    {% if known_characters %}\n    PRE-SCANNED CHARACTERS (Reference this list for completeness and importance hints when building the final character profiles):\n    {% for char_info in known_characters %}\n    - {{ char_info.name }} {% if char_info.likely_importance %}(Importance Estimate: {{ char_info.likely_importance }}){% endif %}\n    {% endfor %}\n    {% endif %}\n\n    Analyze the provided elements extracted from individual scenes and merge them into the overall `StoryElements` structure. Your goal is not just to list items, but to synthesize the information to reveal development and significance across the entire narrative.\n    \n    For each category:\n    \n    1.  **Characters**: Synthesize scene appearances into rich profiles.\n        **Use the PRE-SCANNED CHARACTERS list as a guide to ensure significant characters are included and their roles/importance are considered.**\n        *   Track changes in behavior, relationships, and stated goals across scenes.\n        *   Identify consistent personality traits and underlying motivations.\n        *   Construct the overall character arc (development, key turning points) based *only* on the provided scene data.\n        *   Determine their likely narrative role.\n        *   Write a comprehensive `description` capturing this synthesized understanding.\n    2.  **Locations**: Create unified descriptions for recurring locations.\n        *   Combine descriptions from different scenes.\n        *   Note changes in atmosphere or usage.\n        *   Determine the overall `significance` of the location to the story based on its use across scenes.\n    3.  **Themes**: Analyze how themes emerge and develop.\n        *   Group related thematic mentions from different scenes under a common theme `name`.\n        *   Write a `description` analyzing the theme's evolution and exploration.\n        *   Compile representative `examples` from various scenes.\n    4.  **Plot Points**: Identify the *major* story beats based on significant events across scenes.\n        *   Synthesize related scene events into larger plot points.\n        *   Focus on events that clearly drive the narrative forward (inciting incidents, turning points, climaxes).\n        *   Determine the `significance` of these major points.\n    5.  **Conflicts**: Map the trajectory of conflicts.\n        *   Identify recurring conflicts and trace their introduction, escalation, and potential resolution across scenes.\n        *   Distinguish between scene-level conflicts and the major, overarching `Central Conflicts`.\n        *   Determine the `type` and main `involved_characters` for significant conflicts.\n    6.  **Narrative Structure**: (Infer if not explicitly provided elsewhere) Based on the flow of events suggested by the scene elements (plot points, conflicts, character arcs), outline the likely narrative stages (Exposition, Rising Action, Climax, etc.).\n    7.  **Character Dynamics**: Based on synthesized character arcs and relationships, describe the key dynamics and evolving relationships between major characters.\n    8.  **Central Conflicts**: Identify the 1-3 core conflicts that seem to drive the entire narrative based on the scene data. Describe their nature and significance.\n    \n    {{ _.role(\"user\") }}\n    Here are the elements extracted from each scene:\n    \n    {% for scene in scene_elements %}\n    --- SCENE {{ scene.scene_index }} ---\n    Summary: {{ scene.scene_summary }}\n    Characters: {% for c in scene.characters %}{{ c.name }}({{ c.scene_description }}); {% endfor %}\n    Locations: {% for l in scene.locations %}{{ l.name }}; {% endfor %}\n    Themes: {% for t in scene.themes %}{{ t.name }}; {% endfor %}\n    Conflicts: {% for c in scene.conflicts %}{{ c.description }}({{ c.escalation_level }}); {% endfor %}\n    {% endfor %}\n    \n    Synthesize these scene elements into the comprehensive `StoryElements` structure. Focus on integration and analysis, not just listing.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Final polished summary function for the Story synopsis section\nfunction GeneratePolishedExecutiveSummary(\n  initial_summary: string @description(\"The summary generated from merging chunks, potentially detailed.\"),\n  detail_level: string @description(\"Desired level of detail: concise, standard, detailed\"),\n  max_tokens: int? @description(\"Approximate token limit for the final synopsis (e.g., standard might be ~800 tokens).\")\n) -> Summary { // Returns the enhanced Summary class\n  client GemkuA // Use a capable client for final synthesis and writing\n  prompt #\"\n    {{ Showrunner_Persona ()}}\n    STYLE INSTRUCTION: Synthesize a final story synopsis that reflects the full arc of the narrative with vivid, cinematic, and emotionally grounded prose. Focus on:\n    - Character motivations and **transformation**\n    - Key **turning points** and consequences\n    - Thematic throughlines (e.g., loyalty, greed, identity)\n    - The overall **dramatic shape** (rising action, climax, fallout)\n\n    **Avoid scene-by-scene description.** Do not repeat dialogue or detailed set pieces unless they are **pivotal turning points** crucial to understanding the overall arc.\n\n    Tone should be **dramatic but restrained**. Do not use overly poetic or florid language. Prioritize **narrative clarity, pacing, and emotional impact** over literary flourish.\n\n    This is not a chapter-by-chapter recounting. It is a **coherent, compelling narrative arc** of the full story, suitable for a show bible or pitch deck synopsis. Assume the reader has access to scene summaries and character breakdowns elsewhere.\n\n    Adhere to the requested {{ detail_level }} level of detail. Target approximately {{ max_tokens or 800 }} tokens. Include only the most essential events needed to understand the arc, characters, and themes.\n\n    **DO NOT summarize the treatment again.** Focus on synthesizing the arc from the provided summary material.\n\n    Optionally, identify the overall `tone` of the story as presented in your synopsis and the primary `arc_focus` (key character or thematic arcs emphasized).\n\n    {{ _.role(\"user\") }}\n    Initial Merged Summary Material:\n    --- START SUMMARY MATERIAL ---\n    {{ initial_summary }}\n    --- END SUMMARY MATERIAL ---\n\n    Synthesize this material into the final, polished story synopsis, following all instructions regarding scope, tone, style, and purpose. Output should conform to the `Summary` class structure, focusing primarily on `summary_text`.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// --- NEW BAML Classes ---\n\n// For Step 0: Character Pre-Scan\nclass CharacterIndex {\n  name string @description(\"Identified potential character name\")\n  likely_importance string? @description(\"Estimated importance (e.g., high, medium, low, unknown) based on frequency or context - optional\")\n}\n\n// For Step 6: Conflict Arc Analysis\nclass ConflictArc {\n  conflict_description string @description(\"Description of the overarching conflict being traced (e.g., 'Claudius vs. Sejanus for political influence')\")\n  type string @description(\"Type of conflict (e.g., Interpersonal, Internal/Psychological, Social/Institutional, Environmental)\")\n  involved_characters string[] @description(\"Main characters driving or significantly affected by this conflict arc\")\n  start_scene_index int? @description(\"Approximate scene/chunk index where this conflict arc begins or is clearly introduced\") // Keep name for BAML internal consistency\n  escalation_points string[]? @description(\"Descriptions or scene/chunk indices where the conflict significantly escalates or intensifies\")\n  climax_point string? @description(\"Description or scene/chunk index representing the peak intensity or turning point of this specific conflict arc\")\n  resolution_point string? @description(\"Description or scene/chunk index where the conflict arc resolves or concludes (if applicable, otherwise state 'unresolved' or 'persists')\")\n  // --- NEW EVIDENCE FIELDS ---\n  evidence_dialogue string? @description(\"Optional: A defining line of dialogue (max ~20 words) that encapsulates this entire conflict arc.\")\n  key_moment_text string? @description(\"Optional: A brief description (~1-2 sentences) of a defining moment that represents this entire conflict arc.\")\n}\n\n\n// --- NEW BAML Functions ---\n\n// For Step 0: Character Pre-Scan\nfunction PreScanCharacters(\n  full_script: string\n) -> CharacterIndex[] {\n  client GemkuA // Or a faster/cheaper client suitable for pattern recognition\n  prompt #\"\n    {{ Showrunner_Persona ()}}\n    You are an expert script analyst tasked with quickly identifying potential character names.\n    Scan the provided screenplay text and extract a list of likely character names.\n\n    Focus on:\n    - Names appearing in all caps at the start of lines (potential dialogue cues).\n    - Names mentioned frequently in action lines or dialogue.\n    - Avoid common script elements like INT., EXT., V.O., O.S., CONTINUED, FADE IN, FADE OUT.\n    - Try to estimate the character's importance based on frequency or context (e.g., appearing early, mentioned often). Use 'high', 'medium', 'low', or 'unknown'.\n\n    Return *only* the list of characters in the specified format. Do not include introductions or explanations.\n\n    {{ _.role(\"user\") }}\n    Screenplay Text:\n    --- START SCRIPT ---\n    {{ full_script }}\n    --- END SCRIPT ---\n\n    Extract potential character names.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// For Step 8: Final Summary Synthesis\nfunction SynthesizeNarrativeFromElements(\n  initial_summary: string @description(\"The summary generated from merging chunks.\"),\n  elements: StoryElements @description(\"The structured story elements, including enhanced characters and conflict arcs.\"),\n  detail_level: string @description(\"Desired level of detail: concise, standard, detailed\"),\n  max_tokens: int? @description(\"Approximate token limit for the final summary.\")\n) -> Summary { // Returns the standard Summary class\n  client GemkuA // Needs strong writing and synthesis skills\n  prompt #\"\n    {{ Showrunner_Persona ()}}\n    STYLE INSTRUCTION: Rewrite and enrich the initial summary using insights from the structured elements. Create a final, cohesive, and dramatically compelling narrative synopsis with vibrant, propulsive prose.\n\n    You are a master editor and storyteller synthesizing the definitive narrative summary for a story bible. You have an initial draft summary and a detailed breakdown of the story's elements (characters, themes, conflicts, arcs).\n\n    Your task is to **rewrite** the `initial_summary`, integrating the depth and specifics found in the `elements` to create the final, polished synopsis.\n\n    Focus on:\n    - **Grounding**: Ensure the narrative reflects the specific character arcs, motivations, and relationships detailed in `elements.characters`.\n    - **Specificity**: Incorporate key plot points, location details, and thematic examples from `elements`.\n    - **Conflict Integration**: Weave in the understanding of central conflicts and their trajectories (using `elements.central_conflicts` and `elements.conflict_arcs`).\n    - **Cohesion**: Create a smooth, logical flow that reflects the narrative structure.\n    - **Voice**: Maintain a compelling, dramatic, and engaging tone appropriate for the story.\n    - **Detail**: Adhere to the requested `detail_level`.\n\n    Do not simply append the elements; *integrate* their insights into the prose narrative. The output should be a single, flowing summary.\n\n    {{ _.role(\"user\") }}\n    Initial Draft Summary:\n    --- START INITIAL SUMMARY ---\n    {{ initial_summary }}\n    --- END INITIAL SUMMARY ---\n\n    Structured Story Elements:\n    --- START ELEMENTS ---\n    Characters Overview: {% for char in elements.characters %} {{ char.name }} (Arc: {{ char.character_arc_stages or 'N/A' }}); {% endfor %}\n    Themes Overview: {% for theme in elements.themes %} {{ theme.name }}; {% endfor %}\n    Central Conflicts Overview: {% for conflict in elements.central_conflicts %} {{ conflict.name }}; {% endfor %}\n    Conflict Arcs Overview: {% for arc in elements.conflict_arcs %} {{ arc.conflict_description }}; {% endfor %}\n    (Full element details are available for your analysis)\n    --- END ELEMENTS ---\n\n    Synthesize the final {{ detail_level }} narrative summary, enriching the initial draft with insights from the structured elements. Target approximately {{ max_tokens }} tokens.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// --- NEW BAML Classes ---\n\nclass MicroBeat {\n  name string @description(\"Concise dramatic beat name (e.g., Setup, Inciting Action, Confrontation, Reversal, Realization, Climax, Resolution)\")\n  description string @description(\"Brief summary (1 sentence) of what happens at this specific beat within the scene\")\n  emotional_shift string? @description(\"How the emotional tone shifts from start to end of this beat (e.g., 'hope to dread', 'calm to anger', 'confusion to clarity') - optional\")\n}\n\nclass SceneToneProfile {\n  dominant_tone string @description(\"Primary overall tone of the scene (e.g., somber, ironic, suspenseful, intimate, frantic, satirical, romantic, threatening)\")\n  tone_shifts string[]? @description(\"Notable tone changes *within* the scene (e.g., 'shifts from suspense to relief then back to suspense')\")\n  emotional_targets string[]? @description(\"Intended audience emotional reactions at key moments (e.g., shock, sympathy, revulsion, anxiety, joy, pity)\")\n}\n\n\nclass SubtextSignal {\n  surface_dialogue string @description(\"Quoted or paraphrased surface-level line or action\")\n  implied_meaning string @description(\"What is actually meant, felt, or intended beneath the surface\")\n  relational_implication string? @description(\"What this reveals or changes about the relationship between characters involved\")\n  character_inference string? @description(\"What this reveals about the speaker's internal state, hidden motives, or self-deception\")\n}\n\nfunction TrackConflictTrajectory(\n  all_scene_elements: SceneElements[]\n) -> ConflictArc[] { // Output remains list<ConflictArc>\n  client CustomGemini // Needs good synthesis capability across list\n  prompt #\"\n    {{ Showrunner_Persona ()}}\n    {{ Genre_analyst ()}}\n    STYLE INSTRUCTION: Synthesize conflict instances across scenes into clear, longitudinal conflict arcs. Describe the trajectory analytically.\n\n    You are a senior story analyst and dramaturg. Given structured data from multiple scenes, including conflicts identified within each, your task is to identify recurring conflicts and trace their arcs throughout the entire narrative provided.\n\n    Analyze the `conflicts` listed within each `SceneElements` object. Group related conflict instances (e.g., multiple scenes showing 'Character A vs Character B over X') into overarching `ConflictArc`s.\n\n    For each significant conflict arc (focus on the 3-7 most important):\n    1.  Define the core conflict (`conflict_description`).\n    2.  Specify its `type` (Interpersonal, Internal, Social, etc.).\n    3.  List the main `involved_characters`.\n    4.  Estimate the `start_scene_index` based on where it's first mentioned or clearly emerges in the scene data.\n    5.  Identify key `escalation_points` by citing scene indices or brief descriptions of escalating events found in the scene conflicts.\n    6.  Pinpoint the `climax_point` (scene index or event description) representing the peak intensity or turning point.\n    7.  Note the `resolution_point` (scene index or event description) or state if it remains unresolved based on the provided scene data.\n    8.  Optionally, identify a single, defining `evidence_dialogue` (concise quote) or `key_moment_text` (brief action) *from any of the input scenes* that best encapsulates the *entire arc* of this conflict. This might be difficult; only include if a strong example exists.\n\n    Consider the `escalation_level` provided for conflicts within each scene to help map the trajectory.\n\n    {{ _.role(\"user\") }}\n    Here is the scene-by-scene conflict data embedded within scene elements:\n\n    {% for scene in all_scene_elements %}\n    --- SCENE {{ scene.scene_index }} ---\n    {% if scene.conflicts %}\n    Conflicts Present:\n    {% for conflict in scene.conflicts %}\n    - {{ conflict.description }} (Involving: {{ conflict.involved_characters | join(\", \") }}; Stage: {{ conflict.escalation_level or 'N/A' }})\n      {% if conflict.evidence_dialogue %} Evidence Dialogue: \"{{ conflict.evidence_dialogue }}\" {% endif %}\n      {% if conflict.key_moment_text %} Key Moment: \"{{ conflict.key_moment_text }}\" {% endif %}\n    {% endfor %}\n    {% else %}\n    Conflicts Present: None noted.\n    {% endif %}\n    {% endfor %}\n\n    Analyze this data and identify the major conflict arcs, describing their trajectory and attempting to identify a defining piece of evidence for the whole arc where possible.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n\n// --- NEW BAML Classes ---\n\n// For LLM Scene Pattern Identification\nclass SceneHeadingPatterns {\n  identified_patterns string[] @description(\"List of Python-compatible regex patterns identified for scene headings in the script sample. Should capture variations like INT./EXT., numbering, spacing, punctuation.\")\n  confidence string @description(\"Confidence in the identified patterns (e.g., High, Medium, Low).\")\n  reasoning string? @description(\"Brief explanation of why these patterns were chosen (e.g., 'Observed INT./EXT. and numbered formats').\")\n  example_matches string[]? @description(\"A few examples of lines from the sample that match the identified patterns.\") // Helps debugging\n}\n\n// --- NEW BAML Functions ---\n\n// For identifying scene heading patterns before splitting\nfunction IdentifySceneHeadingPattern(\n  script_sample: string @description(\"A representative sample from the beginning of the script (e.g., first 500-1000 lines or 10k characters).\")\n) -> SceneHeadingPatterns {\n  client CustomGemini25 // Or another client good at pattern recognition and regex generation\n  prompt #\"\n    {{ Showrunner_Persona ()}} // Use a relevant persona\n    // Add another persona if helpful, e.g., Regex Expert\n    {{ _.role('system') }}\n    You are also an expert in regular expressions and screenplay formatting conventions.\n\n    STYLE INSTRUCTION: Analyze the provided script sample carefully. Identify the specific formatting patterns used for SCENE HEADINGS ONLY. Generate accurate Python-compatible regex patterns.\n\n    Your task is to analyze the provided sample text from a screenplay and determine the distinct patterns used to mark the beginning of new scenes (Scene Headings). These typically start with INT., EXT., I/E., E/I., sometimes preceded by a scene number (e.g., '1.', '12A.'), or use a period prefix for Fountain format (e.g., '.INTERIOR'). They often include location and time of day (DAY, NIGHT, CONTINUOUS).\n\n    Consider variations in:\n    - Abbreviations (INT./EXT., I/E, etc.)\n    - Punctuation (periods, hyphens, spaces)\n    - Optional scene numbering (digits, maybe letters, with or without dots/parentheses)\n    - Spacing around elements\n    - Case sensitivity (though assume headings are typically uppercase, regex should handle variations if observed)\n    - Potential artifacts from PDF conversion (e.g., extra spaces, broken lines - try to create robust patterns).\n\n    Generate a list of Python-compatible regex patterns (`identified_patterns`) that accurately capture **all** distinct scene heading formats observed in the sample. Each pattern should generally match the start of the line (`^`) and account for potential leading whitespace (`\\s*`).\n\n    Also provide:\n    - Your `confidence` level (High, Medium, Low) that these patterns cover the primary scene headings in the script.\n    - Optional `reasoning` for your pattern choices.\n    - Optional `example_matches` (actual lines from the sample that match your patterns).\n\n    **CRITICAL:** Do NOT create patterns for character names (like 'LORNE'), action lines, dialogue, parentheticals ('(beat)'), or transitions ('CUT TO:'). Focus *exclusively* on scene start markers/headings.\n\n    {{ _.role(\"user\") }}\n    Screenplay Sample:\n    --- START SAMPLE ---\n    {{ script_sample }}\n    --- END SAMPLE ---\n\n    Identify the scene heading patterns used in this sample.\n\n    {{ ctx.output_format }}\n  \"#\n}",
}

def get_baml_files():
    return file_map