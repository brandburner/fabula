###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Optional, TypeVar, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class Agent(BaseModel):
    uuid: Optional[str] = None
    agent_id: Optional[str] = None
    name: Optional[str] = None
    title: Optional[str] = None
    aliases: Optional[Union[List[str], Optional[None]]] = None
    description: Optional[str] = None
    traits: List[str]
    affiliated_org: Optional[Union[str, Optional[None]]] = None
    sphere_of_influence: Optional[str] = None

class AgentParticipation(BaseModel):
    uuid: Optional[str] = None
    agent: Optional[str] = None
    event: Optional[str] = None
    current_status: Optional[str] = None
    emotional_state: Optional[str] = None
    active_plans: List[str]
    beliefs: List[str]
    goals: List[str]

class BibleMetadata(BaseModel):
    detail_level: Optional[str] = None
    chunks: Optional[int] = None
    processing_time_seconds: Optional[float] = None
    model: Optional[str] = None
    generated_at: Optional[str] = None
    treatment_generated: Optional[bool] = None
    parallel_extraction_used: Optional[bool] = None

class CentralConflict(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    involved_characters: Optional[List[str]] = None
    evidence_dialogue: Optional[str] = None
    key_moment_text: Optional[str] = None

class Character(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    background: Optional[str] = None
    personality_traits: Optional[List[str]] = None
    motivations: Optional[str] = None
    relationships: Optional[List[str]] = None
    contradictions: Optional[List[str]] = None
    character_arc_stages: Optional[List["CharacterArcStage"]] = None
    core_wound: Optional[str] = None
    deep_need: Optional[str] = None
    role: Optional[str] = None
    detailed_profile: Optional[str] = None

class CharacterArcStage(BaseModel):
    stage_name: Optional[str] = None
    description: Optional[str] = None

class CharacterDynamic(BaseModel):
    character_name: Optional[str] = None
    role: Optional[str] = None
    arc_description: Optional[str] = None

class CharacterIndex(BaseModel):
    name: Optional[str] = None
    likely_importance: Optional[str] = None

class Conflict(BaseModel):
    description: Optional[str] = None
    type: Optional[str] = None
    involved_characters: Optional[List[str]] = None
    escalation_level: Optional[str] = None
    evidence_dialogue: Optional[str] = None
    key_moment_text: Optional[str] = None

class ConflictArc(BaseModel):
    conflict_description: Optional[str] = None
    type: Optional[str] = None
    involved_characters: List[str]
    start_scene_index: Optional[int] = None
    escalation_points: Optional[List[str]] = None
    climax_point: Optional[str] = None
    resolution_point: Optional[str] = None
    evidence_dialogue: Optional[str] = None
    key_moment_text: Optional[str] = None

class CypherQuery(BaseModel):
    query: Optional[str] = None
    purpose: Optional[str] = None

class Episode(BaseModel):
    title: Optional[str] = None
    synopsis: Optional[str] = None
    episode_number: Optional[int] = None
    part_of_serial: Optional[str] = None

class Event(BaseModel):
    title: Optional[str] = None
    uuid: Optional[str] = None
    description: Optional[str] = None
    sequence_within_scene: Optional[int] = None
    key_dialogue: List[str]
    agent_participations: List[str]
    object_involvements: List[str]
    next_event: Optional[Union[str, Optional[None]]] = None

class EventInteractions(BaseModel):
    agent_participations: List["AgentParticipation"]
    object_involvements: List["ObjectInvolvement"]

class Location(BaseModel):
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    type: Optional[str] = None

class MarkdownBible(BaseModel):
    markdown_content: Optional[str] = None

class MicroBeat(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    emotional_shift: Optional[str] = None

class NarrativeStage(BaseModel):
    stage: Optional[str] = None
    description: Optional[str] = None

class NodeLabel(BaseModel):
    name: Optional[Union[Literal["Agent"], Literal["Organization"], Literal["Location"], Literal["Object"], Literal["Scene"], Literal["Event"], Literal["AgentParticipation"], Literal["ObjectInvolvement"]]] = None

class Object(BaseModel):
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    purpose: Optional[str] = None
    significance: Optional[str] = None
    original_owner: Optional[Union[str, Optional[None]]] = None

class ObjectInvolvement(BaseModel):
    uuid: Optional[str] = None
    object: Optional[str] = None
    event: Optional[str] = None
    description_of_involvement: Optional[str] = None
    object_status_before_event: Optional[str] = None
    object_status_after_event: Optional[str] = None

class Organization(BaseModel):
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    sphere_of_influence: Optional[str] = None
    members: List[str]

class PlotPoint(BaseModel):
    description: Optional[str] = None
    significance: Optional[str] = None
    characters_involved: Optional[List[str]] = None
    irony: Optional[str] = None
    audience_emotion: Optional[List[str]] = None
    evidence_dialogue: Optional[str] = None
    key_moment_text: Optional[str] = None

class PrimaryEntities(BaseModel):
    agents: List["Agent"]
    organizations: List["Organization"]
    locations: List["Location"]
    objects: List["Object"]

class PropertyName(BaseModel):
    agent: Optional[Union[Literal["uuid"], Literal["name"], Literal["description"], Literal["traits"], Literal["affiliated_org"]]] = None
    organization: Optional[Union[Literal["uuid"], Literal["name"], Literal["description"], Literal["sphere_of_influence"], Literal["members"]]] = None
    location: Optional[Union[Literal["uuid"], Literal["name"], Literal["description"], Literal["type"]]] = None
    object: Optional[Union[Literal["uuid"], Literal["name"], Literal["description"], Literal["purpose"], Literal["significance"], Literal["original_owner"]]] = None
    scene: Optional[Union[Literal["uuid"], Literal["title"], Literal["description"], Literal["scene_number"], Literal["location"], Literal["next_scene"]]] = None
    event: Optional[Union[Literal["uuid"], Literal["title"], Literal["description"], Literal["sequence_within_scene"], Literal["key_dialogue"], Literal["next_event"]]] = None
    agentParticipation: Optional[Union[Literal["uuid"], Literal["agent"], Literal["event"], Literal["current_status"], Literal["emotional_state"]]] = None
    objectInvolvement: Optional[Union[Literal["uuid"], Literal["object"], Literal["event"], Literal["description_of_involvement"]]] = None

class RelationType(BaseModel):
    name: Optional[Union[Literal["NEXT_SCENE"], Literal["OCCURS_IN"], Literal["NEXT_EVENT"], Literal["PARTICIPATES_IN"], Literal["IN_EVENT"], Literal["INVOLVED_IN"], Literal["OWNS"], Literal["AFFILIATED_WITH"], Literal["PART_OF"], Literal["LOCATED_IN"]]] = None

class ResolvedAgent(BaseModel):
    uuid: Optional[str] = None
    agent_id: Optional[str] = None
    name: Optional[str] = None
    title: Optional[str] = None
    aliases: Optional[List[str]] = None
    description: Optional[str] = None
    traits: List[str]
    affiliated_org: Optional[Union[str, Optional[None]]] = None
    sphere_of_influence: Optional[str] = None
    source_uuids: Optional[List[str]] = None

class ResolvedLocation(BaseModel):
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    type: Optional[str] = None
    source_uuids: Optional[List[str]] = None

class ResolvedObject(BaseModel):
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    purpose: Optional[str] = None
    significance: Optional[str] = None
    original_owner: Optional[Union[str, Optional[None]]] = None
    source_uuids: Optional[List[str]] = None

class ResolvedOrganization(BaseModel):
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    sphere_of_influence: Optional[str] = None
    members: Optional[Union[List[str], Optional[None]]] = None
    source_uuids: Optional[List[str]] = None

class Scene(BaseModel):
    title: Optional[str] = None
    description: Optional[str] = None
    scene_number: Optional[int] = None
    events: List[str]
    location: Optional[Union[str, Optional[None]]] = None
    next_scene: Optional[Union[str, Optional[None]]] = None

class SceneCharacter(BaseModel):
    name: Optional[str] = None
    scene_description: Optional[str] = None
    emotions: Optional[List[str]] = None
    relationships: Optional[List[str]] = None
    development_points: Optional[List[str]] = None

class SceneData(BaseModel):
    metadata: Optional["SceneMetadata"] = None
    events: List["Event"]

class SceneElements(BaseModel):
    scene_index: Optional[int] = None
    scene_summary: Optional[str] = None
    characters: List["SceneCharacter"]
    locations: List["SceneLocation"]
    themes: List["Theme"]
    conflicts: List["Conflict"]
    scene_beats: Optional[List["MicroBeat"]] = None
    tone_profile: Optional["SceneToneProfile"] = None
    subtext_signals: Optional[List["SubtextSignal"]] = None
    scene_purpose: Optional[str] = None

class SceneHeadingPatterns(BaseModel):
    identified_patterns: List[str]
    confidence: Optional[str] = None
    reasoning: Optional[str] = None
    example_matches: Optional[List[str]] = None

class SceneLocation(BaseModel):
    name: Optional[str] = None
    scene_description: Optional[str] = None
    significance: Optional[str] = None

class SceneMetadata(BaseModel):
    uuid: Optional[Union[str, Optional[None]]] = None
    title: Optional[str] = None
    description: Optional[str] = None
    scene_number: Optional[int] = None
    location: Optional[Union[str, Optional[None]]] = None
    next_scene: Optional[Union[str, Optional[None]]] = None

class SceneToneProfile(BaseModel):
    dominant_tone: Optional[str] = None
    tone_shifts: Optional[List[str]] = None
    emotional_targets: Optional[List[str]] = None

class StoryElements(BaseModel):
    characters: List["Character"]
    locations: List["StoryLocation"]
    themes: List["Theme"]
    plot_points: List["PlotPoint"]
    conflicts: Optional[List["Conflict"]] = None
    narrative_structure: Optional[List["NarrativeStage"]] = None
    character_dynamics: Optional[List["CharacterDynamic"]] = None
    central_conflicts: Optional[List["CentralConflict"]] = None
    conflict_arcs: Optional[List["ConflictArc"]] = None

class StoryLocation(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    significance: Optional[str] = None

class SubtextSignal(BaseModel):
    surface_dialogue: Optional[str] = None
    implied_meaning: Optional[str] = None
    relational_implication: Optional[str] = None
    character_inference: Optional[str] = None

class Summary(BaseModel):
    summary_text: Optional[str] = None
    narrative_structure: Optional[List["NarrativeStage"]] = None
    tone: Optional[str] = None
    arc_focus: Optional[List[str]] = None

class Theme(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    examples: Optional[List[str]] = None
    scene_manifestation: Optional[str] = None
    opposing_theme: Optional[str] = None

class Treatment(BaseModel):
    title: Optional[str] = None
    logline: Optional[str] = None
    synopsis: Optional[str] = None
    mainCharacters: List[str]
    acts: List["TreatmentAct"]

class TreatmentAct(BaseModel):
    actNumber: Optional[int] = None
    summary: Optional[str] = None
    keyMoments: List[str]
