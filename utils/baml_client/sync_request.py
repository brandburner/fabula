###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401,F821
# flake8: noqa: E501,F401,F821
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, Union, TypedDict, Type, Literal
from typing_extensions import NotRequired

import baml_py

from . import types
from .types import Checked, Check
from .type_builder import TypeBuilder


class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]


class HttpRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def CombineNarrativeAnalyses(
        self,
        summary_based_elements: types.StoryElements,scene_based_elements: Optional[types.StoryElements],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "CombineNarrativeAnalyses",
        {
          "summary_based_elements": summary_based_elements,"scene_based_elements": scene_based_elements,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def EnhanceCharacterProfile(
        self,
        character_name: str,character_description: str,relevant_chunks: List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "EnhanceCharacterProfile",
        {
          "character_name": character_name,"character_description": character_description,"relevant_chunks": relevant_chunks,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractAgentParticipations(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractAgentParticipations",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"event": event,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractAgents(
        self,
        scene_text: str,story_synopsis: Optional[str],agent_name_to_uuid_mapping: Dict[str, str],scene_number: int,organizations: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractAgents",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"agent_name_to_uuid_mapping": agent_name_to_uuid_mapping,"scene_number": scene_number,"organizations": organizations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractEventInteractions(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractEventInteractions",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"event": event,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractEvents(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractEvents",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractLocations(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractLocations",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractObjectInvolvements(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractObjectInvolvements",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"event": event,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractObjects(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,agents: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractObjects",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,"agents": agents,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractOrganizations(
        self,
        scene_number: int,scene_text: str,story_synopsis: Optional[str],agents: List[types.Agent],organizations: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractOrganizations",
        {
          "scene_number": scene_number,"scene_text": scene_text,"story_synopsis": story_synopsis,"agents": agents,"organizations": organizations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractPrimaryEntities(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,agent_name_to_uuid_mapping: Dict[str, str],existing_organizations: List[types.Organization],existing_agents: List[types.Agent],registry_context: Optional[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractPrimaryEntities",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,"agent_name_to_uuid_mapping": agent_name_to_uuid_mapping,"existing_organizations": existing_organizations,"existing_agents": existing_agents,"registry_context": registry_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractSceneData(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],scene_number: int,scene_uuid: str,locations: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractSceneData",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"scene_number": scene_number,"scene_uuid": scene_uuid,"locations": locations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractSceneElements(
        self,
        scene_text: str,scene_index: int,scene_summary: Optional[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractSceneElements",
        {
          "scene_text": scene_text,"scene_index": scene_index,"scene_summary": scene_summary,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractSceneMetadata(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,locations: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractSceneMetadata",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,"locations": locations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractStoryElements(
        self,
        narrative_summary: str,narrative_structure: Optional[List[types.NarrativeStage]],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractStoryElements",
        {
          "narrative_summary": narrative_summary,"narrative_structure": narrative_structure,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def GenerateMarkdownBible(
        self,
        title: str,summary: str,elements: types.StoryElements,metadata: types.BibleMetadata,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateMarkdownBible",
        {
          "title": title,"summary": summary,"elements": elements,"metadata": metadata,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def GeneratePolishedExecutiveSummary(
        self,
        summary: str,detail_level: str,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GeneratePolishedExecutiveSummary",
        {
          "summary": summary,"detail_level": detail_level,"max_tokens": max_tokens,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def GenerateVibrantFinalSummary(
        self,
        merged_summaries: List[str],detail_level: str,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateVibrantFinalSummary",
        {
          "merged_summaries": merged_summaries,"detail_level": detail_level,"max_tokens": max_tokens,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def MergeSceneElements(
        self,
        scene_elements: List[types.SceneElements],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "MergeSceneElements",
        {
          "scene_elements": scene_elements,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def MergeSummaries(
        self,
        summaries: List[str],detail_level: str,is_final_merge: bool,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "MergeSummaries",
        {
          "summaries": summaries,"detail_level": detail_level,"is_final_merge": is_final_merge,"max_tokens": max_tokens,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ResolveAgentCluster(
        self,
        entities: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ResolveAgentCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ResolveCrossEpisodeAgentCluster(
        self,
        entities: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ResolveCrossEpisodeAgentCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ResolveCrossEpisodeLocationCluster(
        self,
        entities: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ResolveCrossEpisodeLocationCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ResolveCrossEpisodeObjectCluster(
        self,
        entities: List[types.Object],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ResolveCrossEpisodeObjectCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ResolveCrossEpisodeOrganizationCluster(
        self,
        entities: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ResolveCrossEpisodeOrganizationCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ResolveLocationCluster(
        self,
        entities: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ResolveLocationCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ResolveOrganizationCluster(
        self,
        entities: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ResolveOrganizationCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def SummarizeChunk(
        self,
        chunk_text: str,detail_level: str,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SummarizeChunk",
        {
          "chunk_text": chunk_text,"detail_level": detail_level,"max_tokens": max_tokens,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ValidateCypher(
        self,
        question: str,available_apoc_functions: List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ValidateCypher",
        {
          "question": question,"available_apoc_functions": available_apoc_functions,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ValidateCypherOld(
        self,
        question: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ValidateCypherOld",
        {
          "question": question,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    


class HttpStreamRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def CombineNarrativeAnalyses(
        self,
        summary_based_elements: types.StoryElements,scene_based_elements: Optional[types.StoryElements],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "CombineNarrativeAnalyses",
        {
          "summary_based_elements": summary_based_elements,"scene_based_elements": scene_based_elements,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def EnhanceCharacterProfile(
        self,
        character_name: str,character_description: str,relevant_chunks: List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "EnhanceCharacterProfile",
        {
          "character_name": character_name,"character_description": character_description,"relevant_chunks": relevant_chunks,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractAgentParticipations(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractAgentParticipations",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"event": event,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractAgents(
        self,
        scene_text: str,story_synopsis: Optional[str],agent_name_to_uuid_mapping: Dict[str, str],scene_number: int,organizations: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractAgents",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"agent_name_to_uuid_mapping": agent_name_to_uuid_mapping,"scene_number": scene_number,"organizations": organizations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractEventInteractions(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractEventInteractions",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"event": event,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractEvents(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractEvents",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractLocations(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractLocations",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractObjectInvolvements(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractObjectInvolvements",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"event": event,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractObjects(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,agents: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractObjects",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,"agents": agents,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractOrganizations(
        self,
        scene_number: int,scene_text: str,story_synopsis: Optional[str],agents: List[types.Agent],organizations: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractOrganizations",
        {
          "scene_number": scene_number,"scene_text": scene_text,"story_synopsis": story_synopsis,"agents": agents,"organizations": organizations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractPrimaryEntities(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,agent_name_to_uuid_mapping: Dict[str, str],existing_organizations: List[types.Organization],existing_agents: List[types.Agent],registry_context: Optional[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractPrimaryEntities",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,"agent_name_to_uuid_mapping": agent_name_to_uuid_mapping,"existing_organizations": existing_organizations,"existing_agents": existing_agents,"registry_context": registry_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractSceneData(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],scene_number: int,scene_uuid: str,locations: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractSceneData",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"scene_number": scene_number,"scene_uuid": scene_uuid,"locations": locations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractSceneElements(
        self,
        scene_text: str,scene_index: int,scene_summary: Optional[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractSceneElements",
        {
          "scene_text": scene_text,"scene_index": scene_index,"scene_summary": scene_summary,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractSceneMetadata(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,locations: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractSceneMetadata",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,"locations": locations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractStoryElements(
        self,
        narrative_summary: str,narrative_structure: Optional[List[types.NarrativeStage]],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractStoryElements",
        {
          "narrative_summary": narrative_summary,"narrative_structure": narrative_structure,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def GenerateMarkdownBible(
        self,
        title: str,summary: str,elements: types.StoryElements,metadata: types.BibleMetadata,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateMarkdownBible",
        {
          "title": title,"summary": summary,"elements": elements,"metadata": metadata,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def GeneratePolishedExecutiveSummary(
        self,
        summary: str,detail_level: str,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GeneratePolishedExecutiveSummary",
        {
          "summary": summary,"detail_level": detail_level,"max_tokens": max_tokens,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def GenerateVibrantFinalSummary(
        self,
        merged_summaries: List[str],detail_level: str,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateVibrantFinalSummary",
        {
          "merged_summaries": merged_summaries,"detail_level": detail_level,"max_tokens": max_tokens,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def MergeSceneElements(
        self,
        scene_elements: List[types.SceneElements],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "MergeSceneElements",
        {
          "scene_elements": scene_elements,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def MergeSummaries(
        self,
        summaries: List[str],detail_level: str,is_final_merge: bool,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "MergeSummaries",
        {
          "summaries": summaries,"detail_level": detail_level,"is_final_merge": is_final_merge,"max_tokens": max_tokens,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ResolveAgentCluster(
        self,
        entities: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ResolveAgentCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ResolveCrossEpisodeAgentCluster(
        self,
        entities: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ResolveCrossEpisodeAgentCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ResolveCrossEpisodeLocationCluster(
        self,
        entities: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ResolveCrossEpisodeLocationCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ResolveCrossEpisodeObjectCluster(
        self,
        entities: List[types.Object],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ResolveCrossEpisodeObjectCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ResolveCrossEpisodeOrganizationCluster(
        self,
        entities: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ResolveCrossEpisodeOrganizationCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ResolveLocationCluster(
        self,
        entities: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ResolveLocationCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ResolveOrganizationCluster(
        self,
        entities: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ResolveOrganizationCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def SummarizeChunk(
        self,
        chunk_text: str,detail_level: str,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SummarizeChunk",
        {
          "chunk_text": chunk_text,"detail_level": detail_level,"max_tokens": max_tokens,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ValidateCypher(
        self,
        question: str,available_apoc_functions: List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ValidateCypher",
        {
          "question": question,"available_apoc_functions": available_apoc_functions,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ValidateCypherOld(
        self,
        question: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ValidateCypherOld",
        {
          "question": question,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    


__all__ = ["HttpRequest", "HttpStreamRequest"]