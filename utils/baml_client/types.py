###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401,F821
# flake8: noqa: E501,F401,F821
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class Agent(BaseModel):
    uuid: str
    agent_id: str
    name: str
    title: Optional[str] = None
    aliases: Union[List[str], Optional[None]] = None
    description: str
    traits: List[str]
    affiliated_org: Union[str, Optional[None]] = None
    sphere_of_influence: Optional[str] = None

class AgentParticipation(BaseModel):
    uuid: str
    agent: str
    event: str
    current_status: str
    emotional_state: str
    active_plans: List[str]
    beliefs: List[str]
    goals: List[str]

class BibleMetadata(BaseModel):
    detail_level: str
    chunks: int
    processing_time_seconds: float
    model: Optional[str] = None
    generated_at: Optional[str] = None

class CentralConflict(BaseModel):
    name: str
    description: str
    involved_characters: Optional[List[str]] = None

class Character(BaseModel):
    name: str
    description: str
    background: Optional[str] = None
    personality_traits: Optional[List[str]] = None
    motivations: Optional[str] = None
    relationships: Optional[List[str]] = None
    character_arc: Optional[str] = None
    role: Optional[str] = None
    detailed_profile: Optional[str] = None

class CharacterDynamic(BaseModel):
    character_name: str
    role: str
    arc_description: str

class Conflict(BaseModel):
    description: str
    type: Optional[str] = None
    involved_characters: Optional[List[str]] = None
    escalation_level: Optional[str] = None

class CypherQuery(BaseModel):
    query: str
    purpose: str

class Episode(BaseModel):
    title: str
    synopsis: str
    episode_number: int
    part_of_serial: str

class Event(BaseModel):
    title: str
    uuid: str
    description: str
    sequence_within_scene: int
    key_dialogue: List[str]
    agent_participations: List[str]
    object_involvements: List[str]
    next_event: Union[str, Optional[None]] = None

class EventInteractions(BaseModel):
    agent_participations: List["AgentParticipation"]
    object_involvements: List["ObjectInvolvement"]

class Location(BaseModel):
    uuid: str
    name: str
    description: str
    type: str

class MarkdownBible(BaseModel):
    markdown_content: str

class NarrativeStage(BaseModel):
    stage: str
    description: str

class NodeLabel(BaseModel):
    name: Union[Literal["Agent"], Literal["Organization"], Literal["Location"], Literal["Object"], Literal["Scene"], Literal["Event"], Literal["AgentParticipation"], Literal["ObjectInvolvement"]]

class Object(BaseModel):
    uuid: str
    name: str
    description: str
    purpose: str
    significance: str
    original_owner: Union[str, Optional[None]] = None

class ObjectInvolvement(BaseModel):
    uuid: str
    object: str
    event: str
    description_of_involvement: str
    object_status_before_event: str
    object_status_after_event: str

class Organization(BaseModel):
    uuid: str
    name: str
    description: str
    sphere_of_influence: str
    members: List[str]

class PlotPoint(BaseModel):
    description: str
    significance: Optional[str] = None
    characters_involved: Optional[List[str]] = None

class PrimaryEntities(BaseModel):
    agents: List["Agent"]
    organizations: List["Organization"]
    locations: List["Location"]
    objects: List["Object"]

class PropertyName(BaseModel):
    agent: Union[Literal["uuid"], Literal["name"], Literal["description"], Literal["traits"], Literal["affiliated_org"]]
    organization: Union[Literal["uuid"], Literal["name"], Literal["description"], Literal["sphere_of_influence"], Literal["members"]]
    location: Union[Literal["uuid"], Literal["name"], Literal["description"], Literal["type"]]
    object: Union[Literal["uuid"], Literal["name"], Literal["description"], Literal["purpose"], Literal["significance"], Literal["original_owner"]]
    scene: Union[Literal["uuid"], Literal["title"], Literal["description"], Literal["scene_number"], Literal["location"], Literal["next_scene"]]
    event: Union[Literal["uuid"], Literal["title"], Literal["description"], Literal["sequence_within_scene"], Literal["key_dialogue"], Literal["next_event"]]
    agentParticipation: Union[Literal["uuid"], Literal["agent"], Literal["event"], Literal["current_status"], Literal["emotional_state"]]
    objectInvolvement: Union[Literal["uuid"], Literal["object"], Literal["event"], Literal["description_of_involvement"]]

class RelationType(BaseModel):
    name: Union[Literal["NEXT_SCENE"], Literal["OCCURS_IN"], Literal["NEXT_EVENT"], Literal["PARTICIPATES_IN"], Literal["IN_EVENT"], Literal["INVOLVED_IN"], Literal["OWNS"], Literal["AFFILIATED_WITH"], Literal["PART_OF"], Literal["LOCATED_IN"]]

class ResolvedAgent(BaseModel):
    uuid: str
    agent_id: str
    name: str
    title: Optional[str] = None
    aliases: Optional[List[str]] = None
    description: str
    traits: List[str]
    affiliated_org: Union[str, Optional[None]] = None
    sphere_of_influence: Optional[str] = None
    source_uuids: Optional[List[str]] = None

class ResolvedLocation(BaseModel):
    uuid: str
    name: str
    description: str
    type: str
    source_uuids: Optional[List[str]] = None

class ResolvedObject(BaseModel):
    uuid: str
    name: str
    description: str
    purpose: str
    significance: str
    original_owner: Union[str, Optional[None]] = None
    source_uuids: Optional[List[str]] = None

class ResolvedOrganization(BaseModel):
    uuid: str
    name: str
    description: str
    sphere_of_influence: str
    members: Union[List[str], Optional[None]] = None
    source_uuids: Optional[List[str]] = None

class Scene(BaseModel):
    title: str
    description: str
    scene_number: int
    events: List[str]
    location: Union[str, Optional[None]] = None
    next_scene: Union[str, Optional[None]] = None

class SceneCharacter(BaseModel):
    name: str
    scene_description: str
    emotions: Optional[List[str]] = None
    relationships: Optional[List[str]] = None
    development_points: Optional[List[str]] = None

class SceneData(BaseModel):
    metadata: "SceneMetadata"
    events: List["Event"]

class SceneElements(BaseModel):
    scene_index: int
    scene_summary: str
    characters: List["SceneCharacter"]
    locations: List["SceneLocation"]
    themes: List["Theme"]
    conflicts: List["Conflict"]

class SceneLocation(BaseModel):
    name: str
    scene_description: str
    significance: Optional[str] = None

class SceneMetadata(BaseModel):
    uuid: Union[str, Optional[None]] = None
    title: str
    description: str
    scene_number: int
    location: Union[str, Optional[None]] = None
    next_scene: Union[str, Optional[None]] = None

class SetLocation(BaseModel):
    name: str
    description: str
    significance: Optional[str] = None

class StoryElements(BaseModel):
    characters: List["Character"]
    locations: List["SetLocation"]
    themes: List["Theme"]
    plot_points: List["PlotPoint"]
    conflicts: List["Conflict"]
    narrative_structure: Optional[List["NarrativeStage"]] = None
    character_dynamics: Optional[List["CharacterDynamic"]] = None
    central_conflicts: Optional[List["CentralConflict"]] = None

class Summary(BaseModel):
    summary_text: str
    narrative_structure: Optional[List["NarrativeStage"]] = None

class Theme(BaseModel):
    name: str
    description: str
    examples: Optional[List[str]] = None
    scene_manifestation: Optional[str] = None
