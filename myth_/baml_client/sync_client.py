###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, TypeVar, Union, TypedDict, Type, Literal, cast
from typing_extensions import NotRequired
import pprint

import baml_py
from pydantic import BaseModel, ValidationError, create_model

from . import partial_types, types
from .types import Checked, Check
from .type_builder import TypeBuilder
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME

OutputType = TypeVar('OutputType')

# Define the TypedDict with optional parameters having default values
class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]
    collector: NotRequired[Union[baml_py.baml_py.Collector, List[baml_py.baml_py.Collector]]]

class BamlSyncClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager)

    @property
    def stream(self):
      return self.__stream_client

    
    def ExtractAgentParticipations(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> List[types.AgentParticipation]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ExtractAgentParticipations",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"event": event,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.AgentParticipation], raw.cast_to(types, types, partial_types, False))
    
    def ExtractAgents(
        self,
        scene_text: str,story_synopsis: Optional[str],agent_name_to_uuid_mapping: Dict[str, str],scene_number: int,organizations: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> List[types.Agent]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ExtractAgents",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"agent_name_to_uuid_mapping": agent_name_to_uuid_mapping,"scene_number": scene_number,"organizations": organizations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Agent], raw.cast_to(types, types, partial_types, False))
    
    def ExtractEventInteractions(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> types.EventInteractions:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ExtractEventInteractions",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"event": event,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.EventInteractions, raw.cast_to(types, types, partial_types, False))
    
    def ExtractEvents(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> List[types.Event]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ExtractEvents",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Event], raw.cast_to(types, types, partial_types, False))
    
    def ExtractLocations(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> List[types.Location]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ExtractLocations",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Location], raw.cast_to(types, types, partial_types, False))
    
    def ExtractObjectInvolvements(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> List[types.ObjectInvolvement]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ExtractObjectInvolvements",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"event": event,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.ObjectInvolvement], raw.cast_to(types, types, partial_types, False))
    
    def ExtractObjects(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,agents: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> List[types.Object]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ExtractObjects",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,"agents": agents,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Object], raw.cast_to(types, types, partial_types, False))
    
    def ExtractOrganizations(
        self,
        scene_number: int,scene_text: str,story_synopsis: Optional[str],agents: List[types.Agent],organizations: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> List[types.Organization]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ExtractOrganizations",
        {
          "scene_number": scene_number,"scene_text": scene_text,"story_synopsis": story_synopsis,"agents": agents,"organizations": organizations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Organization], raw.cast_to(types, types, partial_types, False))
    
    def ExtractPrimaryEntities(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,agent_name_to_uuid_mapping: Dict[str, str],existing_organizations: List[types.Organization],existing_agents: List[types.Agent],registry_context: Optional[str],
        baml_options: BamlCallOptions = {},
    ) -> types.PrimaryEntities:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ExtractPrimaryEntities",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,"agent_name_to_uuid_mapping": agent_name_to_uuid_mapping,"existing_organizations": existing_organizations,"existing_agents": existing_agents,"registry_context": registry_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.PrimaryEntities, raw.cast_to(types, types, partial_types, False))
    
    def ExtractSceneData(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],scene_number: int,scene_uuid: str,locations: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> types.SceneData:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ExtractSceneData",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"scene_number": scene_number,"scene_uuid": scene_uuid,"locations": locations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.SceneData, raw.cast_to(types, types, partial_types, False))
    
    def ExtractSceneMetadata(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,locations: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> types.SceneMetadata:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ExtractSceneMetadata",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,"locations": locations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.SceneMetadata, raw.cast_to(types, types, partial_types, False))
    
    def ResolveAgentCluster(
        self,
        entities: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> List[types.ResolvedAgent]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ResolveAgentCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.ResolvedAgent], raw.cast_to(types, types, partial_types, False))
    
    def ResolveLocationCluster(
        self,
        entities: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> List[types.ResolvedLocation]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ResolveLocationCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.ResolvedLocation], raw.cast_to(types, types, partial_types, False))
    
    def ResolveObjectCluster(
        self,
        entities: List[types.Object],
        baml_options: BamlCallOptions = {},
    ) -> List[types.ResolvedObject]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ResolveObjectCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.ResolvedObject], raw.cast_to(types, types, partial_types, False))
    
    def ResolveOrganizationCluster(
        self,
        entities: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> List[types.ResolvedOrganization]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ResolveOrganizationCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.ResolvedOrganization], raw.cast_to(types, types, partial_types, False))
    
    def ValidateCypher(
        self,
        question: str,available_apoc_functions: List[str],
        baml_options: BamlCallOptions = {},
    ) -> types.CypherQuery:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ValidateCypher",
        {
          "question": question,"available_apoc_functions": available_apoc_functions,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.CypherQuery, raw.cast_to(types, types, partial_types, False))
    



class BamlStreamClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def ExtractAgentParticipations(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.AgentParticipation], List[types.AgentParticipation]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ExtractAgentParticipations",
        {
          "scene_text": scene_text,
          "registry_context": registry_context,
          "story_synopsis": story_synopsis,
          "event": event,
          "scene_number": scene_number,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.AgentParticipation], List[types.AgentParticipation]](
        raw,
        lambda x: cast(List[partial_types.AgentParticipation], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.AgentParticipation], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractAgents(
        self,
        scene_text: str,story_synopsis: Optional[str],agent_name_to_uuid_mapping: Dict[str, str],scene_number: int,organizations: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.Agent], List[types.Agent]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ExtractAgents",
        {
          "scene_text": scene_text,
          "story_synopsis": story_synopsis,
          "agent_name_to_uuid_mapping": agent_name_to_uuid_mapping,
          "scene_number": scene_number,
          "organizations": organizations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.Agent], List[types.Agent]](
        raw,
        lambda x: cast(List[partial_types.Agent], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Agent], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractEventInteractions(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.EventInteractions, types.EventInteractions]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ExtractEventInteractions",
        {
          "scene_text": scene_text,
          "registry_context": registry_context,
          "story_synopsis": story_synopsis,
          "event": event,
          "scene_number": scene_number,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.EventInteractions, types.EventInteractions](
        raw,
        lambda x: cast(partial_types.EventInteractions, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.EventInteractions, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractEvents(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.Event], List[types.Event]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ExtractEvents",
        {
          "scene_text": scene_text,
          "registry_context": registry_context,
          "story_synopsis": story_synopsis,
          "scene_number": scene_number,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.Event], List[types.Event]](
        raw,
        lambda x: cast(List[partial_types.Event], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Event], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractLocations(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.Location], List[types.Location]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ExtractLocations",
        {
          "scene_text": scene_text,
          "story_synopsis": story_synopsis,
          "scene_number": scene_number,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.Location], List[types.Location]](
        raw,
        lambda x: cast(List[partial_types.Location], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Location], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractObjectInvolvements(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.ObjectInvolvement], List[types.ObjectInvolvement]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ExtractObjectInvolvements",
        {
          "scene_text": scene_text,
          "registry_context": registry_context,
          "story_synopsis": story_synopsis,
          "event": event,
          "scene_number": scene_number,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.ObjectInvolvement], List[types.ObjectInvolvement]](
        raw,
        lambda x: cast(List[partial_types.ObjectInvolvement], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.ObjectInvolvement], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractObjects(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,agents: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.Object], List[types.Object]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ExtractObjects",
        {
          "scene_text": scene_text,
          "story_synopsis": story_synopsis,
          "scene_number": scene_number,
          "agents": agents,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.Object], List[types.Object]](
        raw,
        lambda x: cast(List[partial_types.Object], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Object], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractOrganizations(
        self,
        scene_number: int,scene_text: str,story_synopsis: Optional[str],agents: List[types.Agent],organizations: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.Organization], List[types.Organization]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ExtractOrganizations",
        {
          "scene_number": scene_number,
          "scene_text": scene_text,
          "story_synopsis": story_synopsis,
          "agents": agents,
          "organizations": organizations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.Organization], List[types.Organization]](
        raw,
        lambda x: cast(List[partial_types.Organization], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Organization], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractPrimaryEntities(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,agent_name_to_uuid_mapping: Dict[str, str],existing_organizations: List[types.Organization],existing_agents: List[types.Agent],registry_context: Optional[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.PrimaryEntities, types.PrimaryEntities]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ExtractPrimaryEntities",
        {
          "scene_text": scene_text,
          "story_synopsis": story_synopsis,
          "scene_number": scene_number,
          "agent_name_to_uuid_mapping": agent_name_to_uuid_mapping,
          "existing_organizations": existing_organizations,
          "existing_agents": existing_agents,
          "registry_context": registry_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.PrimaryEntities, types.PrimaryEntities](
        raw,
        lambda x: cast(partial_types.PrimaryEntities, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.PrimaryEntities, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractSceneData(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],scene_number: int,scene_uuid: str,locations: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.SceneData, types.SceneData]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ExtractSceneData",
        {
          "scene_text": scene_text,
          "registry_context": registry_context,
          "story_synopsis": story_synopsis,
          "scene_number": scene_number,
          "scene_uuid": scene_uuid,
          "locations": locations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.SceneData, types.SceneData](
        raw,
        lambda x: cast(partial_types.SceneData, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.SceneData, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractSceneMetadata(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,locations: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.SceneMetadata, types.SceneMetadata]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ExtractSceneMetadata",
        {
          "scene_text": scene_text,
          "story_synopsis": story_synopsis,
          "scene_number": scene_number,
          "locations": locations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.SceneMetadata, types.SceneMetadata](
        raw,
        lambda x: cast(partial_types.SceneMetadata, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.SceneMetadata, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ResolveAgentCluster(
        self,
        entities: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.ResolvedAgent], List[types.ResolvedAgent]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ResolveAgentCluster",
        {
          "entities": entities,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.ResolvedAgent], List[types.ResolvedAgent]](
        raw,
        lambda x: cast(List[partial_types.ResolvedAgent], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.ResolvedAgent], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ResolveLocationCluster(
        self,
        entities: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.ResolvedLocation], List[types.ResolvedLocation]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ResolveLocationCluster",
        {
          "entities": entities,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.ResolvedLocation], List[types.ResolvedLocation]](
        raw,
        lambda x: cast(List[partial_types.ResolvedLocation], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.ResolvedLocation], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ResolveObjectCluster(
        self,
        entities: List[types.Object],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.ResolvedObject], List[types.ResolvedObject]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ResolveObjectCluster",
        {
          "entities": entities,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.ResolvedObject], List[types.ResolvedObject]](
        raw,
        lambda x: cast(List[partial_types.ResolvedObject], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.ResolvedObject], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ResolveOrganizationCluster(
        self,
        entities: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.ResolvedOrganization], List[types.ResolvedOrganization]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ResolveOrganizationCluster",
        {
          "entities": entities,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.ResolvedOrganization], List[types.ResolvedOrganization]](
        raw,
        lambda x: cast(List[partial_types.ResolvedOrganization], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.ResolvedOrganization], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ValidateCypher(
        self,
        question: str,available_apoc_functions: List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.CypherQuery, types.CypherQuery]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ValidateCypher",
        {
          "question": question,
          "available_apoc_functions": available_apoc_functions,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.CypherQuery, types.CypherQuery](
        raw,
        lambda x: cast(partial_types.CypherQuery, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.CypherQuery, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    

b = BamlSyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)

__all__ = ["b"]