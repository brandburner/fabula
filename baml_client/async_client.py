###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, TypeVar, Union, TypedDict, Type, Literal, cast
from typing_extensions import NotRequired
import pprint

import baml_py
from pydantic import BaseModel, ValidationError, create_model

from . import partial_types, types
from .types import Checked, Check
from .type_builder import TypeBuilder
from .parser import LlmResponseParser, LlmStreamParser
from .async_request import AsyncHttpRequest, AsyncHttpStreamRequest
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME

OutputType = TypeVar('OutputType')


# Define the TypedDict with optional parameters having default values
class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]
    collector: NotRequired[Union[baml_py.baml_py.Collector, List[baml_py.baml_py.Collector]]]


class BamlAsyncClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"
    __http_request: "AsyncHttpRequest"
    __http_stream_request: "AsyncHttpStreamRequest"
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser
    __baml_options: BamlCallOptions

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager, baml_options)
      self.__http_request = AsyncHttpRequest(self.__runtime, self.__ctx_manager)
      self.__http_stream_request = AsyncHttpStreamRequest(self.__runtime, self.__ctx_manager)
      self.__llm_response_parser = LlmResponseParser(self.__runtime, self.__ctx_manager)
      self.__llm_stream_parser = LlmStreamParser(self.__runtime, self.__ctx_manager)
      self.__baml_options = baml_options or {}

    def with_options(
      self,
      tb: Optional[TypeBuilder] = None,
      client_registry: Optional[baml_py.baml_py.ClientRegistry] = None,
      collector: Optional[Union[baml_py.baml_py.Collector, List[baml_py.baml_py.Collector]]] = None,
    ) -> "BamlAsyncClient":
      """
      Returns a new instance of BamlAsyncClient with explicitly typed baml options
      for Python 3.8 compatibility.
      """
      new_options = self.__baml_options.copy()

      # Override if any keyword arguments were provided.
      if tb is not None:
          new_options["tb"] = tb
      if client_registry is not None:
          new_options["client_registry"] = client_registry
      if collector is not None:
          new_options["collector"] = collector

      return BamlAsyncClient(self.__runtime, self.__ctx_manager, new_options)

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser

    
    async def EnhanceCharacterProfile(
        self,
        character_name: str,character_description: str,relevant_chunks: List[str],
        baml_options: BamlCallOptions = {},
    ) -> types.Character:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "EnhanceCharacterProfile",
        {
          "character_name": character_name,"character_description": character_description,"relevant_chunks": relevant_chunks,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Character, raw.cast_to(types, types, partial_types, False))
    
    async def ExtractAgentParticipations(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> List[types.AgentParticipation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ExtractAgentParticipations",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"event": event,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.AgentParticipation], raw.cast_to(types, types, partial_types, False))
    
    async def ExtractAgents(
        self,
        scene_text: str,story_synopsis: Optional[str],agent_name_to_uuid_mapping: Dict[str, str],scene_number: int,organizations: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> List[types.Agent]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ExtractAgents",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"agent_name_to_uuid_mapping": agent_name_to_uuid_mapping,"scene_number": scene_number,"organizations": organizations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Agent], raw.cast_to(types, types, partial_types, False))
    
    async def ExtractEventInteractions(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> types.EventInteractions:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ExtractEventInteractions",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"event": event,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.EventInteractions, raw.cast_to(types, types, partial_types, False))
    
    async def ExtractEvents(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> List[types.Event]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ExtractEvents",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Event], raw.cast_to(types, types, partial_types, False))
    
    async def ExtractLocations(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> List[types.Location]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ExtractLocations",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Location], raw.cast_to(types, types, partial_types, False))
    
    async def ExtractObjectInvolvements(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> List[types.ObjectInvolvement]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ExtractObjectInvolvements",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"event": event,"scene_number": scene_number,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.ObjectInvolvement], raw.cast_to(types, types, partial_types, False))
    
    async def ExtractObjects(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,agents: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> List[types.Object]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ExtractObjects",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,"agents": agents,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Object], raw.cast_to(types, types, partial_types, False))
    
    async def ExtractOrganizations(
        self,
        scene_number: int,scene_text: str,story_synopsis: Optional[str],agents: List[types.Agent],organizations: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> List[types.Organization]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ExtractOrganizations",
        {
          "scene_number": scene_number,"scene_text": scene_text,"story_synopsis": story_synopsis,"agents": agents,"organizations": organizations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Organization], raw.cast_to(types, types, partial_types, False))
    
    async def ExtractPrimaryEntities(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,agent_name_to_uuid_mapping: Dict[str, str],existing_organizations: List[types.Organization],existing_agents: List[types.Agent],registry_context: Optional[str],
        baml_options: BamlCallOptions = {},
    ) -> types.PrimaryEntities:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ExtractPrimaryEntities",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,"agent_name_to_uuid_mapping": agent_name_to_uuid_mapping,"existing_organizations": existing_organizations,"existing_agents": existing_agents,"registry_context": registry_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.PrimaryEntities, raw.cast_to(types, types, partial_types, False))
    
    async def ExtractSceneData(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],scene_number: int,scene_uuid: str,locations: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> types.SceneData:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ExtractSceneData",
        {
          "scene_text": scene_text,"registry_context": registry_context,"story_synopsis": story_synopsis,"scene_number": scene_number,"scene_uuid": scene_uuid,"locations": locations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.SceneData, raw.cast_to(types, types, partial_types, False))
    
    async def ExtractSceneElements(
        self,
        scene_text: str,scene_index: int,scene_summary: Optional[str],known_characters: Optional[List[types.CharacterIndex]],
        baml_options: BamlCallOptions = {},
    ) -> types.SceneElements:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ExtractSceneElements",
        {
          "scene_text": scene_text,"scene_index": scene_index,"scene_summary": scene_summary,"known_characters": known_characters,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.SceneElements, raw.cast_to(types, types, partial_types, False))
    
    async def ExtractSceneMetadata(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,locations: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> types.SceneMetadata:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ExtractSceneMetadata",
        {
          "scene_text": scene_text,"story_synopsis": story_synopsis,"scene_number": scene_number,"locations": locations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.SceneMetadata, raw.cast_to(types, types, partial_types, False))
    
    async def GeneratePolishedExecutiveSummary(
        self,
        initial_summary: str,detail_level: str,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> types.Summary:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GeneratePolishedExecutiveSummary",
        {
          "initial_summary": initial_summary,"detail_level": detail_level,"max_tokens": max_tokens,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Summary, raw.cast_to(types, types, partial_types, False))
    
    async def GenerateStoryTreatment(
        self,
        full_script: str,max_tokens: int,
        baml_options: BamlCallOptions = {},
    ) -> types.Treatment:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateStoryTreatment",
        {
          "full_script": full_script,"max_tokens": max_tokens,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Treatment, raw.cast_to(types, types, partial_types, False))
    
    async def IdentifySceneHeadingPattern(
        self,
        script_sample: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SceneHeadingPatterns:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "IdentifySceneHeadingPattern",
        {
          "script_sample": script_sample,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.SceneHeadingPatterns, raw.cast_to(types, types, partial_types, False))
    
    async def MergeSceneElements(
        self,
        scene_elements: List[types.SceneElements],known_characters: Optional[List[types.CharacterIndex]],
        baml_options: BamlCallOptions = {},
    ) -> types.StoryElements:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "MergeSceneElements",
        {
          "scene_elements": scene_elements,"known_characters": known_characters,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.StoryElements, raw.cast_to(types, types, partial_types, False))
    
    async def MergeSummariesWithContext(
        self,
        summaries: List[str],story_treatment: Optional[types.Treatment],detail_level: str,is_final_merge: bool,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> types.Summary:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "MergeSummariesWithContext",
        {
          "summaries": summaries,"story_treatment": story_treatment,"detail_level": detail_level,"is_final_merge": is_final_merge,"max_tokens": max_tokens,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Summary, raw.cast_to(types, types, partial_types, False))
    
    async def PreScanCharacters(
        self,
        full_script: str,
        baml_options: BamlCallOptions = {},
    ) -> List[types.CharacterIndex]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "PreScanCharacters",
        {
          "full_script": full_script,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.CharacterIndex], raw.cast_to(types, types, partial_types, False))
    
    async def ResolveAgentCluster(
        self,
        entities: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> List[types.ResolvedAgent]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ResolveAgentCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.ResolvedAgent], raw.cast_to(types, types, partial_types, False))
    
    async def ResolveLocationCluster(
        self,
        entities: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> List[types.ResolvedLocation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ResolveLocationCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.ResolvedLocation], raw.cast_to(types, types, partial_types, False))
    
    async def ResolveObjectCluster(
        self,
        entities: List[types.Object],
        baml_options: BamlCallOptions = {},
    ) -> List[types.ResolvedObject]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ResolveObjectCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.ResolvedObject], raw.cast_to(types, types, partial_types, False))
    
    async def ResolveOrganizationCluster(
        self,
        entities: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> List[types.ResolvedOrganization]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ResolveOrganizationCluster",
        {
          "entities": entities,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.ResolvedOrganization], raw.cast_to(types, types, partial_types, False))
    
    async def SummarizeChunkWithContext(
        self,
        chunk_text: str,story_treatment: Optional[types.Treatment],detail_level: str,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> types.Summary:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "SummarizeChunkWithContext",
        {
          "chunk_text": chunk_text,"story_treatment": story_treatment,"detail_level": detail_level,"max_tokens": max_tokens,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Summary, raw.cast_to(types, types, partial_types, False))
    
    async def SynthesizeNarrativeFromElements(
        self,
        initial_summary: str,elements: types.StoryElements,detail_level: str,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> types.Summary:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "SynthesizeNarrativeFromElements",
        {
          "initial_summary": initial_summary,"elements": elements,"detail_level": detail_level,"max_tokens": max_tokens,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Summary, raw.cast_to(types, types, partial_types, False))
    
    async def TrackConflictTrajectory(
        self,
        all_scene_elements: List[types.SceneElements],
        baml_options: BamlCallOptions = {},
    ) -> List[types.ConflictArc]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "TrackConflictTrajectory",
        {
          "all_scene_elements": all_scene_elements,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.ConflictArc], raw.cast_to(types, types, partial_types, False))
    
    async def ValidateCypher(
        self,
        question: str,available_apoc_functions: List[str],
        baml_options: BamlCallOptions = {},
    ) -> types.CypherQuery:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ValidateCypher",
        {
          "question": question,"available_apoc_functions": available_apoc_functions,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.CypherQuery, raw.cast_to(types, types, partial_types, False))
    
    async def ValidateCypherOld(
        self,
        question: str,
        baml_options: BamlCallOptions = {},
    ) -> types.CypherQuery:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ValidateCypherOld",
        {
          "question": question,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.CypherQuery, raw.cast_to(types, types, partial_types, False))
    


class BamlStreamClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __baml_options: BamlCallOptions
    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__baml_options = baml_options or {}

    
    def EnhanceCharacterProfile(
        self,
        character_name: str,character_description: str,relevant_chunks: List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Character, types.Character]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "EnhanceCharacterProfile",
        {
          "character_name": character_name,
          "character_description": character_description,
          "relevant_chunks": relevant_chunks,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Character, types.Character](
        raw,
        lambda x: cast(partial_types.Character, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Character, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractAgentParticipations(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.AgentParticipation], List[types.AgentParticipation]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ExtractAgentParticipations",
        {
          "scene_text": scene_text,
          "registry_context": registry_context,
          "story_synopsis": story_synopsis,
          "event": event,
          "scene_number": scene_number,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.AgentParticipation], List[types.AgentParticipation]](
        raw,
        lambda x: cast(List[partial_types.AgentParticipation], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.AgentParticipation], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractAgents(
        self,
        scene_text: str,story_synopsis: Optional[str],agent_name_to_uuid_mapping: Dict[str, str],scene_number: int,organizations: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.Agent], List[types.Agent]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ExtractAgents",
        {
          "scene_text": scene_text,
          "story_synopsis": story_synopsis,
          "agent_name_to_uuid_mapping": agent_name_to_uuid_mapping,
          "scene_number": scene_number,
          "organizations": organizations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.Agent], List[types.Agent]](
        raw,
        lambda x: cast(List[partial_types.Agent], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Agent], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractEventInteractions(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.EventInteractions, types.EventInteractions]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ExtractEventInteractions",
        {
          "scene_text": scene_text,
          "registry_context": registry_context,
          "story_synopsis": story_synopsis,
          "event": event,
          "scene_number": scene_number,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.EventInteractions, types.EventInteractions](
        raw,
        lambda x: cast(partial_types.EventInteractions, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.EventInteractions, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractEvents(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.Event], List[types.Event]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ExtractEvents",
        {
          "scene_text": scene_text,
          "registry_context": registry_context,
          "story_synopsis": story_synopsis,
          "scene_number": scene_number,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.Event], List[types.Event]](
        raw,
        lambda x: cast(List[partial_types.Event], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Event], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractLocations(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.Location], List[types.Location]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ExtractLocations",
        {
          "scene_text": scene_text,
          "story_synopsis": story_synopsis,
          "scene_number": scene_number,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.Location], List[types.Location]](
        raw,
        lambda x: cast(List[partial_types.Location], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Location], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractObjectInvolvements(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],event: types.Event,scene_number: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.ObjectInvolvement], List[types.ObjectInvolvement]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ExtractObjectInvolvements",
        {
          "scene_text": scene_text,
          "registry_context": registry_context,
          "story_synopsis": story_synopsis,
          "event": event,
          "scene_number": scene_number,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.ObjectInvolvement], List[types.ObjectInvolvement]](
        raw,
        lambda x: cast(List[partial_types.ObjectInvolvement], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.ObjectInvolvement], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractObjects(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,agents: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.Object], List[types.Object]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ExtractObjects",
        {
          "scene_text": scene_text,
          "story_synopsis": story_synopsis,
          "scene_number": scene_number,
          "agents": agents,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.Object], List[types.Object]](
        raw,
        lambda x: cast(List[partial_types.Object], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Object], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractOrganizations(
        self,
        scene_number: int,scene_text: str,story_synopsis: Optional[str],agents: List[types.Agent],organizations: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.Organization], List[types.Organization]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ExtractOrganizations",
        {
          "scene_number": scene_number,
          "scene_text": scene_text,
          "story_synopsis": story_synopsis,
          "agents": agents,
          "organizations": organizations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.Organization], List[types.Organization]](
        raw,
        lambda x: cast(List[partial_types.Organization], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Organization], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractPrimaryEntities(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,agent_name_to_uuid_mapping: Dict[str, str],existing_organizations: List[types.Organization],existing_agents: List[types.Agent],registry_context: Optional[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.PrimaryEntities, types.PrimaryEntities]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ExtractPrimaryEntities",
        {
          "scene_text": scene_text,
          "story_synopsis": story_synopsis,
          "scene_number": scene_number,
          "agent_name_to_uuid_mapping": agent_name_to_uuid_mapping,
          "existing_organizations": existing_organizations,
          "existing_agents": existing_agents,
          "registry_context": registry_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.PrimaryEntities, types.PrimaryEntities](
        raw,
        lambda x: cast(partial_types.PrimaryEntities, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.PrimaryEntities, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractSceneData(
        self,
        scene_text: str,registry_context: Optional[str],story_synopsis: Optional[str],scene_number: int,scene_uuid: str,locations: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.SceneData, types.SceneData]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ExtractSceneData",
        {
          "scene_text": scene_text,
          "registry_context": registry_context,
          "story_synopsis": story_synopsis,
          "scene_number": scene_number,
          "scene_uuid": scene_uuid,
          "locations": locations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.SceneData, types.SceneData](
        raw,
        lambda x: cast(partial_types.SceneData, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.SceneData, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractSceneElements(
        self,
        scene_text: str,scene_index: int,scene_summary: Optional[str],known_characters: Optional[List[types.CharacterIndex]],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.SceneElements, types.SceneElements]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ExtractSceneElements",
        {
          "scene_text": scene_text,
          "scene_index": scene_index,
          "scene_summary": scene_summary,
          "known_characters": known_characters,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.SceneElements, types.SceneElements](
        raw,
        lambda x: cast(partial_types.SceneElements, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.SceneElements, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractSceneMetadata(
        self,
        scene_text: str,story_synopsis: Optional[str],scene_number: int,locations: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.SceneMetadata, types.SceneMetadata]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ExtractSceneMetadata",
        {
          "scene_text": scene_text,
          "story_synopsis": story_synopsis,
          "scene_number": scene_number,
          "locations": locations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.SceneMetadata, types.SceneMetadata](
        raw,
        lambda x: cast(partial_types.SceneMetadata, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.SceneMetadata, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GeneratePolishedExecutiveSummary(
        self,
        initial_summary: str,detail_level: str,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Summary, types.Summary]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GeneratePolishedExecutiveSummary",
        {
          "initial_summary": initial_summary,
          "detail_level": detail_level,
          "max_tokens": max_tokens,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Summary, types.Summary](
        raw,
        lambda x: cast(partial_types.Summary, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Summary, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateStoryTreatment(
        self,
        full_script: str,max_tokens: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Treatment, types.Treatment]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateStoryTreatment",
        {
          "full_script": full_script,
          "max_tokens": max_tokens,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Treatment, types.Treatment](
        raw,
        lambda x: cast(partial_types.Treatment, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Treatment, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def IdentifySceneHeadingPattern(
        self,
        script_sample: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.SceneHeadingPatterns, types.SceneHeadingPatterns]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "IdentifySceneHeadingPattern",
        {
          "script_sample": script_sample,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.SceneHeadingPatterns, types.SceneHeadingPatterns](
        raw,
        lambda x: cast(partial_types.SceneHeadingPatterns, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.SceneHeadingPatterns, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def MergeSceneElements(
        self,
        scene_elements: List[types.SceneElements],known_characters: Optional[List[types.CharacterIndex]],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.StoryElements, types.StoryElements]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "MergeSceneElements",
        {
          "scene_elements": scene_elements,
          "known_characters": known_characters,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.StoryElements, types.StoryElements](
        raw,
        lambda x: cast(partial_types.StoryElements, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.StoryElements, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def MergeSummariesWithContext(
        self,
        summaries: List[str],story_treatment: Optional[types.Treatment],detail_level: str,is_final_merge: bool,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Summary, types.Summary]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "MergeSummariesWithContext",
        {
          "summaries": summaries,
          "story_treatment": story_treatment,
          "detail_level": detail_level,
          "is_final_merge": is_final_merge,
          "max_tokens": max_tokens,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Summary, types.Summary](
        raw,
        lambda x: cast(partial_types.Summary, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Summary, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def PreScanCharacters(
        self,
        full_script: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.CharacterIndex], List[types.CharacterIndex]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "PreScanCharacters",
        {
          "full_script": full_script,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.CharacterIndex], List[types.CharacterIndex]](
        raw,
        lambda x: cast(List[partial_types.CharacterIndex], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.CharacterIndex], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ResolveAgentCluster(
        self,
        entities: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.ResolvedAgent], List[types.ResolvedAgent]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ResolveAgentCluster",
        {
          "entities": entities,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.ResolvedAgent], List[types.ResolvedAgent]](
        raw,
        lambda x: cast(List[partial_types.ResolvedAgent], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.ResolvedAgent], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ResolveLocationCluster(
        self,
        entities: List[types.Location],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.ResolvedLocation], List[types.ResolvedLocation]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ResolveLocationCluster",
        {
          "entities": entities,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.ResolvedLocation], List[types.ResolvedLocation]](
        raw,
        lambda x: cast(List[partial_types.ResolvedLocation], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.ResolvedLocation], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ResolveObjectCluster(
        self,
        entities: List[types.Object],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.ResolvedObject], List[types.ResolvedObject]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ResolveObjectCluster",
        {
          "entities": entities,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.ResolvedObject], List[types.ResolvedObject]](
        raw,
        lambda x: cast(List[partial_types.ResolvedObject], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.ResolvedObject], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ResolveOrganizationCluster(
        self,
        entities: List[types.Organization],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.ResolvedOrganization], List[types.ResolvedOrganization]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ResolveOrganizationCluster",
        {
          "entities": entities,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.ResolvedOrganization], List[types.ResolvedOrganization]](
        raw,
        lambda x: cast(List[partial_types.ResolvedOrganization], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.ResolvedOrganization], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def SummarizeChunkWithContext(
        self,
        chunk_text: str,story_treatment: Optional[types.Treatment],detail_level: str,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Summary, types.Summary]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "SummarizeChunkWithContext",
        {
          "chunk_text": chunk_text,
          "story_treatment": story_treatment,
          "detail_level": detail_level,
          "max_tokens": max_tokens,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Summary, types.Summary](
        raw,
        lambda x: cast(partial_types.Summary, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Summary, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def SynthesizeNarrativeFromElements(
        self,
        initial_summary: str,elements: types.StoryElements,detail_level: str,max_tokens: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Summary, types.Summary]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "SynthesizeNarrativeFromElements",
        {
          "initial_summary": initial_summary,
          "elements": elements,
          "detail_level": detail_level,
          "max_tokens": max_tokens,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Summary, types.Summary](
        raw,
        lambda x: cast(partial_types.Summary, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Summary, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def TrackConflictTrajectory(
        self,
        all_scene_elements: List[types.SceneElements],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.ConflictArc], List[types.ConflictArc]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "TrackConflictTrajectory",
        {
          "all_scene_elements": all_scene_elements,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.ConflictArc], List[types.ConflictArc]](
        raw,
        lambda x: cast(List[partial_types.ConflictArc], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.ConflictArc], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ValidateCypher(
        self,
        question: str,available_apoc_functions: List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.CypherQuery, types.CypherQuery]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ValidateCypher",
        {
          "question": question,
          "available_apoc_functions": available_apoc_functions,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.CypherQuery, types.CypherQuery](
        raw,
        lambda x: cast(partial_types.CypherQuery, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.CypherQuery, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ValidateCypherOld(
        self,
        question: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.CypherQuery, types.CypherQuery]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ValidateCypherOld",
        {
          "question": question,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.CypherQuery, types.CypherQuery](
        raw,
        lambda x: cast(partial_types.CypherQuery, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.CypherQuery, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    


b = BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)

__all__ = ["b"]