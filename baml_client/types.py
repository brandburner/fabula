###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union, TypeAlias


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class Agent(BaseModel):
    uuid: str
    agent_id: str
    name: str
    title: Optional[str] = None
    aliases: Union[List[str], Optional[None]]
    description: str
    traits: List[str]
    affiliated_org: Union[str, Optional[None]]
    sphere_of_influence: Optional[str] = None

class AgentParticipation(BaseModel):
    uuid: str
    agent: str
    event: str
    current_status: str
    emotional_state: str
    active_plans: List[str]
    beliefs: List[str]
    goals: List[str]

class Episode(BaseModel):
    title: str
    synopsis: str
    episode_number: int
    part_of_serial: str

class Event(BaseModel):
    title: str
    uuid: str
    description: str
    sequence_within_scene: int
    key_dialogue: List[str]
    agent_participations: List[str]
    object_involvements: List[str]
    next_event: Union[str, Optional[None]]

class Location(BaseModel):
    uuid: str
    name: str
    description: str
    type: str

class Object(BaseModel):
    uuid: str
    name: str
    description: str
    purpose: str
    significance: str
    original_owner: Union[str, Optional[None]]

class ObjectInvolvement(BaseModel):
    uuid: str
    object: str
    event: str
    description_of_involvement: str
    object_status_before_event: str
    object_status_after_event: str

class Organization(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: str
    name: str
    description: str
    sphere_of_influence: str
    members: List[str]

class ResolvedAgent(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: str
    agent_id: str
    name: str
    title: Optional[str] = None
    aliases: Optional[List[str]] = None
    description: str
    traits: List[str]
    affiliated_org: Union[str, Optional[None]]
    sphere_of_influence: Optional[str] = None
    source_uuids: Optional[List[str]] = None

class ResolvedLocation(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: str
    name: str
    description: str
    type: str
    source_uuids: Optional[List[str]] = None

class ResolvedObject(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: str
    name: str
    description: str
    purpose: str
    significance: str
    original_owner: Optional[str] = None
    source_uuids: Optional[List[str]] = None

class ResolvedOrganization(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: str
    name: str
    description: str
    sphere_of_influence: str
    members: Optional[List[str]] = None
    source_uuids: Optional[List[str]] = None

class Resume(BaseModel):
    name: str
    email: str
    experience: List[str]
    skills: List[str]

class Scene(BaseModel):
    title: str
    description: str
    scene_number: int
    events: List[str]
    location: str
    next_scene: Union[str, Optional[None]]

class SceneMetadata(BaseModel):
    uuid: Union[str, Optional[None]]
    title: str
    description: str
    scene_number: int
    location: str
    next_scene: Union[str, Optional[None]]
