###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder
from baml_py.type_builder import TypeBuilder as _TypeBuilder, ClassPropertyBuilder

class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["Agent","AgentParticipation","Episode","Event","Location","Object","ObjectInvolvement","Organization","ResolvedAgent","ResolvedLocation","ResolvedObject","ResolvedOrganization","Resume","Scene","SceneMetadata",]
        ), enums=set(
          []
        ))


    
    @property
    def Agent(self) -> "AgentBuilder":
        return AgentBuilder(self)


    
    @property
    def AgentParticipation(self) -> "AgentParticipationBuilder":
        return AgentParticipationBuilder(self)


    
    @property
    def Episode(self) -> "EpisodeBuilder":
        return EpisodeBuilder(self)


    
    @property
    def Event(self) -> "EventBuilder":
        return EventBuilder(self)


    
    @property
    def Location(self) -> "LocationBuilder":
        return LocationBuilder(self)


    
    @property
    def Object(self) -> "ObjectBuilder":
        return ObjectBuilder(self)


    
    @property
    def ObjectInvolvement(self) -> "ObjectInvolvementBuilder":
        return ObjectInvolvementBuilder(self)


    
    @property
    def Organization(self) -> "OrganizationBuilder":
        return OrganizationBuilder(self)


    
    @property
    def ResolvedAgent(self) -> "ResolvedAgentBuilder":
        return ResolvedAgentBuilder(self)


    
    @property
    def ResolvedLocation(self) -> "ResolvedLocationBuilder":
        return ResolvedLocationBuilder(self)


    
    @property
    def ResolvedObject(self) -> "ResolvedObjectBuilder":
        return ResolvedObjectBuilder(self)


    
    @property
    def ResolvedOrganization(self) -> "ResolvedOrganizationBuilder":
        return ResolvedOrganizationBuilder(self)


    
    @property
    def Scene(self) -> "SceneBuilder":
        return SceneBuilder(self)





class AgentBuilder:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self.__bldr = _tb.class_("Agent")
        self.__properties: typing.Set[str] = set([ "uuid",  "agent_id",  "name",  "title",  "aliases",  "description",  "traits",  "affiliated_org",  "sphere_of_influence", ])
        self.__props = AgentProperties(self.__bldr, self.__properties)

    def type(self) -> FieldType:
        return self.__bldr.field()

    @property
    def props(self) -> "AgentProperties":
        return self.__props
    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyBuilder]]:
        return [(name, ClassPropertyBuilder(self.__bldr.property(name))) for name in self.__properties]

    def add_property(self, name: str, type: FieldType) -> ClassPropertyBuilder:
        if name in self.__properties:
            raise ValueError(f"Property {name} already exists.")
        return ClassPropertyBuilder(self.__bldr.property(name).type(type))

class AgentProperties:
    def __init__(self, cls_bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = cls_bldr
        self.__properties = properties

    

    @property
    def uuid(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("uuid"))

    @property
    def agent_id(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("agent_id"))

    @property
    def name(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("name"))

    @property
    def title(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("title"))

    @property
    def aliases(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("aliases"))

    @property
    def description(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("description"))

    @property
    def traits(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("traits"))

    @property
    def affiliated_org(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("affiliated_org"))

    @property
    def sphere_of_influence(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("sphere_of_influence"))

    def __getattr__(self, name: str) -> ClassPropertyBuilder:
        if name not in self.__properties:
            raise AttributeError(f"Property {name} not found.")
        return ClassPropertyBuilder(self.__bldr.property(name))

class AgentParticipationBuilder:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self.__bldr = _tb.class_("AgentParticipation")
        self.__properties: typing.Set[str] = set([ "uuid",  "agent",  "event",  "current_status",  "emotional_state",  "active_plans",  "beliefs",  "goals", ])
        self.__props = AgentParticipationProperties(self.__bldr, self.__properties)

    def type(self) -> FieldType:
        return self.__bldr.field()

    @property
    def props(self) -> "AgentParticipationProperties":
        return self.__props
    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyBuilder]]:
        return [(name, ClassPropertyBuilder(self.__bldr.property(name))) for name in self.__properties]

    def add_property(self, name: str, type: FieldType) -> ClassPropertyBuilder:
        if name in self.__properties:
            raise ValueError(f"Property {name} already exists.")
        return ClassPropertyBuilder(self.__bldr.property(name).type(type))

class AgentParticipationProperties:
    def __init__(self, cls_bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = cls_bldr
        self.__properties = properties

    

    @property
    def uuid(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("uuid"))

    @property
    def agent(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("agent"))

    @property
    def event(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("event"))

    @property
    def current_status(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("current_status"))

    @property
    def emotional_state(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("emotional_state"))

    @property
    def active_plans(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("active_plans"))

    @property
    def beliefs(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("beliefs"))

    @property
    def goals(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("goals"))

    def __getattr__(self, name: str) -> ClassPropertyBuilder:
        if name not in self.__properties:
            raise AttributeError(f"Property {name} not found.")
        return ClassPropertyBuilder(self.__bldr.property(name))

class EpisodeBuilder:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self.__bldr = _tb.class_("Episode")
        self.__properties: typing.Set[str] = set([ "title",  "synopsis",  "episode_number",  "part_of_serial", ])
        self.__props = EpisodeProperties(self.__bldr, self.__properties)

    def type(self) -> FieldType:
        return self.__bldr.field()

    @property
    def props(self) -> "EpisodeProperties":
        return self.__props
    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyBuilder]]:
        return [(name, ClassPropertyBuilder(self.__bldr.property(name))) for name in self.__properties]

    def add_property(self, name: str, type: FieldType) -> ClassPropertyBuilder:
        if name in self.__properties:
            raise ValueError(f"Property {name} already exists.")
        return ClassPropertyBuilder(self.__bldr.property(name).type(type))

class EpisodeProperties:
    def __init__(self, cls_bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = cls_bldr
        self.__properties = properties

    

    @property
    def title(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("title"))

    @property
    def synopsis(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("synopsis"))

    @property
    def episode_number(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("episode_number"))

    @property
    def part_of_serial(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("part_of_serial"))

    def __getattr__(self, name: str) -> ClassPropertyBuilder:
        if name not in self.__properties:
            raise AttributeError(f"Property {name} not found.")
        return ClassPropertyBuilder(self.__bldr.property(name))

class EventBuilder:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self.__bldr = _tb.class_("Event")
        self.__properties: typing.Set[str] = set([ "title",  "uuid",  "description",  "sequence_within_scene",  "key_dialogue",  "agent_participations",  "object_involvements",  "next_event", ])
        self.__props = EventProperties(self.__bldr, self.__properties)

    def type(self) -> FieldType:
        return self.__bldr.field()

    @property
    def props(self) -> "EventProperties":
        return self.__props
    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyBuilder]]:
        return [(name, ClassPropertyBuilder(self.__bldr.property(name))) for name in self.__properties]

    def add_property(self, name: str, type: FieldType) -> ClassPropertyBuilder:
        if name in self.__properties:
            raise ValueError(f"Property {name} already exists.")
        return ClassPropertyBuilder(self.__bldr.property(name).type(type))

class EventProperties:
    def __init__(self, cls_bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = cls_bldr
        self.__properties = properties

    

    @property
    def title(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("title"))

    @property
    def uuid(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("uuid"))

    @property
    def description(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("description"))

    @property
    def sequence_within_scene(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("sequence_within_scene"))

    @property
    def key_dialogue(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("key_dialogue"))

    @property
    def agent_participations(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("agent_participations"))

    @property
    def object_involvements(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("object_involvements"))

    @property
    def next_event(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("next_event"))

    def __getattr__(self, name: str) -> ClassPropertyBuilder:
        if name not in self.__properties:
            raise AttributeError(f"Property {name} not found.")
        return ClassPropertyBuilder(self.__bldr.property(name))

class LocationBuilder:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self.__bldr = _tb.class_("Location")
        self.__properties: typing.Set[str] = set([ "uuid",  "name",  "description",  "type", ])
        self.__props = LocationProperties(self.__bldr, self.__properties)

    def type(self) -> FieldType:
        return self.__bldr.field()

    @property
    def props(self) -> "LocationProperties":
        return self.__props
    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyBuilder]]:
        return [(name, ClassPropertyBuilder(self.__bldr.property(name))) for name in self.__properties]

    def add_property(self, name: str, type: FieldType) -> ClassPropertyBuilder:
        if name in self.__properties:
            raise ValueError(f"Property {name} already exists.")
        return ClassPropertyBuilder(self.__bldr.property(name).type(type))

class LocationProperties:
    def __init__(self, cls_bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = cls_bldr
        self.__properties = properties

    

    @property
    def uuid(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("uuid"))

    @property
    def name(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("name"))

    @property
    def description(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("description"))

    @property
    def type(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("type"))

    def __getattr__(self, name: str) -> ClassPropertyBuilder:
        if name not in self.__properties:
            raise AttributeError(f"Property {name} not found.")
        return ClassPropertyBuilder(self.__bldr.property(name))

class ObjectBuilder:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self.__bldr = _tb.class_("Object")
        self.__properties: typing.Set[str] = set([ "uuid",  "name",  "description",  "purpose",  "significance",  "original_owner", ])
        self.__props = ObjectProperties(self.__bldr, self.__properties)

    def type(self) -> FieldType:
        return self.__bldr.field()

    @property
    def props(self) -> "ObjectProperties":
        return self.__props
    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyBuilder]]:
        return [(name, ClassPropertyBuilder(self.__bldr.property(name))) for name in self.__properties]

    def add_property(self, name: str, type: FieldType) -> ClassPropertyBuilder:
        if name in self.__properties:
            raise ValueError(f"Property {name} already exists.")
        return ClassPropertyBuilder(self.__bldr.property(name).type(type))

class ObjectProperties:
    def __init__(self, cls_bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = cls_bldr
        self.__properties = properties

    

    @property
    def uuid(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("uuid"))

    @property
    def name(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("name"))

    @property
    def description(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("description"))

    @property
    def purpose(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("purpose"))

    @property
    def significance(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("significance"))

    @property
    def original_owner(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("original_owner"))

    def __getattr__(self, name: str) -> ClassPropertyBuilder:
        if name not in self.__properties:
            raise AttributeError(f"Property {name} not found.")
        return ClassPropertyBuilder(self.__bldr.property(name))

class ObjectInvolvementBuilder:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self.__bldr = _tb.class_("ObjectInvolvement")
        self.__properties: typing.Set[str] = set([ "uuid",  "object",  "event",  "description_of_involvement",  "object_status_before_event",  "object_status_after_event", ])
        self.__props = ObjectInvolvementProperties(self.__bldr, self.__properties)

    def type(self) -> FieldType:
        return self.__bldr.field()

    @property
    def props(self) -> "ObjectInvolvementProperties":
        return self.__props
    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyBuilder]]:
        return [(name, ClassPropertyBuilder(self.__bldr.property(name))) for name in self.__properties]

    def add_property(self, name: str, type: FieldType) -> ClassPropertyBuilder:
        if name in self.__properties:
            raise ValueError(f"Property {name} already exists.")
        return ClassPropertyBuilder(self.__bldr.property(name).type(type))

class ObjectInvolvementProperties:
    def __init__(self, cls_bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = cls_bldr
        self.__properties = properties

    

    @property
    def uuid(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("uuid"))

    @property
    def object(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("object"))

    @property
    def event(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("event"))

    @property
    def description_of_involvement(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("description_of_involvement"))

    @property
    def object_status_before_event(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("object_status_before_event"))

    @property
    def object_status_after_event(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("object_status_after_event"))

    def __getattr__(self, name: str) -> ClassPropertyBuilder:
        if name not in self.__properties:
            raise AttributeError(f"Property {name} not found.")
        return ClassPropertyBuilder(self.__bldr.property(name))

class OrganizationBuilder:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self.__bldr = _tb.class_("Organization")
        self.__properties: typing.Set[str] = set([ "uuid",  "name",  "description",  "sphere_of_influence",  "members", ])
        self.__props = OrganizationProperties(self.__bldr, self.__properties)

    def type(self) -> FieldType:
        return self.__bldr.field()

    @property
    def props(self) -> "OrganizationProperties":
        return self.__props
    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyBuilder]]:
        return [(name, ClassPropertyBuilder(self.__bldr.property(name))) for name in self.__properties]

    def add_property(self, name: str, type: FieldType) -> ClassPropertyBuilder:
        if name in self.__properties:
            raise ValueError(f"Property {name} already exists.")
        return ClassPropertyBuilder(self.__bldr.property(name).type(type))

class OrganizationProperties:
    def __init__(self, cls_bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = cls_bldr
        self.__properties = properties

    

    @property
    def uuid(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("uuid"))

    @property
    def name(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("name"))

    @property
    def description(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("description"))

    @property
    def sphere_of_influence(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("sphere_of_influence"))

    @property
    def members(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("members"))

    def __getattr__(self, name: str) -> ClassPropertyBuilder:
        if name not in self.__properties:
            raise AttributeError(f"Property {name} not found.")
        return ClassPropertyBuilder(self.__bldr.property(name))

class ResolvedAgentBuilder:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self.__bldr = _tb.class_("ResolvedAgent")
        self.__properties: typing.Set[str] = set([ "uuid",  "agent_id",  "name",  "title",  "aliases",  "description",  "traits",  "affiliated_org",  "sphere_of_influence",  "source_uuids", ])
        self.__props = ResolvedAgentProperties(self.__bldr, self.__properties)

    def type(self) -> FieldType:
        return self.__bldr.field()

    @property
    def props(self) -> "ResolvedAgentProperties":
        return self.__props
    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyBuilder]]:
        return [(name, ClassPropertyBuilder(self.__bldr.property(name))) for name in self.__properties]

    def add_property(self, name: str, type: FieldType) -> ClassPropertyBuilder:
        if name in self.__properties:
            raise ValueError(f"Property {name} already exists.")
        return ClassPropertyBuilder(self.__bldr.property(name).type(type))

class ResolvedAgentProperties:
    def __init__(self, cls_bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = cls_bldr
        self.__properties = properties

    

    @property
    def uuid(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("uuid"))

    @property
    def agent_id(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("agent_id"))

    @property
    def name(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("name"))

    @property
    def title(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("title"))

    @property
    def aliases(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("aliases"))

    @property
    def description(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("description"))

    @property
    def traits(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("traits"))

    @property
    def affiliated_org(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("affiliated_org"))

    @property
    def sphere_of_influence(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("sphere_of_influence"))

    @property
    def source_uuids(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("source_uuids"))

    def __getattr__(self, name: str) -> ClassPropertyBuilder:
        if name not in self.__properties:
            raise AttributeError(f"Property {name} not found.")
        return ClassPropertyBuilder(self.__bldr.property(name))

class ResolvedLocationBuilder:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self.__bldr = _tb.class_("ResolvedLocation")
        self.__properties: typing.Set[str] = set([ "uuid",  "name",  "description",  "type",  "source_uuids", ])
        self.__props = ResolvedLocationProperties(self.__bldr, self.__properties)

    def type(self) -> FieldType:
        return self.__bldr.field()

    @property
    def props(self) -> "ResolvedLocationProperties":
        return self.__props
    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyBuilder]]:
        return [(name, ClassPropertyBuilder(self.__bldr.property(name))) for name in self.__properties]

    def add_property(self, name: str, type: FieldType) -> ClassPropertyBuilder:
        if name in self.__properties:
            raise ValueError(f"Property {name} already exists.")
        return ClassPropertyBuilder(self.__bldr.property(name).type(type))

class ResolvedLocationProperties:
    def __init__(self, cls_bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = cls_bldr
        self.__properties = properties

    

    @property
    def uuid(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("uuid"))

    @property
    def name(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("name"))

    @property
    def description(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("description"))

    @property
    def type(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("type"))

    @property
    def source_uuids(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("source_uuids"))

    def __getattr__(self, name: str) -> ClassPropertyBuilder:
        if name not in self.__properties:
            raise AttributeError(f"Property {name} not found.")
        return ClassPropertyBuilder(self.__bldr.property(name))

class ResolvedObjectBuilder:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self.__bldr = _tb.class_("ResolvedObject")
        self.__properties: typing.Set[str] = set([ "uuid",  "name",  "description",  "purpose",  "significance",  "original_owner",  "source_uuids", ])
        self.__props = ResolvedObjectProperties(self.__bldr, self.__properties)

    def type(self) -> FieldType:
        return self.__bldr.field()

    @property
    def props(self) -> "ResolvedObjectProperties":
        return self.__props
    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyBuilder]]:
        return [(name, ClassPropertyBuilder(self.__bldr.property(name))) for name in self.__properties]

    def add_property(self, name: str, type: FieldType) -> ClassPropertyBuilder:
        if name in self.__properties:
            raise ValueError(f"Property {name} already exists.")
        return ClassPropertyBuilder(self.__bldr.property(name).type(type))

class ResolvedObjectProperties:
    def __init__(self, cls_bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = cls_bldr
        self.__properties = properties

    

    @property
    def uuid(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("uuid"))

    @property
    def name(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("name"))

    @property
    def description(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("description"))

    @property
    def purpose(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("purpose"))

    @property
    def significance(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("significance"))

    @property
    def original_owner(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("original_owner"))

    @property
    def source_uuids(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("source_uuids"))

    def __getattr__(self, name: str) -> ClassPropertyBuilder:
        if name not in self.__properties:
            raise AttributeError(f"Property {name} not found.")
        return ClassPropertyBuilder(self.__bldr.property(name))

class ResolvedOrganizationBuilder:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self.__bldr = _tb.class_("ResolvedOrganization")
        self.__properties: typing.Set[str] = set([ "uuid",  "name",  "description",  "sphere_of_influence",  "members",  "source_uuids", ])
        self.__props = ResolvedOrganizationProperties(self.__bldr, self.__properties)

    def type(self) -> FieldType:
        return self.__bldr.field()

    @property
    def props(self) -> "ResolvedOrganizationProperties":
        return self.__props
    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyBuilder]]:
        return [(name, ClassPropertyBuilder(self.__bldr.property(name))) for name in self.__properties]

    def add_property(self, name: str, type: FieldType) -> ClassPropertyBuilder:
        if name in self.__properties:
            raise ValueError(f"Property {name} already exists.")
        return ClassPropertyBuilder(self.__bldr.property(name).type(type))

class ResolvedOrganizationProperties:
    def __init__(self, cls_bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = cls_bldr
        self.__properties = properties

    

    @property
    def uuid(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("uuid"))

    @property
    def name(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("name"))

    @property
    def description(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("description"))

    @property
    def sphere_of_influence(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("sphere_of_influence"))

    @property
    def members(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("members"))

    @property
    def source_uuids(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("source_uuids"))

    def __getattr__(self, name: str) -> ClassPropertyBuilder:
        if name not in self.__properties:
            raise AttributeError(f"Property {name} not found.")
        return ClassPropertyBuilder(self.__bldr.property(name))

class SceneBuilder:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self.__bldr = _tb.class_("Scene")
        self.__properties: typing.Set[str] = set([ "title",  "description",  "scene_number",  "events",  "location",  "next_scene", ])
        self.__props = SceneProperties(self.__bldr, self.__properties)

    def type(self) -> FieldType:
        return self.__bldr.field()

    @property
    def props(self) -> "SceneProperties":
        return self.__props
    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyBuilder]]:
        return [(name, ClassPropertyBuilder(self.__bldr.property(name))) for name in self.__properties]

    def add_property(self, name: str, type: FieldType) -> ClassPropertyBuilder:
        if name in self.__properties:
            raise ValueError(f"Property {name} already exists.")
        return ClassPropertyBuilder(self.__bldr.property(name).type(type))

class SceneProperties:
    def __init__(self, cls_bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = cls_bldr
        self.__properties = properties

    

    @property
    def title(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("title"))

    @property
    def description(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("description"))

    @property
    def scene_number(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("scene_number"))

    @property
    def events(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("events"))

    @property
    def location(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("location"))

    @property
    def next_scene(self) -> ClassPropertyBuilder:
        return ClassPropertyBuilder(self.__bldr.property("next_scene"))

    def __getattr__(self, name: str) -> ClassPropertyBuilder:
        if name not in self.__properties:
            raise AttributeError(f"Property {name} not found.")
        return ClassPropertyBuilder(self.__bldr.property(name))





__all__ = ["TypeBuilder"]