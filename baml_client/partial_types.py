###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, List, Optional, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################


class Agent(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: Optional[str] = None
    agent_id: Optional[str] = None
    name: Optional[str] = None
    title: Optional[str] = None
    description: Optional[str] = None
    traits: List[Optional[str]]
    affiliated_org: Optional[str] = None
    sphere_of_influence: Optional[str] = None

class AgentParticipation(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: Optional[str] = None
    agent: Optional[str] = None
    event: Optional[str] = None
    current_status: Optional[str] = None
    emotional_state: Optional[str] = None
    active_plans: List[Optional[str]]
    beliefs: List[Optional[str]]
    goals: List[Optional[str]]

class CastCrew(BaseModel):
    cast: Optional["Person"] = None
    uncredited_cast: Optional["Person"] = None
    crew: Optional["Person"] = None

class Continuity(BaseModel):
    continuity_notes: List[Optional[str]]

class Episode(BaseModel):
    model_config = ConfigDict(extra='allow')
    title: Optional[str] = None
    synopsis: Optional[str] = None
    episode_number: Optional[int] = None
    part_of_serial: Optional[str] = None

class EpisodePlot(BaseModel):
    plot_summary: Optional[str] = None

class Event(BaseModel):
    model_config = ConfigDict(extra='allow')
    title: Optional[str] = None
    uuid: Optional[str] = None
    description: Optional[str] = None
    sequence_within_scene: Optional[int] = None
    key_dialogue: List[Optional[str]]
    agent_participations: List[Optional[str]]
    object_involvements: List[Optional[str]]
    next_event: Optional[str] = None

class HomeRelease(BaseModel):
    releases: Optional["Release"] = None

class Location(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    type: Optional[str] = None

class Object(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    purpose: Optional[str] = None
    significance: Optional[str] = None
    original_owner: Optional[str] = None
    event_involvements: Optional[int] = None

class ObjectInvolvement(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: Optional[str] = None
    object: Optional[str] = None
    event: Optional[str] = None
    description_of_involvement: Optional[str] = None
    object_status_before_event: Optional[str] = None
    object_status_after_event: Optional[str] = None

class OntoMediaEntities(BaseModel):
    episodes: List["Episode"]
    scenes: List["Scene"]
    events: List["Event"]
    agents: List["Agent"]
    organizations: List["Organization"]
    objects: List["Object"]
    locations: List["Location"]
    agent_participations: List["AgentParticipation"]
    object_involvements: List["ObjectInvolvement"]

class OntoMediaScene(BaseModel):
    uuid: Optional[str] = None
    title: Optional[str] = None
    description: Optional[str] = None
    scene_number: Optional[int] = None
    events: List["Event"]
    location: Optional[str] = None
    next_scene: Optional[str] = None

class Organization(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    sphere_of_influence: Optional[str] = None
    members: List[Optional[str]]

class Person(BaseModel):
    model_config = ConfigDict(extra='allow')
    name: Optional[str] = None
    role: Optional[str] = None

class Rating(BaseModel):
    part: Optional[str] = None
    viewers: Optional[float] = None

class Ratings(BaseModel):
    ratings_millions: List["Rating"]

class Release(BaseModel):
    media_type: Optional[types.MediaType] = None
    date: Optional[str] = None
    details: Optional[str] = None
    special_features: List[Optional[str]]

class ResolvedAgent(BaseModel):
    uuid: Optional[str] = None
    name: Optional[str] = None
    title: Optional[str] = None
    description: Optional[str] = None
    traits: List[Optional[str]]
    affiliation: Optional[str] = None
    sphere_of_influence: Optional[str] = None

class ResolvedLocation(BaseModel):
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    traits: List[Optional[str]]
    sphere_of_influence: Optional[str] = None

class ResolvedObject(BaseModel):
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    traits: List[Optional[str]]
    sphere_of_influence: Optional[str] = None
    owner: Optional[str] = None

class ResolvedOrganization(BaseModel):
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    traits: List[Optional[str]]
    sphere_of_influence: Optional[str] = None

class Resume(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    experience: List[Optional[str]]
    skills: List[Optional[str]]

class Scene(BaseModel):
    model_config = ConfigDict(extra='allow')
    title: Optional[str] = None
    description: Optional[str] = None
    scene_number: Optional[int] = None
    events: List[Optional[str]]
    location: Optional[str] = None
    next_scene: Optional[str] = None

class SceneMetadata(BaseModel):
    uuid: Optional[str] = None
    title: Optional[str] = None
    description: Optional[str] = None
    scene_number: Optional[int] = None
    location: Optional[str] = None
    next_scene: Optional[str] = None

class StoryMetadata(BaseModel):
    title: Optional[str] = None
    series: Optional[str] = None
    season: Optional[str] = None
    episode_number: Optional[int] = None
    release_date: Optional[str] = None
    release_end_date: Optional[str] = None
    writer: Optional[str] = None
    director: Optional[str] = None
    producer: Optional[str] = None
    main_actors: List[Optional[str]]
    time_reference: Optional[str] = None

class StoryNotes(BaseModel):
    notes: List[Optional[str]]

class WikiData(BaseModel):
    metadata: Optional["StoryMetadata"] = None
    cast_crew: List["CastCrew"]
    home_media: List["HomeRelease"]
    story_notes: List["StoryNotes"]
    worldbuilding: Optional["Worldbuilding"] = None
    ratings: Optional["Ratings"] = None
    continuity: Optional["Continuity"] = None
    plot: List["EpisodePlot"]

class Worldbuilding(BaseModel):
    in_universe_mythology: List[Optional[str]]
    real_world_cultural_references: List[Optional[str]]
    individuals: List[Optional[str]]
    items: List[Optional[str]]
    locations: List[Optional[str]]
