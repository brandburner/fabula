###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, Generic, List, Optional, TypeVar, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class Agent(BaseModel):
    uuid: Optional[str] = None
    agent_id: Optional[str] = None
    name: Optional[str] = None
    title: Optional[str] = None
    aliases: Optional[Union[List[Optional[str]], Optional[None]]] = None
    description: Optional[str] = None
    traits: List[Optional[str]]
    affiliated_org: Optional[Union[Optional[str], Optional[None]]] = None
    sphere_of_influence: Optional[str] = None

class AgentParticipation(BaseModel):
    uuid: Optional[str] = None
    agent: Optional[str] = None
    event: Optional[str] = None
    current_status: Optional[str] = None
    emotional_state: Optional[str] = None
    active_plans: List[Optional[str]]
    beliefs: List[Optional[str]]
    goals: List[Optional[str]]

class Episode(BaseModel):
    title: Optional[str] = None
    synopsis: Optional[str] = None
    episode_number: Optional[int] = None
    part_of_serial: Optional[str] = None

class Event(BaseModel):
    title: Optional[str] = None
    uuid: Optional[str] = None
    description: Optional[str] = None
    sequence_within_scene: Optional[int] = None
    key_dialogue: List[Optional[str]]
    agent_participations: List[Optional[str]]
    object_involvements: List[Optional[str]]
    next_event: Optional[Union[Optional[str], Optional[None]]] = None

class Location(BaseModel):
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    type: Optional[str] = None

class Object(BaseModel):
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    purpose: Optional[str] = None
    significance: Optional[str] = None
    original_owner: Optional[Union[Optional[str], Optional[None]]] = None

class ObjectInvolvement(BaseModel):
    uuid: Optional[str] = None
    object: Optional[str] = None
    event: Optional[str] = None
    description_of_involvement: Optional[str] = None
    object_status_before_event: Optional[str] = None
    object_status_after_event: Optional[str] = None

class Organization(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    sphere_of_influence: Optional[str] = None
    members: List[Optional[str]]

class ResolvedAgent(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: Optional[str] = None
    agent_id: Optional[str] = None
    name: Optional[str] = None
    title: Optional[str] = None
    aliases: List[Optional[str]]
    description: Optional[str] = None
    traits: List[Optional[str]]
    affiliated_org: Optional[Union[Optional[str], Optional[None]]] = None
    sphere_of_influence: Optional[str] = None
    source_uuids: List[Optional[str]]

class ResolvedLocation(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    type: Optional[str] = None
    source_uuids: List[Optional[str]]

class ResolvedObject(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    purpose: Optional[str] = None
    significance: Optional[str] = None
    original_owner: Optional[str] = None
    source_uuids: List[Optional[str]]

class ResolvedOrganization(BaseModel):
    model_config = ConfigDict(extra='allow')
    uuid: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    sphere_of_influence: Optional[str] = None
    members: List[Optional[str]]
    source_uuids: List[Optional[str]]

class Resume(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    experience: List[Optional[str]]
    skills: List[Optional[str]]

class Scene(BaseModel):
    title: Optional[str] = None
    description: Optional[str] = None
    scene_number: Optional[int] = None
    events: List[Optional[str]]
    location: Optional[str] = None
    next_scene: Optional[Union[Optional[str], Optional[None]]] = None

class SceneMetadata(BaseModel):
    uuid: Optional[Union[Optional[str], Optional[None]]] = None
    title: Optional[str] = None
    description: Optional[str] = None
    scene_number: Optional[int] = None
    location: Optional[str] = None
    next_scene: Optional[Union[Optional[str], Optional[None]]] = None
