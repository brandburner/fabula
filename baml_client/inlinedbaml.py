###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n     model \"google/gemini-flash-1.5\"\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> ClaudeWithCaching {\n  provider anthropic\n  retry_policy Exponential\n  options {\n    model \"claude-3-haiku-20240307\"\n    allowed_role_metadata [\"cache_control\"]\n    headers {\n      \"anthropic-beta\" \"prompt-caching-2024-07-31\"\n    }\n  }\n}\n\n\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n\nclient<llm> Groq {\n  provider openai-generic\n  options {\n    base_url \"https://api.groq.com/openai/v1\"\n    api_key env.GROQ_API_KEY\n    model \"llama-3.2-3b-preview\"\n  }\n}\n\n\nclient<llm> OpenRouter {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key \"env.OPENROUTER_API_KEY\"\n    model \"meta-llama/llama-3.2-3b-instruct\"\n  }\n}\n\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}\n\n",
    "entity_resolution.baml": "class ResolvedAgent {\n    uuid string @description(\"Stable UUID for the agent\")\n    name string @description(\"Canonical name of the agent\")\n    title string? @description(\"Official title if applicable, else null\")\n    description string @description(\"Merged description capturing all relevant info\")\n    traits string[] @description(\"Combined traits with duplicates removed\")\n    affiliation string? @description(\"Primary affiliation or associated org if applicable, else null\")\n    sphere_of_influence string? @description(\"Domain or field of influence if applicable, else null\")\n}\n\nclass ResolvedOrganization {\n    uuid string @description(\"Stable UUID for the organization\")\n    name string @description(\"Canonical name of the organization\")\n    description string @description(\"Merged description capturing all relevant info\")\n    traits string[] @description(\"Combined traits with duplicates removed\")\n    sphere_of_influence string? @description(\"Domain or field of influence if applicable, else null\")\n}\n\nclass ResolvedObject {\n    uuid string @description(\"Stable UUID for the object\")\n    name string @description(\"Canonical name of the object\")\n    description string @description(\"Merged description capturing all relevant info\")\n    traits string[] @description(\"Combined traits with duplicates removed\")\n    sphere_of_influence string? @description(\"Domain or field of influence if applicable, else null\")\n    owner string? @description(\"Owner of the object if applicable, else null\")\n}\n\nclass ResolvedLocation {\n    uuid string @description(\"Stable UUID for the location\")\n    name string @description(\"Canonical name of the location\")\n    description string @description(\"Merged description capturing all relevant info\")\n    traits string[] @description(\"Combined traits with duplicates removed\")\n    sphere_of_influence string? @description(\"Domain or field of influence if applicable, else null\")\n}\n\nfunction ResolveAgentCluster(entities: Agent[]) -> ResolvedAgent[] {\n    client CustomGPT4oMini\n    prompt #\"\n    You are to disambiguate and resolve a list of Agent entities, identifying all unique agents present.\n\n    Instructions:\n    - Consider each provided agent as a potential reference to a unique character.\n    - Identify all unique agents present in the list.\n    - For each unique agent:\n        - Choose the most complete, formal name as the canonical name.\n        - Merge descriptions into a single cohesive, non-redundant description.\n        - Combine traits, removing duplicates.\n        - If multiple affiliations or titles are present, pick the most relevant or prominent one.\n    - Return a list of all resolved unique agents.\n\n    Input Agents:\n    {{ entities }}\n\n    ______\n    {{ ctx.output_format }}\n    \"#\n}\n\nfunction ResolveOrganizationCluster(entities: Organization[]) -> ResolvedOrganization[] {\n    client CustomGPT4oMini\n    prompt #\"\n    You are to disambiguate and resolve a list of Organization entities, identifying all unique organizations present.\n\n    Instructions:\n    - Consider each provided organization as a potential reference to a unique entity.\n    - Identify all unique organizations present in the list.\n    - For each unique organization:\n        - Choose the most complete name as canonical.\n        - Merge descriptions into a single cohesive, non-redundant description.\n        - Combine traits if any appear, else empty array.\n        - If multiple sphere_of_influence values appear, pick the most representative one.\n        - affiliation not typically relevant, set to null.\n    - Return a list of all resolved unique organizations.\n\n    Input Organizations:\n    {{ entities }}\n\n    ______\n    {{ ctx.output_format }}\n    \"#\n}\n\nfunction ResolveObjectCluster(entities: Object[]) -> ResolvedObject[] {\n    client CustomGPT4oMini\n    prompt #\"\n    You are to disambiguate and resolve a list of Object entities, identifying all unique objects present.\n\n    Instructions:\n    - Consider each provided object as a potential reference to a unique artifact.\n    - Identify all unique objects present in the list.\n    - For each unique object:\n        - Choose the most complete name as canonical.\n        - Merge descriptions into a single cohesive, non-redundant description.\n        - Combine traits if any appear, else empty array.\n        - If there's an owner mentioned, choose the most relevant owner; else null.\n        - If multiple sphere_of_influence values appear, pick the most representative one.\n    - Return a list of all resolved unique objects.\n\n    Input Objects:\n    {{ entities }}\n\n    ______\n    {{ ctx.output_format }}\n    \"#\n}\n\nfunction ResolveLocationCluster(entities: Location[]) -> ResolvedLocation[] {\n    client CustomGPT4oMini\n    prompt #\"\n    You are to disambiguate and resolve a list of Location entities, identifying all unique locations present.\n\n    Instructions:\n    - Consider each provided location as a potential reference to a unique place.\n    - Identify all unique locations present in the list.\n    - For each unique location:\n        - Choose the most complete name as canonical.\n        - Merge descriptions into a single cohesive, non-redundant description.\n        - Combine traits if any appear, else empty array.\n        - If multiple sphere_of_influence values appear, pick the most relevant one, ensure it is a domain or field of significance, not a trait.\n            - Examples: \"Space Exploration\", \"Galactic Security\", \"Military Operations\", \"Secret Operations\", \"Biological Hazards\"\n        - Generate traits based on the location's characteristics.\n            - Examples: \"Hostile\", \"Dense Jungles\", \"Secret Base\", \"Dangerous Flora\", \"Biological Hazards\", \"Stealth Operations\"\n        - title and affiliation not relevant, set them to null.\n        - owner not relevant, set to null.\n    - Return a list of all resolved unique locations.\n\n    Input Locations:\n    {{ entities }}\n\n    ______\n    {{ ctx.output_format }}\n    \"#\n}\nfunction ResolveSceneAgents(\n    scene_text: string,\n    potential_agents: string[]\n) -> ResolvedAgent[] {\n    client CustomGPT4o\n    prompt #\"\n    You are to disambiguate and resolve a list of potential agent names from a scene, identifying all unique dramatic agents (characters) present.\n\n    Instructions:\n    - Consider each provided name as a potential reference to a unique character.\n    - Identify all unique agents present in the list, using the scene context to guide your decisions.\n    - For each unique agent:\n        - Choose the most complete, formal name as the canonical name.\n        - Create a description based on the scene. Only if the agent is not directly described in the scene, then create a short placeholder description based on your knowledge. prefix the text PLACEHOLDER\".\n        - Combine traits, removing duplicates.\n        - If multiple affiliations or titles are present, pick the most relevant or prominent one.\n    - Ensure that you do not return any organizations, only agents.\n\n    Scene Text:\n    {{ scene_text }}\n\n    Potential Agent Names:\n    {{ potential_agents }}\n\n    ______\n    {{ ctx.output_format }}\n    \"#\n}",
    "fandom_extractor.baml": "// ======================================\n// Data Structures: Core Types\n// ======================================\nclass Person {\n    name string @description(\"Name of the person.\")\n    role string? @description(\"Role of the person (e.g., actor, director).\")\n    @@dynamic\n}\n\nenum MediaType {\n    VHS @description(\"Video Home System format\")\n    DVD @description(\"Digital Versatile Disc format\")\n    BLU_RAY @description(\"High-definition optical disc format\")\n}\n\nclass Release {\n    media_type MediaType @description(\"The type of media (e.g., VHS, DVD, Blu-ray)\")\n    date string @description(\"Release date of the media.\")\n    details string? @description(\"Additional details about the release.\")\n    special_features string[] @description(\"List of special features included in the release.\")\n}\n\nclass Rating {\n  part string @description(\"Part or episode the rating is for.\")\n  viewers float @description(\"Number of viewers in millions.\")\n}\n\n// ======================================\n// Data Structures: Story & Crew\n// ======================================\nclass StoryMetadata {\n    title string @description(\"Title of the story, excluding any 'TV Story' suffix\")\n    series string @description(\"Name of the series (e.g., Doctor Who).\")\n    season string @description(\"Season number.\")\n    episode_number int? @description(\"Episode number in the season.\")\n    release_date string @description(\"Initial release date of the story (may be a range).\")\n    release_end_date string? @description(\"End date if release was a range.\")\n    writer string @description(\"Writer of the story.\")\n    director string @description(\"Director of the story.\")\n    producer string? @description(\"Producer of the story.\")\n    main_actors string[] @description(\"List of main actors in the story.\")\n    time_reference string @description(\"Reference point within the story's timeline indicating when this scene occurs (e.g., 'Year 3000', 'During the Cybermen Invasion').\")\n    @@description(\"Core metadata for the story.\")\n}\n\nclass CastCrew {\n  cast Person @description(\"The main cast member\")\n  uncredited_cast Person? @description(\"An uncredited cast member.\")\n  crew Person @description(\"The crew member\")\n  @@description(\"Actors and crew involved in the production.\")\n}\n\nclass HomeRelease {\n    releases Release? @description(\"Information on home media releases.\")\n    @@description(\"Information on home media releases.\")\n}\n\nclass StoryNotes {\n    notes string[] @description(\"Collection of story notes and commentary.\")\n    @@description(\"Collection of story notes and commentary.\")\n}\n\nclass Worldbuilding {\n    in_universe_mythology string[] @description(\"References to in-universe mythology or lore.\")\n    real_world_cultural_references string[] @description(\"References to real-world culture, history, or mythology.\")\n    individuals string[] @description(\"List of notable individuals within the story's setting\")\n    items string[] @description(\"List of notable items within the story's setting\")\n    locations string[] @description(\"List of notable locations within the story's setting\")\n    @@description(\"Various elements related to the worldbuilding of the story.\")\n}\nclass Ratings {\n    ratings_millions Rating[] @description(\"Television Ratings in millions.\")\n    @@description(\"Television Ratings in millions.\")\n}\nclass Continuity {\n  continuity_notes string[] @description(\"Notes on the continuity of the story in the series\")\n  @@description(\"Notes on the continuity of the story in the series\")\n}\n\nclass EpisodePlot {\n  plot_summary string @description(\"the detailed plot of an individual episode\")\n  @@description(\"the detailed plot of an individual episode\")\n}\n\n// ======================================\n// Data Structures: Full Response\n// ======================================\nclass WikiData {\n    metadata StoryMetadata @description(\"Core metadata for the story.\")\n    cast_crew CastCrew[] @description(\"Actors and crew involved in the production.\")\n    home_media HomeRelease[] @description(\"Information on home media releases.\")\n    story_notes StoryNotes[] @description(\"Collection of story notes and commentary.\")\n    worldbuilding Worldbuilding @description(\"Various elements related to the worldbuilding of the story.\")\n    ratings Ratings? @description(\"Television Ratings in millions.\")\n    continuity Continuity? @description(\"Notes on the continuity of the story in the series\")\n    plot EpisodePlot[] @description(\"Detailed plot summaries for each episode.\")\n    @@description(\"The complete structured data extracted from the Wiki page.\")\n}\n\nfunction ExtractAllWikiData(text: string) -> WikiData {\n    client CustomGPT4oMini\n    prompt #\"\n        You're an expert dramaturg and archivist, specialising in TV drama. Your role is to gather for posterity the production and story details of the show you've been assigned.\n        Be dilignent and thoughtful. Carefully extract all data from this background material to our archival schema.\n\n        Use the dedicated functions for metadata, cast/crew, media, notes, worldbuilding, ratings, continuity, and plot summaries for each episode\n        Combine results into a WikiData object.\n        \n         Include details about:\n          - The main cast and crew including roles.\n          - Any details about home media releases like special features.\n          - Any details about the timeline or era of the story.\n          - Key locations, characters and items.\n          - Summarize the plot of each episode.\n\n       {{ ctx.output_format }}\n        Text:\n        {{text}}\n    \"#\n}\n\nfunction ExtractStoryMetadata(text: string) -> StoryMetadata {\n  client CustomGPT4oMini\n  prompt #\"\n    Extract story metadata from this text content.\n     Ensure to capture the title, series, season, episode number, release date, writer, director, producer, main actors and time reference if present.\n    {{ ctx.output_format }}\n\n    Text:\n    {{text}}\n  \"#\n}\n\n\nfunction ExtractCastCrew(text: string) -> CastCrew {\n  client CustomGPT4oMini\n  prompt #\"\n    Extract the cast and crew information from this text content.\n     Ensure you provide the correct role if given.\n    {{ ctx.output_format }}\n\n     Text:\n    {{text}}\n  \"#\n}\n\nfunction ExtractHomeMedia(text: string) -> HomeRelease {\n  client CustomGPT4oMini\n  prompt #\"\n    Extract home media release information (VHS/DVD/Blu-ray) from this text content.\n      Ensure you separate different releases into distinct entries, capturing all available details, special features and dates for each release.\n\n     {{ ctx.output_format }}\n\n      Text:\n    {{text}}\n  \"#\n}\n\nfunction ExtractStoryNotes(text: string) -> StoryNotes {\n    client CustomGPT4oMini\n    prompt #\"\n        Extract the story notes from this text content.\n\n         {{ ctx.output_format }}\n\n         Text:\n         {{text}}\n    \"#\n}\n\nfunction ExtractWorldbuilding(text: string) -> Worldbuilding {\n    client CustomGPT4oMini\n    prompt #\"\n        Extract the worldbuilding elements from this text content.\n          Include details about the in universe mythology, real world cultural references, notable individuals, items and locations.\n\n         {{ ctx.output_format }}\n\n          Text:\n        {{text}}\n    \"#\n}\nfunction ExtractRatings(text: string) -> Ratings {\n    client CustomGPT4oMini\n    prompt #\"\n        Extract the television ratings from this text content.\n        Include the part and the number of viewers in millions.\n\n        {{ ctx.output_format }}\n\n         Text:\n         {{text}}\n    \"#\n}\n\nfunction ExtractContinuity(text: string) -> Continuity {\n  client CustomGPT4oMini\n  prompt #\"\n      Extract the continuity elements from this text content.\n\n       {{ ctx.output_format }}\n\n       Text:\n      {{text}}\n  \"#\n}\n\nfunction ExtractEpisodePlot(text: string) -> EpisodePlot[] {\n  client CustomGPT4oMini\n  prompt #\"\n    Extract the episode plot summaries from the provided text.\n     If more than one episode is mentioned, produce an array of EpisodePlot objects with summaries for each.\n\n    {{ ctx.output_format }}\n\n    Text:\n    {{text}}\n  \"#\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../fabula\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.74.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
    "myth03.baml": "//myth03.baml\n\n// Reusable template string for the narrative analyst persona\ntemplate_string Narrative_analyst_persona #\"\n  {{ _.role('system') }}\n  You are a world-class script editor, dramaturg and expert in narrative analysis, skilled at dissecting drama scripts according to a structured ontology.\n  Your extensive knowledge of story structure, character development, and thematic elements enables you to provide insightful and accurate analyses.\n  You have a detailed, authoritative and encyclopedic knowledge, combined with a passion fandom of the television show you are tasked with analysing today.\n  You are meticulous and ensure that all extracted entities and relationships strictly conform to the specified ontology and UUID formatting rules.\n  You excel at recognizing subtle nuances in language and context, allowing you to resolve ambiguous references and infer implicit information without overstepping the provided context.\n  In complex or underspecified scenarios, you make reasonable and justified assumptions based on your deep understanding of narrative conventions.\n  Your responses are always well-structured, clear, and consistent with the provided guidelines. You diligently identify and flag any inconsistencies or potential errors in the narrative data.\n  You are committed to delivering high-quality, reliable, and precise analyses, ensuring comprehensive extraction of both explicit and implicit narrative elements.\n\n\"#\n\nclass Episode {\n    title string @description(\"The official title of the episode, reflecting its central theme or key events. Example: 'Episode One - Fault Lines'.\")\n    synopsis string @description(\"A brief summary outlining the main plot points and developments of the episode.\")\n    episode_number int @description(\"The numerical order of the episode within the season or series. Example: 1 for the first episode.\")\n    part_of_serial string @description(\"The name of the larger series or serial to which this episode belongs. Example: 'The West Wing'.\")\n    @@dynamic\n}\n\nclass Scene {\n    title string @description(\"The official title of the scene, capturing its primary focus or significant events. Example: 'Emergency at the Kosovo-Serbia Border'.\")\n    description string @description(\"A detailed narrative summarizing the scene's setting, involved characters, and main actions. It should encapsulate the atmosphere and key occurrences.\")\n    scene_number int @description(\"The numerical sequence of the scene within its respective episode. Example: 1 for the first scene in an episode.\")\n    events string[] @description(\"An array of UUIDs representing the events that occur within this scene, listed in chronological order.\")\n    location string? @description(\"The UUID of the primary location where the scene takes place. Follows the format 'location-<normalized_name>'. If the location is not identifiable, use 'location-unknown'.\")\n    next_scene string? @description(\"The UUID of the subsequent scene in the narrative flow, following the format 'scene-XXX'. If there is no next scene, set to null.\")\n    @@dynamic\n}\n\nclass Event {\n    title string @description(\"The official title of the event, summarizing its essence. Example: 'Josh Lyman Enters Situation Room'.\")\n    uuid string @description(\"Unique identifier for the event, following the format 'event-<scene_number>-<sequence_within_scene>'. Example: 'event-1-1'.\")\n    description string @description(\"A comprehensive description detailing what happens during the event, including key actions and outcomes.\")\n    sequence_within_scene int @description(\"The order of the event within its scene, starting from 1.\")\n    key_dialogue string[] @description(\"An array of significant dialogue lines that are central to the event's occurrence or impact.\")\n    agent_participations string[] @description(\"An array of agent UUIDs participating in the event, referencing the 'agents' registry. Example: ['agent-josh_lyman'].\")\n    object_involvements string[] @description(\"An array of object UUIDs involved in the event, referencing the 'objects' registry. Example: ['object-tie'].\")\n    next_event string? @description(\"The UUID of the next event in chronological order within the scene. If there is no subsequent event, set to null.\")\n    @@dynamic\n}\n\nclass Agent {\n    uuid string @description(\"Unique identifier for the agent in snake_case, in the format 'agent-{agent_id}', for example josiah_bartlet, eleventh_doctor, she_ra\")\n    agent_id string @description(\"Unique identifier derived from the agent's name in snake_case\")\n    name string @description(\"Full canonical name (including surname) of the dramatic agent (character) if you know it.\")\n    title string? @description(\"Official or informal role, title, or designation held by the agent within the narrative (e.g., 'Doctor', 'UNIT Commander', 'President of the United States').\")\n    description string @description(\"Comprehensive character description based on known information, including background, personality, and key attributes.\")\n    traits string[] @description(\"List of defining qualities and characteristics that describe the agent's personality, behavior, or abilities (e.g., 'Brave', 'Time Lord', 'Resourceful').\")\n    affiliated_org string? @description(\"UUID of the organization or body the agent is officially associated with or represents (e.g., 'org-unit', 'org-gallifrey').\")\n    sphere_of_influence string? @description(\"Primary domain, area, or field where the agent exerts their power or influence (e.g., 'Time Travel', 'Military Strategy').\")\n    @@dynamic\n}\n\nclass Organization {\n    uuid string @description(\"Unique identifier for the organization in snake_case, in the format 'org-{name}', for example 'org-time_lords' or 'org-galactic_empire'\")\n    name string @description(\"Name of the organization.\")\n    description string @description(\"Description of the organization's purpose and role.\")\n    sphere_of_influence string @description(\"Area where the organization has influence.\")\n    members string[] @description(\"List of UUIDs of agents who are members of this organization.\")\n    @@dynamic\n}\n\nclass Object {\n    uuid string @description(\"Unique identifier for the object, following the format 'object-<normalized_name>'. Example: 'object-lcd_screens'.\")\n    name string @description(\"The official name of the object. Example: 'LCD Screens'.\")\n    description string @description(\"A detailed description of the object's nature, physical attributes, and role within the narrative.\")\n    purpose string @description(\"The intended use or function of the object within the context of the narrative. Example: 'To visualize satellite imagery for briefings'.\")\n    significance string @description(\"The narrative importance or symbolic meaning of the object. Example: 'Provides visual context for the Kosovo-Serbia situation'.\")\n    original_owner string? @description(\"The UUID of the agent who originally owns the object, following the format 'agent-<agent_id>'. Example: 'agent-josh_lyman'. If no owner, set to null.\")\n    event_involvements int @description(\"The number of events in which the object is involved. Example: 2.\")\n    @@dynamic\n}\n\nclass Location {\n    uuid string @description(\"Unique identifier for the location in snake_case, in the format 'location-{name}', for example 'location-mos_eisley' or 'location-hogwarts_castle'\")\n    name string @description(\"Name of the location.\")\n    description string @description(\"Detailed description of the location's characteristics.\")\n    type string @description(\"Type of location (e.g., City, Building, Planet, Office, Apartment).\")\n    @@dynamic\n}\n\nclass AgentParticipation {\n    uuid string @description(\"Unique identifier for this agent's participation in an event in the format 'participation-{agent_uuid}-{event_uuid}'.\")\n    agent string @description(\"UUID of the agent participating in the event.\")\n    event string @description(\"UUID of the event.\")\n    current_status string @description(\"What the agent is doing during the event.\")\n    emotional_state string @description(\"Brief description of the agent's emotional disposition during the event.\")\n    active_plans string[] @description(\"Brief description of the agent's active objectives or strategies in the context of the event.\")\n    beliefs string[] @description(\"The agent's beliefs or convictions that influence their actions during the event.\")\n    goals string[] @description(\"The agent's short-term and long-term goals related to the event.\")\n    @@dynamic\n}\n\nclass ObjectInvolvement {\n    uuid string @description(\"Unique identifier for this object's involvement in an event in the format 'involvement-{object_uuid}-{event_uuid}'.\")\n    object string @description(\"UUID of the involved object.\")\n    event string @description(\"UUID of the event where the object is involved.\")\n    description_of_involvement string @description(\"Clear description of how the object is used or affected in the event, detailing its functional and narrative role.\")\n    object_status_before_event string @description(\"Brief description of the object's state prior to the event.\")\n    object_status_after_event string @description(\"Brief description of the object's state following the event.\")\n    @@dynamic\n}\n\n// ------------------------ Updated Function Definitions ------------------------\n\n// No changes needed for OntoMediaEntities\nclass OntoMediaEntities {\n    episodes Episode[] @description(\"List of episodes in the analyzed text.\")\n    scenes Scene[] @description(\"List of Scene objects.\")\n    events Event[] @description(\"List of Event objects.\")\n    agents Agent[] @description(\"List of Agent objects.\")\n    organizations Organization[] @description(\"List of Organization objects.\")\n    objects Object[] @description(\"List of Object objects.\")\n    locations Location[] @description(\"List of Location objects.\")\n    agent_participations AgentParticipation[] @description(\"List of AgentParticipation objects.\")\n    object_involvements ObjectInvolvement[] @description(\"List of ObjectInvolvement objects.\")\n}\n\n// No changes needed for SceneMetadata\nclass SceneMetadata {\n    uuid string? @description(\"Unique identifier for the scene.\")\n    title string @description(\"Title of the scene.\")\n    description string @description(\"Detailed description of the scene's setting and action.\")\n    scene_number int? @description(\"Order of the scene within the episode.\")\n    location string? @description(\"UUID of the primary location where this scene takes place.\")\n    next_scene string? @description(\"UUID of the next scene in the narrative order (syuzhet).\")\n}\n\nfunction ExtractEntities(scene_text: string, story_context: string?) -> OntoMediaEntities {\n  client CustomGPT4oMini\n  prompt #\"\n    {{ Narrative_analyst_persona ()}}\n\n    **Guidelines**:\n    - **Entity Focus**: Identify ONLY entities explicitly present or directly referenced within the current scene.\n    - **Context Utilization**: Use `story_context` solely for disambiguation or additional background information. Do not extract or infer entities based solely on the context without direct references in the scene.\n    - **UUID Management**:\n    - **Existing Entities**: If an entity has been previously mentioned (and thus has a UUID in the `story_context`), reuse that existing UUID.\n    - **New Entities**: If an entity is new, generate a unique UUID following the specifications in each entity's description.\n    - **Entity Attributes**:\n    - Extract all relevant properties as defined in each entity's schema.\n    - Where applicable, include attributes like roles within organizations, ownership details for objects, or emotional states for agents.\n    - **Error Reporting**:\n    - If the LLM encounters ambiguities or uncertainties in entity identification, include an `errors` section detailing these issues for manual review.\n    - **Output Integrity**:\n    - Ensure the output strictly adheres to the provided schema, avoiding additional or missing fields.\n\n    **Entity Definitions**:\n    - **Episode**: A distinct part of a larger narrative (if applicable to the scene context).\n    - **Scene**: A segment of action happening in one location and time.\n    - **Event**: A specific action or occurrence within the scene.\n    - **Agent**: A character or entity capable of action.\n    - **Organization**: A group or institution.\n    - **Object**: A tangible item of significance.\n    - **Location**: A place where action occurs.\n    - **AgentParticipation**: Captures the status and emotional state of an agent during an event.\n    - **ObjectInvolvement**: Describes how an object is used or affected during an event.\n\n    **Output Format**: Return a JSON object containing lists of each entity type found in the scene. Ensure each entity includes a `uuid` and all relevant properties as defined in the provided schema.\n\n    Story context materials: {{ story_context }}\n    {{ _.role('user') }}\n    Scene to analyze:\n    {{ scene_text }}\n    <end of scene>\n\n    {{ ctx.output_format }}\n  \"#\n}\n\nclass OntoMediaScene {\n    uuid string @description(\"Unique identifier for the scene.\")\n    title string @description(\"Title of the scene.\")\n    description string @description(\"Detailed description of the scene's setting and action.\")\n    scene_number int @description(\"Order of the scene within the episode.\")\n    events Event[] @description(\"List of Event objects that occur in this scene.\")\n    location string? @description(\"UUID of the primary location where this scene takes place.\")\n    next_scene string? @description(\"UUID of the next scene in the narrative order (syuzhet).\")\n}\n\nfunction ExtractSceneMetadata(scene_text: string, story_context: string?) -> SceneMetadata {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**:\n        Extract comprehensive metadata for the current scene based on the provided `scene_text` and, when necessary, infer information from the provided `story_context`. The metadata should include:\n\n        1. **Title**:\n            *   Generate a concise and descriptive title that encapsulates the central theme, major event, or key emotional tone of the scene.\n            *   Ensure the title is unique and reflective of the scene's content.\n\n        2. **Description**:\n            *   Provide a detailed summary of the scene, including:\n                *   **Setting**: Describe the physical location, time of day, and atmosphere.\n                *   **Characters Present**: List key characters involved in the scene.\n                *   **Major Actions**: Outline the primary actions, conflicts, or events that occur.\n                *   **Emotional Tone**: Capture the prevailing emotions or tensions within the scene.\n\n        3. **Scene Number**:\n            *   If the scene number is explicitly mentioned in the `scene_text`, extract and assign it.\n            *   If not apparent, leave the `scene_number` field null or assign externally during post-processing.\n\n        4. **Location**:\n            *   Identify the primary location where the scene takes place.\n            *   Use normalized UUID formatting (e.g., `location-white_house-situation_room`).\n            *   **If the location is not explicitly stated in the `scene_text`, use the `story_context` to infer the most likely location. For example, if the scene involves characters known to work in the White House and mentions office activities, you might infer `location-white_house` or a more specific location within the White House if context provides it.**\n            *   If the location is not clearly identifiable and cannot be reasonably inferred, assign a placeholder such as `location-unknown`.\n\n        5. **Next Scene**:\n            *   Detect any explicit references or cues that indicate what the next scene will be.\n            *   Assign the corresponding `scene_uuid` if available.\n            *   If no explicit reference exists, leave the `next_scene` field null.\n\n        **Important Considerations:**\n        *   While `scene_text` is your primary source, make reasonable inferences about the location based on `story_context` if the location is not directly mentioned.\n        *   Ensure consistency in location identification across scenes. If a location has been identified in a previous scene, use the same UUID for subsequent scenes occurring in the same location.\n        \n        **Story context materials:**\n        {{ story_context }}\n\n        {{ _.role('user') }}\n        **Scene to analyze:**\n        {{ scene_text }}\n        <end of scene>\n\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ExtractScene(scene_text: string, story_context: string?) -> OntoMediaScene {\n  client CustomGPT4oMini\n  prompt #\"\n    {{ Narrative_analyst_persona ()}}\n\n    **Objective**:\n    Generate a comprehensive `OntoMediaScene` object for the current scene based on the provided `scene_text`. The object should encapsulate all relevant narrative elements in alignment with the BAML schema.\n\n    **Components to Include**:\n\n    1. **Scene Metadata**:\n    - **UUID**: Assign a unique identifier following the format `scene-XXX`, where `XXX` corresponds to the `scene_number` (e.g., `scene-001`).\n    - **Title**: Create a concise and descriptive title that captures the essence of the scene.\n    - **Description**: Provide a detailed summary of the scene, including:\n        - **Setting**: Physical location, time of day, and atmosphere.\n        - **Characters Present**: Key agents involved.\n        - **Major Actions**: Primary events and interactions.\n        - **Emotional Tone**: Prevailing emotions or tensions.\n    - **Scene Number**: Extract if explicitly mentioned; otherwise, assign externally.\n    - **Location**: Primary location UUID, normalized (e.g., `location-white_house-situation_room`). Use a placeholder like `location-unknown` if not identifiable.\n    - **Next Scene**: UUID of the subsequent scene if explicitly referenced; otherwise, leave null.\n\n    2. **Events**:\n    - **List of Event Objects**: Extract and detail each event within the scene in chronological order.\n        - **UUID**: Follow the format `event-<scene_number>-<sequence_within_scene>` (e.g., `event-1-1`).\n        - **Title**: Descriptive title summarizing the event.\n        - **Description**: Comprehensive overview of what occurs during the event, including key actions and outcomes.\n        - **Sequence Within Scene**: Numerical order of the event within the scene.\n        - **Key Dialogue**: Extract significant lines of dialogue associated with the event.\n        - **Agent Participations**: List of agent UUIDs involved in the event.\n        - **Object Involvements**: List of object UUIDs involved in the event.\n        - **Next Event**: UUID of the following event if applicable; otherwise, leave null.\n\n    3. **Relationship Mapping**:\n    - **Agent Participations**: Link agents to their respective events using UUIDs.\n    - **Object Involvements**: Link objects to their respective events using UUIDs.\n\n    **Guidelines**:\n    - **Exclusivity**: Base all information extraction solely on the provided `scene_text`. Do not infer details from `story_context` unless explicitly referenced within the scene.\n    - **Consistency**: Reuse existing UUIDs from the `story_context` for known entities to maintain consistency across scenes.\n    - **UUID Generation**: Adhere strictly to the UUID formatting rules to ensure seamless integration with the Entity Registry.\n    - **Narrative Order**: Maintain chronological order in event sequencing and ensure that `next_event` references reflect the narrative flow.\n\n    **Story background context**: \n    {{ story_context }}\n\n    {{ _.role('user') }}\n    **Scene to analyze**:\n    {{ scene_text }}\n    <end of scene>\n\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction ExtractEvents(scene_text: string, story_context: string?, scene_number: int, known_agents: string[], known_objects: string[]) -> Event[] {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Instructions**:\n        Extract and detail each distinct event or occurrence within the current scene in chronological order. For each event, provide comprehensive information as outlined below:\n\n        1. **Event Identification**:\n        - **Chronological Order**: Ensure events are ordered based on their sequence of occurrence within the scene.\n        - **Distinctness**: Each event should represent a unique action, decision, or occurrence that advances the narrative.\n\n        2. **Event Details**:\n        - **Title**:\n            - Create a clear and descriptive title that encapsulates the essence of the event.\n        - **UUID**:\n            - Assign a unique identifier following the format `event-<scene_number>-<sequence_within_scene>` (e.g., `event-1-1` for the first event in scene 1).\n        - **Description**:\n            - Provide a detailed summary of the event, including key actions, decisions, and outcomes.\n        - **Sequence Within Scene**:\n            - Assign a numerical order to each event starting from 1.\n        - **Key Dialogue**:\n            - Extract significant lines of dialogue that are central to the event's occurrence or impact.\n            - Ensure each line is accurately attributed to the correct event.\n        - **Agent Participations**:\n            - List the UUIDs of agents participating in the event, referencing the provided `known_agents` list (e.g., `agent-josh_lyman`).\n            - **Do not include agent names directly; use only UUIDs.**\n        - **Object Involvements**:\n            - List the UUIDs of objects involved in the event, referencing the provided `known_objects` list (e.g., `object-tie`).\n            - **Do not include object names directly; use only UUIDs.**\n        - **Next Event**:\n            - Assign the UUID of the subsequent event in chronological order (e.g., `event-1-2`).\n            - If there is no subsequent event, set this field to null.\n        - **Timeline**:\n            - Assign a timeline UUID if relevant; otherwise, set to null.\n\n        3. **UUID Integrity**:\n        - Ensure that all UUIDs for agents and objects correspond to valid entries in the provided `known_agents` and `known_objects` lists.\n        - Do not introduce new UUIDs for known entities; reuse existing ones for consistency.\n\n        4. **Comprehensive Extraction**:\n        - Identify and include all relevant events to provide a complete understanding of the scene's progression.\n        - Avoid overlooking minor yet contextually significant occurrences.\n\n        **Story background context**: \n        {{ story_context }}\n\n        {{ _.role('user') }}\n        **Known Agents UUIDs**:\n        ```json\n        {{ known_agents }}\n        ```\n\n        **Known Objects UUIDs**:\n        ```json\n        {{ known_objects }}\n        ```\n\n        **Scene to analyze**:\n        Scene number {{ scene_number }}\n        {{ scene_text }}\n        <end of scene>\n\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ExtractAgents(scene_text: string, story_context: string?, known_agents: Agent[], agent_name_to_uuid_mapping: map<string, string>) -> Agent[] {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**:\n        Extract comprehensive agent profiles for characters in the current scene (the provided `scene_text`).\n       \n        **Instructions**:\n        1. Identify each unique agent (character) who:\n           - Speaks dialogue, or\n           - Takes action, or\n           - Is directly referenced\n           Don't treat group entities (e.g 'hostages', 'angry mob', 'aides' etc.) as Agents unless they have dialogue\n        2. For each agent:\n           - Always provide their full name (including surname) if you know it\n           - Avoid using honorifics and titles for agent names, even if referred to as such in the scene (e.g. 'James T. Kirk', not 'Captain Kirk'). Make exceptions for special cases where the honorific *is* the name, like 'The Doctor' or 'The Master'.\n           - Use a unique identifier derived from the agent's name in snake_case (e.g., josiah_bartlet, eleventh_doctor).\n           - Generate a UUID for the agent in the format 'agent-{agent_id}'. **Important: Use only the snake_case name for the ID, no extra prefixes or suffixes.**\n           - Provide a clear description of their role and characteristics.\n           - Note any organizational affiliations or significant relationships.\n           - If a character appears with different forms of address (Dr. X vs Full Name), treat them as the same entity and use the most complete form as canonical.\n           - **If an agent is already present in `known_agents`, prioritize using the existing `name`, and `uuid` to ensure consistency.**\n           - **Extract all agents mentioned in the scene text, even if they don't have dialogue lines or are only mentioned by their role (e.g., \"junior archivists\"). Pay close attention to stage directions as well.**\n           - **Be aware that agents may be referred to by different variations of their name (e.g. 'The Doctor', 'Doctor'). Use your best judgment to identify these as the same agent.**\n           - **Use the provided `agent_name_to_uuid_mapping` to resolve any variations in agent names to their corresponding UUIDs. This mapping provides a direct link between normalized agent names and their UUIDs.**\n\n        **Story background context**: \n        {{ story_context }}\n\n        {{ _.role('user') }}\n        **Known Agents (use these names and UUIDs if applicable)**:\n        ```json\n        {{ known_agents }}\n        ```\n\n        **Agent Name to UUID Mapping (use this to resolve name variations)**:\n        ```json\n        {{ agent_name_to_uuid_mapping }}\n        ```\n\n        **Scene to analyze**:\n        {{ scene_text }}\n        <end of scene>\n\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ExtractObjects(\n    scene_text: string, \n    story_context: string?, \n    known_object_uuids: string[]  // Changed from known_objects: Object[]\n) -> Object[] {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**:\n        Extract comprehensive details of noteworthy objects appearing in the current scene (the provided `scene_text`).\n\n        **Instructions**:\n        - **Extract all objects that are relevant to the story or mentioned explicitly in the scene text.**\n        - **NEVER categorise people as objects**\n        - Do not treat groups of people (e.g. 'prisoners', 'militia', 'lobbyists') as objects - they are 'organizations' and will be captured separately\n        - Do not treat character attributes as objects unless specifially relevant to the plot\n        - If an object's UUID exists in known_object_uuids, reuse that UUID.\n        - For new objects, generate a UUID in the format 'object-{name}'.\n        - Provide a concise 'description' of each object's nature or function.\n        - **When describing the original owner of the object, use the agent's UUID.**\n\n        **Story background context**: \n        {{ story_context }}\n\n        {{ _.role('user') }}\n        **Known Object UUIDs (reuse these if applicable)**:\n        ```json\n        {{ known_object_uuids }}\n        ```\n\n        **Scene to analyze**:\n        {{ scene_text }}\n        <end of scene>\n\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ExtractAgentParticipations(scene_text: string, story_context: string?, events: Event[], agents: string[]) -> AgentParticipation[] {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**:\n        Use your dramatic analysis to provide a comprehensive picture of agents' participation in an event, including insight into their state of mind.\n\n        **Critical Instructions**:\n        1. Use the agent UUIDs from the provided 'agents' array (e.g., agent-sarah_chen)\n        2. Match agent participations to events using the event UUIDs provided.\n        3. Ensure every agent participation links to:\n           - A valid agent UUID from the 'agents' array\n           - A valid event UUID from the 'events' array\n        4. Generate a UUID for each agent participation in the format 'participation-{agent_uuid}-{event_uuid}'\n\n        **Story background context**: \n        {{ story_context }}\n\n        {{ _.role('user') }}\n        **Available Agents**:\n        ```json\n        {{ agents }}\n        ```\n\n        **Events to Analyze**:\n        ```json\n        {{ events }}\n        ```\n\n        **Scene to analyze**:\n        {{ scene_text }}}\n        <end of scene>\n\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ExtractObjectInvolvements(scene_text: string, story_context: string?, events: Event[], objects: string[]) -> ObjectInvolvement[] {\n  client CustomGPT4oMini\n  prompt #\"\n    {{ Narrative_analyst_persona ()}}\n\n    **Objective**:\n    Use your dramatic analysis to provide a comprehensive picture of objects' literal or subtextual involvement in an event, including who used it.\n\n    **Important**:\n    - Use the object UUIDs from the provided 'objects' array (e.g., object-tardis)\n    - Match object involvements to events using the event UUIDs provided.\n    - Ensure every object involvement links to:\n       - A valid object UUID from the 'objects' array\n       - A valid event UUID from the 'events' array\n        - Generate a UUID for each object involvement in the format 'involvement-{object_uuid}-{event_uuid}'\n\n    **Story background context**: \n    {{ story_context }}\n\n    {{ _.role('user') }}\n    **Events recorded**:\n    ```json\n    {{ events }}\n    ```\n\n    **Objects involved**:\n    ```json\n    {{ objects }}\n    ```\n\n    **Scene to analyze**:\n    {{ scene_text }}\n    <end of scene>\n\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction ExtractLocations(scene_text: string, story_context: string?) -> Location[] {\n   client CustomGPT4oMini\n   prompt #\"\n       {{ Narrative_analyst_persona ()}}\n\n       **Objective**:\n        Provide comprehensive details of the principal location this scene takes place in, along with other significant places referred to.\n       \n       **Instructions**:\n        - Look for references to places (rooms, cities, planets, bases, etc.) in both dialogue and stage directions.\n        - **Prioritize specificity:** If a place is described as a specific room within a larger building (e.g., \"Situation Room\" within the \"White House\"), create a UUID that reflects this hierarchy (e.g., `location-white_house-situation_room`).\n        - **Distinguish between locations and objects:** If an entity could be both a location and an object (e.g., \"Situation Room\"), treat it as a location if it's a defined space where actions occur. If it's primarily used as an object within a scene, treat it as such. Use your judgment based on the context.\n        - Generate a UUID for the location in the format 'location-{name}'. **'name' should be a normalized, lowercase version of the location's name with words separated by underscores (e.g., 'location-quantum_archive', 'location-central_core'). Be as specific as possible when creating the name, using multiple words if necessary to uniquely identify the location. If a location seems to be within another location, use a hyphenated name, such as 'location-quantum_archive-central_core'**\n        - Provide a brief 'description' of each location if present in the text.\n        - If not sure, omit or note as 'unknown'.\n\n       **Story background context**: \n       {{ story_context }}\n\n       {{ _.role('user') }}\n       **Scene to analyze**:\n       {{ scene_text }}\n        <end of scene>\n\n       {{ ctx.output_format }}\n   \"#\n}\n\nfunction ExtractOrganizations(scene_text: string, story_context: string?, known_agents: Agent[]) -> Organization[] {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**:\n        Provide comprehensive details of organizations, corporations, alien races, institutions or other bodies or gatherings, including the agents in our story who are affiliated with or belong to.\n        \n        **Instructions**:\n        - An organization is typically a group or institution (e.g., a military unit, government body, or secret society).\n        - An organization may also be a temporary grouping of people (e.g. hostages, an angry crowd, or tour group)\n        - Generate a UUID for the organization in the format 'org-{name}' where 'name' is a normalized, lowercase version of the organization's name with words separated by underscores (e.g., 'org-entropy_syndicate').\n        - Include a short 'description' of the organization's role or purpose if stated or implied.\n        - **Identify members of each organization. Use the provided `known_agents` list and the scene text to determine which agents belong to each organization. List the members using their UUIDs (e.g., `agent-sarah_chen`).**\n        - If the text doesn't mention any group or institution, return an empty list.\n\n        **Story background context**: \n        {{ story_context }}\n        \n        {{ _.role('user') }}\n        **Known Agents**:\n        ```json\n        {{ known_agents }}\n        ```\n\n        **Scene to analyze**:\n        {{ scene_text }}\n        <end of scene>\n\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction InferObjectOwner(scene_text: string, object_uuid: string, agent_uuids: string[]) -> Agent? {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ _.role(\"system\") }}\n        You are a narrative analyst tasked with inferring object ownership based on contextual clues within a scene.\n        You are provided with a scene text, an object UUID, and a list of agent UUIDs.\n        Your task is to analyze the scene text and determine the most likely owner of the specified object.\n\n        **Instructions**:\n        1. Analyze the scene text and identify any direct or indirect mentions of ownership related to the object.\n        2. Consider the actions and roles of the agents within the scene.\n        3. If ownership is explicitly stated, return the UUID of the agent who owns the object.\n        4. If ownership is not explicitly stated, but can be inferred from the context (e.g., an agent using the object in a specific way, an agent being responsible for the object's maintenance), return the UUID of the most likely owner.\n        5. If no owner can be inferred from the context, return null.\n        \n        {{ _.role('user') }}\n        **Object UUID**: {{ object_uuid }}\n\n        **Agent UUIDs**:\n        ```json\n        {{ agent_uuids }}\n        ```\n\n        **Scene Text**:\n        {{ scene_text }}\n        <end of scene>\n\n        Return the UUID of the inferred owner, or null if no owner can be determined.\n\n        {{ ctx.output_format }}\n    \"#\n}",
    "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string) -> Resume {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n",
}

def get_baml_files():
    return file_map
