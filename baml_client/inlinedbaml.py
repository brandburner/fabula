###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMinixx {\n  provider google-ai\n  retry_policy Exponential\n  options {\n    model \"gemini-2.0-flash-001\"\n    api_key env.GOOGLE_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.75.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
    "myth06.baml": "// File: fabula_dev/myth06.baml\n// Jinja-like template syntax for baml python library\n// Defines classes, enums and functions to guide LLM output to strict schema alignment\n\n// Reusable template string for the narrative analyst persona\ntemplate_string Narrative_analyst_persona #\"\n  {{ _.role('system') }}\nYou are a world-class script editor, dramaturg, and narrative analyst, specializing in the structured dissection of drama scripts according to a well-defined ontology. You possess the instincts of a seasoned screenwriter, understanding the importance of pacing, rhythm, and impactful story beats.\n\nYour Expertise & Approach:\n✅ Narrative Mastery: You possess an encyclopedic knowledge of story structure, character development, thematic elements, and genre conventions, allowing you to conduct insightful, contextually accurate analyses. You are particularly attuned to identifying key turning points, moments of high tension, and scenes that significantly advance the plot.\n✅ Story Beat Identification: You have a keen ability to recognize and isolate the essential story beats within a scene – the pivotal moments that drive character arcs, reveal crucial information, or alter the course of events. You understand that effective storytelling relies on carefully selected and impactful beats, not every minor action.\n✅ Pacing and Rhythm Awareness: You are sensitive to the pacing and rhythm of a scene. You consider how events contribute to the overall flow and build towards a climax, avoiding unnecessary details that disrupt the narrative's momentum.\n✅ Ontology-Driven Extraction: You meticulously extract entities, relationships, and narrative structures while strictly adhering to specified ontology rules and UUID formatting.\n✅ Fandom-Level Detail & Context Awareness: Your understanding of television shows, serialized storytelling, and worldbuilding extends beyond surface-level knowledge, enabling you to detect continuity, subtext, and intertextual references with precision.\n✅ Nuanced Language Interpretation: You excel at recognizing subtle shifts in tone, implicit information, and ambiguous references, ensuring they are correctly inferred but never misinterpreted outside the provided context.\n✅ Error Detection & Consistency: You diligently identify, flag, and resolve inconsistencies in extracted data, ensuring alignment with both internal narrative logic and established metadata constraints.\n✅ Justified Reasoning in Underspecified Cases: When encountering ambiguous or underspecified content, you apply reasoned, evidence-based assumptions grounded in narrative conventions—always ensuring transparency in your decision-making process.\n✅ Clarity, Precision, & Structure: Your responses are well-structured, concise, and explicitly aligned with provided guidelines, ensuring high-quality, repeatable analysis across scripts.\n\nYour Commitment:\nYou are dedicated to delivering comprehensive, structured, and reliable narrative extractions, ensuring a rigorous yet adaptable approach to analyzing explicit and implicit storytelling elements with consistency and accuracy. You prioritize identifying the *most important* events that shape the narrative, capturing the essence of each scene with a focus on pacing and impact.\n\"#\n\n// --- Classes ---\n\nclass Episode {\n    title string @description(\"The official title of the episode, reflecting its central theme or key events. Example: 'Episode One - Fault Lines'.\")\n    synopsis string @description(\"A brief summary outlining the main plot points and developments of the episode.\")\n    episode_number int @description(\"The numerical order of the episode within the season or series. Example: 1 for the first episode.\")\n    part_of_serial string @description(\"The name of the larger series or serial to which this episode belongs. Example: 'The West Wing'.\")\n    //@@dynamic\n}\n\nclass Scene {\n    title string @description(\"The official title of the scene, capturing its primary focus or significant events. Example: 'Emergency at the Kosovo-Serbia Border'.\")\n    description string @description(\"A detailed narrative summarizing the scene's setting, involved characters, and main actions. It should encapsulate the atmosphere and key occurrences.\")\n    scene_number int @description(\"The numerical sequence of the scene within its respective episode. Example: 1 for the first scene in an episode.\")\n    events string[] @description(\"An array of UUIDs representing the events that occur within this scene, listed in chronological order.\")\n    location string @description(\"The UUID of the primary location where the scene takes place. Follows the format 'location-<normalized_name>'. If the location is not identifiable, use 'location-unknown'.\")\n    next_scene string|null @description(\"The UUID of the subsequent scene in the narrative flow, following the format 'scene-XXX'. If there is no next scene, set to null.\")\n    //@@dynamic\n}\n\nclass Event {\n    title string @description(\"The official title of the event, summarizing its essence. Example: 'Josh Lyman Enters Situation Room'.\")\n    uuid string @description(\"Unique identifier for the event, following the format 'event-<scene_number>-<sequence_within_scene>'. Example: 'event-1-1'.\")\n    description string @description(\"A comprehensive description detailing what happens during the event, including key actions and outcomes.\")\n    sequence_within_scene int @description(\"The order of the event within its scene, starting from 1.\")\n    key_dialogue string[] @description(\"An array of significant dialogue lines that are central to the event's occurrence or impact.\")\n    agent_participations string[] @skip\n    object_involvements string[] @skip\n    next_event string|null @description(\"The UUID of the next event in chronological order within the scene. If there is no subsequent event, set to null.\")\n    //@@dynamic\n}\n\nclass Agent {\n    uuid string @description(\"Unique identifier for the agent in snake_case, in the format 'agent-{agent_id}', for example 'agent-josiah_bartlet', 'agent-eleventh_doctor', 'agent-she_ra'\")\n    agent_id string @description(\"Unique identifier derived from the agent's name in snake_case\")\n    name string @description(\"Full canonical name (including surname) of the dramatic agent (character) excluding title, rank or honorific\")\n    title string? @description(\"Official or informal role, title, or designation held by the agent within the narrative (e.g., 'Doctor', 'UNIT Commander', 'President of the United States').\")\n    aliases string[]|null @description(\"Alternative names or titles used to refer to the agent.\")\n    description string @description(\"Comprehensive general (not scene-specific) character profile based on all known information in the story so far. This is an evergreen description but you'll keep adding to and revising it as the story progresses.\")\n    traits string[] @description(\"List of defining qualities and characteristics that describe the agent's personality, behavior, or abilities (e.g., 'Brave', 'Time Lord', 'Resourceful').\")\n    affiliated_org string|null @description(\"The organization the agent appears to be officially associated with. Expressed as a unique identifier in snake_case, in the format 'org-{org_id}'\") @alias(\"affiliated_org_uuid\")\n    sphere_of_influence string? @description(\"Primary domain, area, or field where the agent exerts their power or influence (e.g., 'Time Travel', 'Military Strategy').\")\n    //@@dynamic\n}\n\nclass Organization {\n    uuid string @description(\"Unique identifier for the organization in snake_case, in the format 'org-{name}', for example 'org-time_lords' or 'org-galactic_empire'\")\n    name string @description(\"Name of the organization.\")\n    description string @description(\"Description of the organization's purpose and role.\")\n    sphere_of_influence string @description(\"Area where the organization has influence.\")\n    members string[] @skip\n    @@dynamic\n}\n\nclass Location {\n    uuid string @description(\"Unique identifier for the location in snake_case, in the format 'location-{name}', for example 'location-mos_eisley' or 'location-hogwarts_castle'\")\n    name string @description(\"Name of the location.\")\n    description string @description(\"Detailed description of the location's characteristics.\")\n    type string @description(\"Type of location (e.g., City, Building, Planet, Office, Apartment).\")\n    //@@dynamic\n}\n\nclass Object {\n    uuid string @description(\"Unique identifier for the object, following the format 'object-<normalized_name>'. Example: 'object-lcd_screens'.\")\n    name string @description(\"The official name of the object. Example: 'LCD Screens'.\")\n    description string @description(\"A detailed description of the object's nature, physical attributes, and role within the narrative.\")\n    purpose string @description(\"The intended use or function of the object within the context of the narrative. Example: 'To visualize satellite imagery for briefings'.\")\n    significance string @description(\"The narrative importance or symbolic meaning of the object. Example: 'Provides visual context for the Kosovo-Serbia situation'.\")\n    original_owner string|null @description(\"The UUID of the agent who originally owns the object, following the format 'agent-<agent_id>'. Example: 'agent-josh_lyman'. If no owner, set to null.\")\n    //@@dynamic\n}\n\nclass AgentParticipation {\n    uuid string @description(\"Unique identifier for this agent's participation in an event in the format 'agentparticipation-{agent_uuid}-{event_uuid}' for example 'agentparticipation-agent-mark_corrigan-event-5-3'.\")\n    agent string @description(\"UUID of the agent participating in the event.\")\n    event string @description(\"UUID of the event.\")\n    current_status string @description(\"What the agent is doing during the event.\")\n    emotional_state string @description(\"Brief description of the agent's emotional disposition during the event.\")\n    active_plans string[] @description(\"Brief description of the agent's active objectives or strategies in the context of the event.\")\n    beliefs string[] @description(\"The agent's beliefs or convictions that influence their actions during the event.\")\n    goals string[] @description(\"The agent's short-term and long-term goals related to the event.\")\n    //@@dynamic\n}\n\nclass ObjectInvolvement {\n    uuid string @description(\"Unique identifier for this object's involvement in an event in the format 'objectinvolvement-{object_uuid}-{event_uuid}', for example 'objectinvolvement-object-melatrite_nebula-event-5-5'\")\n    object string @description(\"UUID of the involved object.\")\n    event string @description(\"UUID of the event where the object is involved.\")\n    description_of_involvement string @description(\"Clear description of how the object is used or affected in the event, detailing its functional and narrative role.\")\n    object_status_before_event string @description(\"Brief description of the object's state prior to the event.\")\n    object_status_after_event string @description(\"Brief description of the object's state following the event.\")\n    //@@dynamic\n}\n\nclass SceneMetadata {\n    uuid string|null @description(\"Unique identifier for the scene.\")\n    title string @description(\"Title of the scene.\")\n    description string @description(\"Detailed description of the scene's setting and action.\")\n    scene_number int @description(\"Order of the scene within the episode.\")\n    location string @description(\"UUID of the primary location where this scene takes place.\")\n    next_scene string|null @description(\"UUID of the next scene in the narrative order (syuzhet).\")\n}\n\n// --- Functions ---\n\nfunction ExtractSceneMetadata(scene_text: string, story_context: string?, scene_number: int, locations: Location[]) -> SceneMetadata {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**: Extract metadata for the current scene.\n\n        **Instructions**:\n        1. **Title**: Generate a concise, descriptive title.\n        2. **Description**: Summarize the setting, characters, actions, and emotional tone.\n        3. **Scene Number**: Extract if explicitly mentioned; otherwise, leave null.\n        4. **Location**: Select the UUID of the primary location from the provided `locations` list. If not explicit, infer from `story_context`. If still unidentifiable, use 'location-unknown'.\n        5. **Next Scene**:  Identify any references to the next scene and assign its `scene_uuid`. If none, leave null.\n        6. **UUID**: This will be assigned in post processing.\n\n        **Known Locations**:\n        {% for loc in locations %}\n        - {{ loc.name }} ({{ loc.uuid }})\n        {% endfor %}\n\n        **Story Context**:\n        {{ story_context }}\n\n        {{ _.role('user') }}\n        **Scene to Analyze**:\n        Scene number {{ scene_number }}\n        {{ scene_text }}\n        <end of scene>\n\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ExtractEvents(scene_text: string, story_context: string?, scene_number: int) -> Event[] {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**: Extract distinct events within the scene in chronological order.\n\n        **Instructions**:\n        Extract and detail each distinct event or occurrence within the current scene in chronological order. For each event, provide comprehensive information as outlined below:\n\n        1. **Event Identification**:\n        - **Chronological Order**: Ensure events are ordered based on their sequence of occurrence within the scene.\n        - **Distinctness**: Each event should represent a unique action, decision, or occurrence that advances the narrative.\n\n        2. **Event Details**:\n        - **Title**:\n            - Create a clear and descriptive title that encapsulates the essence of the event.\n        - **UUID**:\n            - Will be assigned in post-processing\n        - **Description**:\n            - Provide a detailed summary of the event, including key actions, decisions, and outcomes.\n        - **Sequence Within Scene**:\n            - Assign a numerical order to each event starting from 1.\n        - **Key Dialogue**:\n            - Extract significant lines of dialogue that are central to the event's occurrence or impact.\n            - Ensure each line is accurately attributed to the correct speaker and event.\n        - **Agent Participations**:\n            - List the UUIDs of agents participating in the event (e.g., `agent-josh_lyman`).\n        - **Object Involvements**:\n            - List the UUIDs of objects involved in the event (e.g., `object-tie`).\n        - **Next Event**:\n            - Assign the UUID of the subsequent event in chronological order (e.g., `event-1-2`).\n            - If there is no subsequent event, set this field to null.\n\n        3. **UUID Integrity**:\n        - Ensure that all UUIDs for agents and objects correspond to valid entries in the provided `known_agents` and `known_objects` lists.\n        - Do not introduce new UUIDs for known entities; reuse existing ones for consistency.\n        - Avoid using non-ASCII characters in entity names (especially for affiliated_org). Normalize or transliterate names to a standard character set.\n\n        [EXAMPLE]\n        {\n        \"title\": \"Nancy McNally Briefs the Staff\",\n        \"uuid\": \"event-1-2\",\n        \"description\": \"National Security Advisor Nancy McNally addresses the senior staff, notifying them about the four USAID workers who went missing near the Kosovo-Serbia border while conducting post-conflict assessments.\",\n        \"sequence_within_scene\": 2,\n        \"key_dialogue\": [\n            \"Four USAID workers went dark three hours ago near the Kosovo-Serbia border. They were conducting post-conflict reconstruction assessments when we lost contact.\"\n        ],\n        \"agent_participations\": [\n            \"agent-nancy_mcnally\"\n        ],\n        \"object_involvements\": [\n            \"object-lcd_screens\"\n        ],\n        \"next_event\": \"event-1-3\"\n        },\n        [/EXAMPLE]\n\n\n        **Story Context**:\n        {{ story_context }}\n\n        {{ _.role('user') }}\n        **Scene to Analyze**:\n        Scene number {{ scene_number }}\n        {{ scene_text }}\n        <end of scene>\n\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ExtractAgents(scene_text: string, story_context: string?, agent_name_to_uuid_mapping: map<string, string>, scene_number: int, organizations: Organization[]) -> Agent[] {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**: Extract information about characters (agents) in the scene.\n\n        **Instructions**:\n        1. **Identify Agents**: Find characters who speak, act, or are directly referenced. Do *not* treat groups (e.g., 'hostages') as Agents unless they have dialogue.\n        2. **Full Name**: Provide hhe most complete and and descriptive name as canonical for the 'name' property.\n        3. **No Honorifics**: Do not use titles in names (e.g., 'James T. Kirk', not 'Captain Kirk'), except for cases like 'The Doctor'.\n        4. **Affiliated Organization**: Select the UUID from the available organizations, or leave it null if the agent is not affiliated with any known organization.  (The available organizations are reflected in the expected output schema.)\n        5. **Aliases**: Extract any alternative names used for the agent.\n        6. **UUID Mapping**: Use the `agent_name_to_uuid_mapping` to resolve agents to existing UUIDs if possible. If no match, create a new agent. Ensure uuid is correct and appropriately chosen, based on correctly-spelled names in snake case (e.g. 'agent-leo_mcgarry')\n\n        8. **ASCII-only**: Avoid using non-ASCII characters in entity names (especially for affiliated_org). Normalize or transliterate names to a standard character set.\n\n        [EXAMPLE]\n        {\n        \"uuid\": \"agent-jeremy_usbourne\",\n        \"agent_id\": \"jeremy_usbourne\",\n        \"name\": \"Jeremy Usbourne\",\n        \"title\": \"Creative Entrepreneur\",\n        \"aliases\": [\n            \"Super Hans\",\n            \"Digital Prophet\"\n        ],\n        \"description\": \"Jeremy Usbourne is a failed musician turned creative entrepreneur who has embraced an unconventional approach to the corporate world. He is characterized by his exuberance and ability to charm others, often leveraging buzzwords and absurd concepts to elevate his status within the corporate environment.\",\n        \"traits\": [\n            \"Creative\",\n            \"Unconventional\",\n            \"Impulsive\",\n            \"Carefree\",\n            \"Confident\",\n            \"Ambitious\",\n            \"Impractical\",\n            \"Charismatic\",\n            \"Charming\"\n        ],\n        \"affiliated_org\": \"org-metricshift_digital_solutions\",\n        \"sphere_of_influence\": \"Corporate Innovation\"\n        },\n        [/EXAMPLE]\n\n        **Story Context**:\n        {{ story_context }}\n    \t\t**Known Organizations**:\n            {% for org in organizations %}\n            - {{ org.name }} ({{ org.uuid }})\n            {% endfor %}\n\n            {{ _.role('user') }}\n            **Existing Agents (Name to UUID Mapping)**:\n            {% for name in agent_name_to_uuid_mapping %}{{ name }}: {{ agent_name_to_uuid_mapping[name] }}\n            {% endfor %}\n\n            **Scene to Analyze**:\n            Scene number {{ scene_number }}\n            {{ scene_text }}\n            <end of scene>\n\n            {{ ctx.output_format }}\n        \"#\n    }\n\nfunction ExtractObjects(scene_text: string, story_context: string?, scene_number: int, agents: Agent[]) -> Object[] {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**: Extract details of noteworthy objects in the scene.\n\n        **Instructions**:\n        1. **Relevance**: Extract objects relevant to the story or explicitly mentioned.\n        2. **Never People**: Do *not* categorize people as objects. Groups of people are 'organizations'.\n        3. **Description**: Provide a concise description of each object.\n        4. **Original Owner**: Select the UUID of the original owner from the provided `agents` list. If the object has no original owner, leave the field null.\n        5. **ASCII-only**: Avoid using non-ASCII characters in entity names (especially for affiliated_org). Normalize or transliterate names to a standard character set.\n\n        [EXAMPLE]\n        {\n        \"uuid\": \"object-laptop\",\n        \"name\": \"Laptop\",\n        \"description\": \"A portable computer that Sam Seaborn uses to draft presidential addresses, featuring an illuminated screen displaying two documents.\",\n        \"purpose\": \"To draft presidential addresses regarding the current situation involving aid workers.\",\n        \"significance\": \"Symbolizes the pressure and urgency faced by staff in crisis situations, as well as the need for careful communication in political narratives.\",\n        \"original_owner\": \"agent-sam_seaborn\",\n        },\n        [/EXAMPLE]\n\n        Be careful to use hyphens and underscores correctly. Hyphenate only the entity type ('object-') otherwise use lowercase with underscores (snake_case) if using multiple words (example: 'object_cd_rom', 'object-merry_go_round', 'object-long-range_sensor_array')\n\n\n        **Known Agents (for Original Owner)**:\n        {% for agent in agents %}\n        - {{ agent.name }} ({{ agent.uuid }}): affiliated_org = {{ agent.affiliated_org or 'None' }}\n        {% endfor %}\n\n        **Story Context**:\n        {{ story_context }}\n\n        {{ _.role('user') }}\n        **Scene to Analyze**:\n        Scene number {{ scene_number }}\n        {{ scene_text }}\n        <end of scene>\n\n        {{ ctx.output_format }}\n    \"#\n}\nfunction ExtractAgentParticipations(scene_text: string, story_context: string?, event: Event, agents: Agent[], scene_number: int) -> AgentParticipation[] {\n  client CustomGPT4oMini\n  prompt #\"\n    {{ Narrative_analyst_persona ()}}\n\n    **Objective**:\n    Use your dramatic analysis to provide a comprehensive picture of agents' participation in an event, including insight into their state of mind.\n\n    **Instructions**:\n    1. **Analyze Scene and Event**: Determine which agents participate in the event *within the current scene {{ scene_number }}*.\n    2. **AgentParticipation Object**: For each participation:\n       - `agent`: Select the UUID from the provided `agents` list. Do *NOT* invent new agent UUIDs.\n       -  `event`: Use the existing UUID of the provided 'event'\n       -  Fill out all other relevant properties\n    3. **UUID**: This will be assigned in post-processing.\n\n    [EXAMPLE]\n    {\n    \"uuid\": \"participation-agent-jean_luc_picard-event-1-4\",\n    \"agent\": \"agent-jean_luc_picard\",\n    \"event\": \"event-1-4\",\n    \"current_status\": \"Commanding Ensign Taur to set course for investigation.\",\n    \"emotional_state\": \"Confident and resolute.\",\n    \"active_plans\": [\n        \"Initiate travel to Melatrite III\",\n        \"Explore the energy readings firsthand\"\n    ],\n    \"beliefs\": [\n        \"Proactive investigation will yield answers\",\n        \"The crew's safety and the mission's success are paramount\"\n    ],\n    \"goals\": [\n        \"Gather more data from Melatrite III\",\n        \"Ensure the crew is prepared for possible encounters\"\n    ]\n    },\n    [/EXAMPLE]\n\n\n    **Story Context**:\n    {{ story_context }}\n\n    **Known Agents**:\n    {% for agent in agents %}\n    -  {{ agent.name }} ({{ agent.uuid }})\n    {% endfor %}\n\n    **Event Description**:\n    {{ event.description }}\n    **Event UUID:**\n    {{event.uuid}}\n\n    {{ _.role('user') }}\n    **Scene to Analyze**:\n    Scene number {{ scene_number }}\n    {{ scene_text }}\n    <end of scene>\n\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction ExtractObjectInvolvements(scene_text: string, story_context: string?, event: Event, objects: Object[], scene_number: int) -> ObjectInvolvement[] {\n  client CustomGPT4oMini\n  prompt #\"\n    {{ Narrative_analyst_persona ()}}\n\n    **Objective**:\n    Use your dramatic analysis to provide a comprehensive picture of objects' literal or subtextual involvement in an event, including who used it.\n\n    **Instructions**:\n    1. **Review Scene and Event**: Determine which objects are involved (directly or indirectly) *within the current scene {{ scene_number }}*.\n    2. **ObjectInvolvement Object**: For each object involved:\n        - `object`: Select the UUID from the provided `objects` list. Do *NOT* invent new object UUIDs.\n        - `event`: Use the existing UUID of the provided 'event\n        - Fill out all other relevant properties.\n    3.  **UUID**: This will be assigned in post processing.\n\n    [EXAMPLE]\n    {\n    \"uuid\": \"involvement-object-varga_thorn-event-2-12\",\n    \"object\": \"object-varga_thorn\",\n    \"event\": \"event-2-12\",\n    \"description_of_involvement\": \"Marc Cory examines Garvey's body and discovers a Varga thorn embedded in Garvey's flesh, identifying the cause of his transformation.\",\n    \"object_status_before_event\": \"The Varga thorn was embedded in Jeff Garvey's flesh, unnoticed.\",\n    \"object_status_after_event\": \"The Varga thorn is removed from Garvey's body during the examination.\"\n     },\n     [/EXAMPLE]\n\n    **Story Context**:\n    {{ story_context }}\n\n    **Event Description**:\n    {{ event.description }}\n    **Event UUID:**\n    {{event.uuid}}\n\n    {{ _.role('user') }}\n\n    **Known Objects**:\n    {% for object in objects %}\n    - {{ object.name }} ({{ object.uuid }})\n    {% endfor %}\n\n    **Scene to Analyze**:\n    Scene number {{ scene_number }}\n    {{ scene_text }}\n    <end of scene>\n\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction ExtractLocations(scene_text: string, story_context: string?, scene_number: int) -> Location[] {\n   client CustomGPT4oMini\n   prompt #\"\n       {{ Narrative_analyst_persona ()}}\n\n       **Objective**: Detail the principal location and other significant places.\n\n       **Instructions**:\n        1. **References**: Look for places (rooms, cities, planets, etc.) in dialogue and stage directions.\n        2. **Specificity**: Prioritize specific rooms within larger buildings (e.g., \"Situation Room\" within the \"White House\").\n        3. **Location vs. Object**: If an entity could be both, treat it as a location if it's a defined space where actions occur.\n        4. **Description**: Provide a brief description if present.\n        5. **ASCII-only**: Avoid using non-ASCII characters in entity names (especially for affiliated_org). Normalize or transliterate names to a standard character set.\n\n\n        [EXAMPLE]\n        {\n        \"name\": \"Steam Pipe Trunk Distribution Venue\",\n        \"type\": \"Scene Location\",\n        \"description\": \"A windowless office space occupied by staff members amidst an atmosphere of tension and urgency. It contains remnants of intense work, such as crumpled papers and empty coffee cups, reflecting the pressure of the situation. The space serves as a backdrop for significant discussions and emotional exchanges related to the ongoing crises.\",\n        \"uuid\": \"location-steam_pipe_trunk_distribution_venue\"\n        },\n        [/EXAMPLE]\n\n       **Story Context**:\n       {{ story_context }}\n\n       {{ _.role('user') }}\n       **Scene to Analyze**:\n       Scene number {{ scene_number }}\n       {{ scene_text }}\n        <end of scene>\n\n       {{ ctx.output_format }}\n   \"#\n}\n\nfunction ExtractOrganizations(\n    scene_number: int,\n    scene_text: string,\n    story_context: string?,\n    agents: Agent[],\n    organizations: Organization[]\n) -> Organization[] {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n                **Objective**:\n        Extract comprehensive details of organizations appearing in the current scene (the provided `scene_text`) or the provided list of Known Agents (specifically their affiliated_org) and Known Organizations.\n        In the knowledge graph we are constructing, it is vital that each agent's 'affiliated_org' is modeled as complete Organization object, with a recriprocal connection via the Organization's member list.\n        For example if an agent has an affiliated_org like this:\n\n            \"agent-nancy_mcnally\": {\n                \"uuid\": \"agent-nancy_mcnally\",\n                \"agent_id\": \"nancy_mcnally\",\n                \"name\": \"Nancy McNally\",\n                \"title\": \"National Security Advisor\",\n                \"description\": \"Nancy McNally is the National Security Advisor, responsible for the country's security policies and strategies. She is depicted as a strong and authoritative figure, capable of handling high-pressure situations with a steady hand. Her expertise in national security matters is complemented by her ability to maintain a commanding presence.\",\n                \"traits\": [\n                    \"Strategic\",\n                    \"Authoritative\",\n                    \"Concerned\",\n                    \"Experienced\"\n                ],\n                \"affiliated_org\": \"org-national_security_council\",\n                \"sphere_of_influence\": \"National Security\"\n            },\n\n            then this should also exist as an extracted organization, even if it isn't explicitly mentioned in the scene:\n\n            \"org-national_security_council\": {\n                \"uuid\": \"org-national_security_council\",\n                \"name\": \"National Security Council\",\n                \"description\": \"Advises the President on national security and foreign policy matters.\",\n                \"sphere_of_influence\": \"United States government and its foreign relations.\",\n                \"members\": [\n                    \"agent-nancy_mcnally\"\n                ]\n            },\n\n        It's also fine for organizations that are referenced in passing to have no agent members, for example:\n\n            \"org-serbian_paramilitary_group\": {\n                \"uuid\": \"org-serbian_paramilitary_group\",\n                \"name\": \"Serbian Paramilitary Group\",\n                \"description\": \"A paramilitary organization claiming responsibility for the attack on USAID workers.\",\n                \"sphere_of_influence\": \"Serbia and areas affected by its armed groups.\",\n                \"members\": []\n            },\n\n        Organizations is a broad term and might include corporations, orchestras, universities, sports teams, alien empires, races, institutions or any other permanent or temporary collective bodies or gatherings that agents in our story are affiliated with, work for, represent, belong to etc., or otherwise appear significantly in the story.\n        \n        **Instructions**:\n        - An organization is typically a group or institution (e.g., a military unit, government body, or secret society).\n        - An organization may also be a temporary grouping of people (e.g. hostages, an angry crowd, or tour group)\n        - Generate a UUID for the organization in the format 'org-{name}' where 'name' is a normalized, lowercase version of the organization's name with words separated by underscores (e.g., 'org-entropy_syndicate', 'org-starfleet', 'org-department_of_justice').\n        - Include a short 'description' of the organization's role or purpose if stated or implied.\n        - **Identify members of each organization. Use the provided `known_agents` list and the scene text to determine which agents belong to each organization. List the members using their UUIDs (e.g., `agent-sarah_chen`).**\n        - If the provided information does not mention any type of organization, return an empty list.\n\n        **Objective**: Extract details of organizations represented in the scene or referenced by characters.\n\n        **Instructions**:\n        1. **Definition**: An organization is a group or institution (e.g., military unit, government body) or a less formal grouping (e.g., \"protesters\").\n        2. **Description**: Provide a brief description of the organization's role.\n        3. **Members**: List members using *valid UUIDs ONLY from the provided `agents` list*. Do *NOT* create new agent UUIDs.\n        4. **Existing Organizations**: If an agent's `affiliated_org` refers to a known organization (in `organizations`), ensure the agent's UUID is in the organization's `members` list.\n        5. **ASCII-only**: Avoid using non-ASCII characters in entity names (especially for affiliated_org). Normalize or transliterate names to a standard character set.\n\n        [EXAMPLE]\n        {\n        \"uuid\": \"org-entropy_syndicate\",\n        \"name\": \"Entropy Syndicate\",\n        \"description\": \"The Entropy Syndicate is a clandestine group adept in temporal espionage, aiming to manipulate and exploit temporal technologies for their gain. They orchestrated a sophisticated attack on the Quantum Archive to procure secrets of the Time War.\",\n        \"sphere_of_influence\": \"Hostile Acquisitions and Temporal Warfare\",\n        \"members\": [\n            \"agent-director_malik\",\n            \"agent-coordinator_voss\"\n        ]\n        },\n        [/EXAMPLE]\n\n        **Story Context**:\n        {{ story_context }}\n\n        **Known Agents (if any)**:\n        {% for agent in agents %}\n        - {{ agent.name }} ({{ agent.uuid }}): affiliated_org = {{ agent.affiliated_org or 'None' }}\n        {% endfor %}\n\n        **Known Organizations (if any)**:\n        {% for org in organizations %}\n        - {{ org.name }} ({{ org.uuid }})\n        {% endfor %}\n\n        {{ _.role('user') }}\n        **Scene to Analyze**:\n        Scene number {{ scene_number }}\n        {{ scene_text }}\n        <end of scene>\n\n        {{ ctx.output_format }}\n    \"#\n}\n\n// Entity Resolution Stage\n\nclass ResolvedAgent {\n    uuid string @description(\"Unique identifier for the agent in snake_case, derived from their name excluding title, honorific or rank, in the format 'agent-{agent_id}', for example 'agent-josiah_bartlet', 'agent-jean_luc_picard', 'agent-she_ra' Special exceptions for cases where the character's name *is* a title, such as 'agent-darth_vader'\")\n    agent_id string @description(\"Unique identifier derived from the agent's name in snake_case\")\n    name string @description(\"Full canonical name (including surname) of the dramatic agent (character) if you know it.\")\n    title string? @description(\"Official or informal role, title, or designation held by the agent within the narrative (e.g., 'Doctor', 'UNIT Commander', 'President of the United States', 'Lieutenant Commander').\")\n    aliases string[]? @description(\"Alternative names or titles used to refer to the agent.\")\n    description string @description(\"Comprehensive general (not scene-specific) character profile based on all known information in the story so far. This is an evergreen description but you'll keep adding to and revising it as the story progresses.\")\n    traits string[] @description(\"List of defining qualities and characteristics that describe the agent's personality, behavior, or abilities (e.g., 'Brave', 'Time Lord', 'Resourceful').\")\n    affiliated_org string|null @description(\"The organization the agent appears to be officially associated with. Expressed as a unique identifier in snake_case, in the format 'org-{org_id}' - e.g., 'org-department_of_justice', 'org-time_lords', 'org-galactic_empire', 'org-library_of_congress'. Organization is broad and might include corporations, orchestras, universities, sports teams, alien empires, races, institutions or any other permanent or temporary collective bodies or gatherings.\") @alias(\"affiliated_org_uuid\")\n    sphere_of_influence string? @description(\"Primary domain, area, or field where the agent exerts their power or influence (e.g., 'Time Travel', 'Military Strategy').\")\n    source_uuids string[]? @description(\"List of UUIDs of the original entities that were merged into this resolved entity.\")\n    @@dynamic\n}\n\nclass ResolvedOrganization {\n    uuid string @description(\"Unique identifier for the organization in snake_case, in the format 'org-{name}', for example 'org-time_lords', 'org-galactic_empire', 'org-united_federation_of_planets'\")\n    name string @description(\"Name of the organization.\")\n    description string @description(\"Description of the organization's purpose and role.\")\n    sphere_of_influence string @description(\"Area where the organization has influence.\")\n    members string[]? @description(\"List of UUIDs of agents who are members of this organization.\")\n    source_uuids string[]? @description(\"List of UUIDs of the original entities that were merged into this resolved entity.\")\n    @@dynamic\n}\n\nclass ResolvedObject {\n    uuid string @description(\"Unique identifier for the object, following the format 'object-<normalized_name>'. Example: 'object-lcd_screens'.\")\n    name string @description(\"The official name of the object. Example: 'LCD Screens'.\")\n    description string @description(\"A detailed description of the object's nature, physical attributes, and role within the narrative.\")\n    purpose string @description(\"The intended use or function of the object within the context of the narrative. Example: 'To visualize satellite imagery for briefings'.\")\n    significance string @description(\"The narrative importance or symbolic meaning of the object. Example: 'Provides visual context for the Kosovo-Serbia situation'.\")\n    original_owner string? @description(\"The UUID of the agent who originally owns the object, following the format 'agent-<agent_id>'. Example: 'agent-josh_lyman'. If no owner, set to null.\")\n    source_uuids string[]? @description(\"List of UUIDs of the original entities that were merged into this resolved entity.\")\n    @@dynamic\n}\n\nclass ResolvedLocation {\n    uuid string @description(\"Unique identifier for the location in snake_case, in the format 'location-{name}', for example 'location-mos_eisley' or 'location-hogwarts_castle'\")\n    name string @description(\"Name of the location.\")\n    description string @description(\"Detailed description of the location's characteristics.\")\n    type string @description(\"Type of location (e.g., City, Building, Planet, Office, Apartment).\")\n    source_uuids string[]? @description(\"List of UUIDs of the original entities that were merged into this resolved entity.\")\n    @@dynamic\n}\n\nfunction ResolveAgentCluster(entities: Agent[]) -> ResolvedAgent[] {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**:\n        Disambiguate and resolve a list of Agent entities, identifying all unique agents present.\n\n        **Instructions**:\n        - Consider each provided agent as a potential reference to a unique character.\n        - Identify all unique agents present in the list.\n        - For each unique agent:\n            - Choose the most complete name as canonical.  Prefer names with surnames.\n            - Merge descriptions into a single cohesive, non-redundant description.\n            - Combine traits.\n            - If an affiliated_org is mentioned, choose the most relevant one.\n            - If multiple sphere_of_influence values appear, pick the most representative one.\n            - Do NOT include a source_uuids field.\n        - Return a list of all resolved unique agents.\n\n        Input Agents:\n        {{ entities }}\n\n        ______\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ResolveOrganizationCluster(entities: Organization[]) -> ResolvedOrganization[] {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**:\n        Disambiguate and resolve a list of Organization entities, identifying all unique organizations.\n\n        **Instructions**:\n        - Consider each provided organization as a potential reference to a unique group or institution.\n        - Identify all unique organizations present in the list.\n        - For each unique organization:\n            - Choose the most complete and descriptive name as canonical.\n            - Merge descriptions into a single cohesive, non-redundant description.\n            - Combine member lists, removing duplicates.\n            - If multiple sphere_of_influence values appear, pick the most representative one.\n            - Do NOT include a source_uuids field.\n        - Return a list of all resolved unique organizations.\n\n        Input Organizations:\n        {{ entities }}\n\n        ______\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ResolveLocationCluster(entities: Location[]) -> ResolvedLocation[] {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**:\n        Disambiguate and resolve a list of Location entities, identifying all unique locations.\n\n        **Instructions**:\n        - Consider each provided location as a potential reference to a unique place.\n        - Identify all unique locations present in the list.\n        - For each unique location:\n            - Choose the most specific and descriptive name as canonical (e.g., \"White House Situation Room\" is preferred over \"White House\").\n            - Merge descriptions into a single cohesive, non-redundant description.\n            - Combine location types, if applicable.\n            - Do NOT include a source_uuids field.\n        - Return a list of all resolved unique locations.\n\n        Input Locations:\n        {{ entities }}\n\n        ______\n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction ResolveObjectCluster(entities: Object[]) -> ResolvedObject[] {\n    client CustomGPT4oMini\n    prompt #\"\n        {{ Narrative_analyst_persona ()}}\n\n        **Objective**:\n        Disambiguate and resolve a list of Object entities, identifying all unique objects.\n\n        **Instructions**:\n        - Consider each provided object as a potential reference to a unique item.\n        - Identify all unique objects present in the list.\n        - For each unique object:\n            - Ensure the uuid is correct and appropriately chosen. Avoid spelling out acronyms etc. in uuid labels.\n            - Choose the most complete and and descriptive name as canonical for the 'name' property\n            - Normalize or transliterate names and uuids to a standard character set (ASCII or similar) where necessary.\n            - Merge descriptions into a single cohesive, non-redundant description.\n            - Combine purpose and significance fields if they provide distinct information; otherwise, choose the most informative one.\n            - If multiple original_owner values are present, choose the most likely owner based on the context.\n            - Do NOT include a source_uuids field.\n        - Return a list of all resolved unique objects.\n\n        Input Objects:\n        {{ entities }}\n\n        ______\n        {{ ctx.output_format }}\n    \"#\n}",
    "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string) -> Resume {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n",
}

def get_baml_files():
    return file_map